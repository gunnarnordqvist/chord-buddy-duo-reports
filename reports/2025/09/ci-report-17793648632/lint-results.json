[{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/eslint.config.backup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/eslint.config.minimal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/scripts/test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/App.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":13,"column":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { GlobalAudioProvider } from \"@/contexts/GlobalAudioContext\";\nimport Index from \"./pages/Index\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <GlobalAudioProvider>\n      <TooltipProvider>\n        <Toaster />\n        <Sonner />\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/\" element={<Index />} />\n            {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n            <Route path=\"*\" element={<NotFound />} />\n          </Routes>\n        </BrowserRouter>\n      </TooltipProvider>\n    </GlobalAudioProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/BeerGlassLoader.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":3,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\n\ninterface BeerGlassLoaderProps {\n  onComplete?: () => void;\n}\n\nexport const BeerGlassLoader = ({ onComplete }: BeerGlassLoaderProps) => {\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress(prev => {\n        const newProgress = prev + Math.random() * 8 + 3;\n        if (newProgress >= 100) {\n          setTimeout(() => onComplete?.(), 300); // Call onComplete when reaching 100%\n          return 100;\n        }\n        return newProgress;\n      });\n    }, 200);\n\n    return () => clearInterval(interval);\n  }, [onComplete]);\n\n  return (\n    <div className=\"flex flex-col items-center justify-center p-8\">\n      <div className=\"relative w-20 h-24 mb-4\">\n        {/* Musical note drawing animation */}\n        <svg\n          viewBox=\"0 0 100 120\"\n          className=\"w-full h-full\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {/* Staff line */}\n          <line\n            x1=\"10\"\n            y1=\"60\"\n            x2=\"90\"\n            y2=\"60\"\n            stroke=\"hsl(var(--primary))\"\n            strokeWidth=\"2\"\n            className=\"opacity-30\"\n          />\n          \n          {/* Note head */}\n          <ellipse\n            cx=\"30\"\n            cy=\"60\"\n            rx=\"8\"\n            ry=\"6\"\n            fill=\"hsl(var(--primary))\"\n            className=\"transition-all duration-300 ease-out\"\n            style={{\n              opacity: progress > 20 ? 1 : 0,\n              transform: progress > 20 ? 'scale(1)' : 'scale(0)'\n            }}\n          />\n          \n          {/* Note stem */}\n          <line\n            x1=\"38\"\n            y1=\"60\"\n            x2=\"38\"\n            y2=\"20\"\n            stroke=\"hsl(var(--primary))\"\n            strokeWidth=\"3\"\n            className=\"transition-all duration-500 ease-out\"\n            style={{\n              strokeDasharray: '40',\n              strokeDashoffset: progress > 40 ? 0 : 40\n            }}\n          />\n          \n          {/* Note flag */}\n          <path\n            d=\"M38 20 Q50 25, 45 35 Q42 30, 38 32\"\n            fill=\"hsl(var(--primary))\"\n            className=\"transition-all duration-300 ease-out\"\n            style={{\n              opacity: progress > 70 ? 1 : 0,\n              transform: progress > 70 ? 'scale(1)' : 'scale(0)'\n            }}\n          />\n          \n          {/* Musical sparkles when nearly complete */}\n          {progress > 80 && (\n            <>\n              <circle\n                cx=\"65\"\n                cy=\"40\"\n                r=\"2\"\n                fill=\"hsl(var(--primary))\"\n                className=\"opacity-60\"\n              />\n              <circle\n                cx=\"75\"\n                cy=\"50\"\n                r=\"1.5\"\n                fill=\"hsl(var(--primary))\"\n                className=\"opacity-80\"\n              />\n              <circle\n                cx=\"55\"\n                cy=\"75\"\n                r=\"1\"\n                fill=\"hsl(var(--primary))\"\n                className=\"opacity-70\"\n              />\n            </>\n          )}\n        </svg>\n      </div>\n      \n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/SmartGuitar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token InstrumentConfig","line":8,"column":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useGuitarSounds } from \"@/hooks/useGuitarSounds\";\nimport { useTransposition } from \"@/hooks/useTransposition\";\nimport useLocalStorage from \"@/hooks/useLocalStorage\";\nimport { useUkuleleSounds } from \"@/hooks/useUkuleleSounds\";\nimport { ChordSettings, type InstrumentConfig } from \"./chords/ChordSettings\";\nimport { \n  DrumKit, \n  BassGuitar, \n  Piano, \n  GuitarNeck, \n  GuitarDropDNeck, \n  GuitarOpenGNeck, \n  GuitarOpenDNeck, \n  GuitarDADGADNeck, \n  GuitarHalfStepDownNeck, \n  GuitarWholeStepDownNeck, \n  UkuleleNeck, \n  MandolinNeck, \n  OctaveMandolinNeck, \n  BouzoukiNeck, \n  BalalalikaNeck, \n  Banjo4Neck, \n  Banjo5Neck, \n  MetronomeAutoPlayer \n} from \"./instruments\";\nimport { BeerGlassLoader } from \"./BeerGlassLoader\";\nimport { SongText } from \"./ui/SongText\";\nimport { ChordSelector } from \"./chords/ChordSelector\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useGlobalAudio } from \"@/contexts/GlobalAudioContext\";\nimport { Music } from \"lucide-react\";\nimport { \n  CHORD_LIBRARY, \n  getChord, \n  getDefaultLeftChords, \n  getDefaultRightChords \n} from \"@/data/chordLibrary\";\nimport type { Chord } from \"@/data/chordLibrary\";\nimport { useSongChordExtraction } from \"@/hooks/useSongChordExtraction\";\n\nexport const SmartGuitar = () => {\n  const [selectedChord, setSelectedChord] = useState<Chord | null>(null);\n  const [playingString, setPlayingString] = useState<number | null>(null);\n  const [stringAnimation, setStringAnimation] = useState<{ [key: number]: boolean }>({});\n  const [isAudioReady, setIsAudioReady] = useState(false);\n  const [leftChords, setLeftChords] = useLocalStorage<Chord[]>('leftChords', []);\n  const [rightChords, setRightChords] = useLocalStorage<Chord[]>('rightChords', []);\n  const [isDragging, setIsDragging] = useState(false);\n  const [lastPlayedString, setLastPlayedString] = useState<number | null>(null);\n  const [secondaryPlayingString, setSecondaryPlayingString] = useState<number | null>(null);\n  const [secondaryStringAnimation, setSecondaryStringAnimation] = useState<{ [key: number]: boolean }>({});\n  const [initialChordSet, setInitialChordSet] = useLocalStorage('initialChordSet', false);\n  const [showSongText, setShowSongText] = useLocalStorage('showSongText', true);\n  const [showAutoPlayer, setShowAutoPlayer] = useLocalStorage('showAutoPlayer', true);\n  const [showMetronome, setShowMetronome] = useLocalStorage('showMetronome', true);\n  const [instrumentConfig, setInstrumentConfig] = useLocalStorage<InstrumentConfig>('instrumentConfig', {\n    instruments: [\"guitar\", \"ukulele\"],\n    primaryInstrument: \"ukulele\"\n  });\n  const [autoPlayChords, setAutoPlayChords] = useLocalStorage('autoPlayChords', true);\n  const [songLines, setSongLines] = useState<Array<{text: string; chords: string[]}>>([]);\n  const [availableSongChords, setAvailableSongChords] = useState<Chord[]>([]);\n  const [isPresetActive, setIsPresetActive] = useState(false);\n  \n  const { extractChordsFromSong } = useSongChordExtraction();\n  \n  const { playChord: playGuitarChord, playString: playGuitarString, initializeSounds: initializeGuitarSounds } = useGuitarSounds();\n  const { playChord: playUkuleleChord, playString: playUkuleleString, initializeSounds: initializeUkuleleSounds } = useUkuleleSounds();\n  const { transposeChordArray, transposeUp, transposeDown, reset, getTranspositionText, transposition, transposeChord } = useTransposition();\n  const { isMuted } = useGlobalAudio();\n\n  // Apply transposition to chords\n  const transposedLeftChords = useMemo(() => \n    transposeChordArray(leftChords, transposition), \n    [leftChords, transposition]\n  );\n  \n  const transposedRightChords = useMemo(() => \n    transposeChordArray(rightChords, transposition), \n    [rightChords, transposition]\n  );\n\n  // Split available song chords for left and right selectors\n  const { leftSongChords, rightSongChords } = useMemo(() => {\n    // If preset is active, show the stored chords instead of song chords\n    if (isPresetActive || availableSongChords.length === 0) {\n      return { leftSongChords: transposedLeftChords, rightSongChords: transposedRightChords };\n    }\n    \n    const transposedSongChords = transposeChordArray(availableSongChords, transposition);\n    const midpoint = Math.ceil(transposedSongChords.length / 2);\n    \n    return {\n      leftSongChords: transposedSongChords.slice(0, midpoint),\n      rightSongChords: transposedSongChords.slice(midpoint)\n    };\n  }, [availableSongChords, transposition, transposeChordArray, transposedLeftChords, transposedRightChords, isPresetActive]);\n\n  // Update selected chord when transposition changes\n  useEffect(() => {\n    if (selectedChord && transposition !== 0) {\n      const transposedChord = transposeChord(selectedChord, transposition);\n      \n      // Only update if the chord name actually changed\n      if (transposedChord.name !== selectedChord.name) {\n        setSelectedChord(transposedChord);\n      }\n    }\n  }, [transposition]); // Only depend on transposition, not transposeChord function\n\n  useEffect(() => {\n    const setupAudio = async () => {\n      try {\n        await initializeGuitarSounds();\n        await initializeUkuleleSounds();\n        // Don't set isAudioReady here - let the beer glass animation complete\n      } catch (error) {\n        console.error(\"Audio setup failed:\", error);\n        // Set as ready anyway to avoid infinite loading\n        setIsAudioReady(true);\n      }\n    };\n    setupAudio();\n  }, []); // Remove dependencies to avoid circular reference\n\n  // Listen for song changes and update available chords\n  useEffect(() => {\n    const updateAvailableChords = () => {\n      const savedSongData = localStorage.getItem(\"selectedSongData\");\n      if (savedSongData) {\n        try {\n          const songData = JSON.parse(savedSongData);\n          const uniqueChords = extractChordsFromSong(songData);\n          \n          // Create chord objects for the unique chords in the song\n          const songChordObjects: Chord[] = uniqueChords.map((chordName: string) => {\n            // First try to find in the chord library\n            const libraryChord = getChord(chordName);\n            if (libraryChord) {\n              return libraryChord;\n            }\n            \n            // If not found, try to find in default chords\n            const existingChord = [...getDefaultLeftChords(), ...getDefaultRightChords()]\n              .find(c => c.name === chordName);\n            \n            if (existingChord) {\n              return existingChord;\n            }\n            \n            // Last resort - create a basic chord with open strings\n            return {\n              name: chordName,\n              fingers: [0, 0, 0, 0, 0, 0],\n              isCustom: true\n            };\n          });\n          \n          setAvailableSongChords(songChordObjects);\n        } catch (error) {\n          console.error(\"Error parsing song data:\", error);\n          setAvailableSongChords([]);\n        }\n      }\n    };\n    \n    // Update chords on mount\n    updateAvailableChords();\n    \n    // Listen for song changes\n    const handleSongChange = () => {\n      updateAvailableChords();\n      // When a new song is selected, disable preset mode\n      setIsPresetActive(false);\n    };\n    \n    window.addEventListener('songChanged', handleSongChange);\n    return () => window.removeEventListener('songChanged', handleSongChange);\n  }, [extractChordsFromSong]);\n\n  // Update chords based on selected song and set initial chord using chord database\n  useEffect(() => {\n    const updateChordsFromSong = () => {\n      // Only load default chords if user hasn't saved any custom chords\n      if (leftChords.length > 0 || rightChords.length > 0) {\n        return; // User has saved chords, don't override them\n      }\n      \n      let savedSongData = localStorage.getItem(\"selectedSongData\");\n      \n      // If no song is saved, use the default first song\n      if (!savedSongData) {\n        const defaultSong = {\n          id: \"blinka-lilla-stjarna\",\n          title: \"Blinka Lilla Stjärna\", \n          artist: \"Traditionell\",\n          genre: \"Barnsång\",\n          difficulty: \"Easy\",\n          lines: [\n            { text: \"Blinka lilla stjärna där\", chords: [\"C\", \"C\", \"G\", \"G\"], section: \"Vers 1\" },\n            { text: \"Högt bland molnen går din färd\", chords: [\"Am\", \"Am\", \"G\", \"G\"] },\n            { text: \"Hur jag undrar vad du är\", chords: [\"F\", \"F\", \"C\", \"C\"], section: \"Vers 2\" },\n            { text: \"Fjärran stor och nära liten\", chords: [\"G\", \"G\", \"C\", \"C\"] },\n            { text: \"Blinka lilla stjärna där\", chords: [\"C\", \"C\", \"G\", \"G\"], section: \"Refräng\" },\n            { text: \"Högt bland molnen går din färd\", chords: [\"Am\", \"Am\", \"G\", \"C\"] }\n          ]\n        };\n        localStorage.setItem(\"selectedSongData\", JSON.stringify(defaultSong));\n        savedSongData = JSON.stringify(defaultSong);\n      }\n      \n      if (savedSongData) {\n        try {\n          const songData = JSON.parse(savedSongData);\n          const allSongChords = songData.lines?.flatMap((line: {chords: string[]}) => line.chords) || [];\n          const uniqueChords = [...new Set(allSongChords)];\n          \n          // Create chord objects for the unique chords in the song\n          const songChordObjects: Chord[] = uniqueChords.map((chordName: string) => {\n            // First try to find in the chord library\n            const libraryChord = getChord(chordName);\n            if (libraryChord) {\n              return libraryChord;\n            }\n            \n            // If not found, try to find in default chords\n            const existingChord = [...getDefaultLeftChords(), ...getDefaultRightChords()]\n              .find(c => c.name === chordName);\n            \n            if (existingChord) {\n              return existingChord;\n            }\n            \n            // Last resort - create a basic chord with open strings\n            return { name: chordName, fingers: [0, 0, 0, 0, 0, 0] };\n          });\n          \n           // Split chords: left gets odd positions (1,3,5...), right gets even positions (2,4,6...)\n           const leftChords = songChordObjects.filter((_, index) => index % 2 === 0).slice(0, 6);\n           const rightChords = songChordObjects.filter((_, index) => index % 2 === 1).slice(0, 6);\n           setLeftChords(leftChords);\n           setRightChords(rightChords);\n           setSongLines(songData.lines || []);\n          \n          // Set initial chord if audio is ready\n          if (isAudioReady && !initialChordSet) {\n            const firstChord = songData.lines?.[0]?.chords?.[0];\n            if (firstChord) {\n              const chordToSelect = songChordObjects.find(c => c.name === firstChord);\n              if (chordToSelect) {\n                setSelectedChord(chordToSelect);\n                setInitialChordSet(true);\n              }\n            }\n          }\n        } catch (error) {\n          // Error parsing song data, keeping empty chords\n          setLeftChords([]);\n          setRightChords([]);\n        }\n      }\n    };\n\n    // Update chords when component mounts\n    updateChordsFromSong();\n\n    // Listen for song changes\n    const handleSongChange = () => {\n      updateChordsFromSong();\n      setInitialChordSet(false); // Reset to allow new initial chord\n      reset(); // Reset transposition when changing songs\n      setSelectedChord(null); // Clear selected chord\n    };\n    \n    window.addEventListener('songChanged', handleSongChange);\n    return () => window.removeEventListener('songChanged', handleSongChange);\n  }, [isAudioReady, initialChordSet, leftChords.length, rightChords.length]);\n\n  // Load default chords for first-time users\n  useEffect(() => {\n    if (leftChords.length === 0 && rightChords.length === 0 && !initialChordSet) {\n      const defaultLeft = getDefaultLeftChords();\n      const defaultRight = getDefaultRightChords();\n      setLeftChords(defaultLeft);\n      setRightChords(defaultRight);\n      setInitialChordSet(true);\n    }\n  }, [leftChords.length, rightChords.length, initialChordSet, setLeftChords, setRightChords, setInitialChordSet]);\n\n  const selectChord = async (chord: Chord) => {\n    // Chord selection logic\n    setSelectedChord(chord);\n    if (isAudioReady && !isMuted && autoPlayChords) {\n      \n      if (instrumentConfig.primaryInstrument === \"ukulele\") {\n        await playUkuleleChord(chord.name, transposition);\n      } else {\n        await playGuitarChord(chord.name, transposition);\n      }\n      \n    } else {\n      \n    }\n  };\n\n  const handleStringPlay = async (stringIndex: number, fromDrag: boolean = false) => {\n    // String play logic\n    \n    if (!selectedChord) {\n      \n      return;\n    }\n    \n    // Allow playing different strings during drag, but prevent rapid repetition of the same string\n    if (fromDrag && lastPlayedString === stringIndex) return;\n    \n    setPlayingString(stringIndex);\n    setStringAnimation(prev => ({ ...prev, [stringIndex]: true }));\n    setLastPlayedString(stringIndex);\n    \n    if (isAudioReady && !isMuted) {\n      \n      if (instrumentConfig.primaryInstrument === \"ukulele\") {\n        \n        await playUkuleleString(stringIndex, selectedChord.name, transposition);\n      } else {\n        \n        await playGuitarString(stringIndex, selectedChord.name, transposition);\n      }\n    } else {\n      \n    }\n    \n    // Shorter timeout for drag operations to allow rapid playing\n    const timeout = fromDrag ? 800 : 2500;\n    setTimeout(() => {\n      setPlayingString(prev => prev === stringIndex ? null : prev);\n      setStringAnimation(prev => ({ ...prev, [stringIndex]: false }));\n    }, timeout);\n  };\n\n  // Handler for secondary instruments - with sound support\n  const handleSecondaryStringPlay = async (stringIndex: number, fromDrag: boolean = false) => {\n    // Secondary string play logic\n    if (!selectedChord) {\n      \n      return;\n    }\n    \n    setSecondaryPlayingString(stringIndex);\n    setSecondaryStringAnimation(prev => ({ ...prev, [stringIndex]: true }));\n    \n    // Play sound for secondary instruments too\n    if (isAudioReady && !isMuted) {\n      \n      // Check which secondary instrument we're dealing with\n      const secondaryInstruments = instrumentConfig.instruments.filter(i => i !== instrumentConfig.primaryInstrument);\n      const currentSecondaryInstrument = secondaryInstruments[0]; // Assume first secondary instrument for now\n      \n      if (currentSecondaryInstrument === \"ukulele\") {\n        \n        await playUkuleleString(stringIndex, selectedChord.name, transposition);\n      } else if (currentSecondaryInstrument === \"guitar\") {\n        \n        await playGuitarString(stringIndex, selectedChord.name, transposition);\n      }\n    }\n    \n    const timeout = fromDrag ? 800 : 2500;\n    setTimeout(() => {\n      setSecondaryPlayingString(prev => prev === stringIndex ? null : prev);\n      setSecondaryStringAnimation(prev => ({ ...prev, [stringIndex]: false }));\n    }, timeout);\n  };\n\n  // Separate handler for bass - only visual effects, no sound\n  const handleBassVisualPlay = (stringIndex: number, fromDrag: boolean = false) => {\n    // Bass visual play logic\n    // Allow bass to have its own visual feedback without interfering with guitar\n    // The BassGuitar component handles its own sound\n  };\n\n  const handleDragStart = () => {\n    setIsDragging(true);\n    setLastPlayedString(null);\n  };\n\n  const handleDragEnd = () => {\n    setIsDragging(false);\n    // Clear last played string after a short delay to allow for clean drag ending\n    setTimeout(() => {\n      setLastPlayedString(null);\n    }, 100);\n  };\n\n  const handleStringEnter = (stringIndex: number) => {\n    if (isDragging) {\n      handleStringPlay(stringIndex, true);\n    }\n  };\n\n  const handleChordsUpdate = (newLeftChords: Chord[], newRightChords: Chord[]) => {\n    setLeftChords(newLeftChords);\n    setRightChords(newRightChords);\n  };\n\n  const handlePresetSelect = (newLeftChords: Chord[], newRightChords: Chord[]) => {\n    // When a preset is selected, replace all chords and clear song mode\n    setLeftChords(newLeftChords);\n    setRightChords(newRightChords);\n    setIsPresetActive(true);\n    \n    // Turn off song text since there's no song\n    setShowSongText(false);\n    \n    // Clear the selected song so preset chords are used permanently\n    localStorage.removeItem(\"selectedSongData\");\n    localStorage.removeItem(\"selectedSong\");\n    setAvailableSongChords([]);\n  };\n\n  return (\n    <div className=\"h-screen bg-background p-4 overflow-hidden flex flex-col\">\n      <div className=\"max-w-md mx-auto flex-1 flex flex-col\">\n        {!isAudioReady ? (\n          <BeerGlassLoader onComplete={() => setIsAudioReady(true)} />\n        ) : (\n          <>\n            {/* Settings button */}\n            <div className=\"flex justify-end mb-2\">\n              <ChordSettings \n                leftChords={leftChords}\n                rightChords={rightChords}\n                onChordsUpdate={handleChordsUpdate}\n                onPresetSelect={handlePresetSelect}\n                showSongText={showSongText}\n                onShowSongTextChange={setShowSongText}\n                showAutoPlayer={showAutoPlayer}\n                onShowAutoPlayerChange={setShowAutoPlayer}\n                showMetronome={showMetronome}\n                onShowMetronomeChange={setShowMetronome}\n                autoPlayChords={autoPlayChords}\n                onAutoPlayChordsChange={setAutoPlayChords}\n                instrumentConfig={instrumentConfig}\n                onInstrumentConfigChange={setInstrumentConfig}\n              />\n            </div>\n            \n            {/* Header */}\n            <div className=\"text-center mb-6\">\n              <div className=\"flex items-center justify-center gap-3\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={transposeDown}\n                  onPointerDown={(e) => {\n                    e.preventDefault();\n                    transposeDown();\n                  }}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <span className=\"text-lg\">-</span>\n                </Button>\n                \n                <h1 className=\"text-3xl font-bold text-foreground\">Chord Buddy</h1>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={transposeUp}\n                  onPointerDown={(e) => {\n                    e.preventDefault();\n                    transposeUp();\n                  }}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <span className=\"text-lg\">+</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Song text with chords - full width, limited height */}\n            {showSongText && (\n              <div className=\"mb-4\">\n                <SongText selectedChord={selectedChord} transposition={transposition} />\n              </div>\n            )}\n\n            {/* Primary instrument layout - 1/5 + 3/5 + 1/5 */}\n            <div className=\"grid grid-cols-5 gap-2 mb-4\">\n              {/* Left chord selector - 1/5 */}\n              <ChordSelector\n                chords={leftSongChords}\n                selectedChord={selectedChord}\n                onChordSelect={selectChord}\n              />\n\n              {/* Primary instrument - 3/5 */}\n              <div className=\"col-span-3\">\n                {instrumentConfig.primaryInstrument === \"guitar\" && (\n                  <GuitarNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"bass\" && (\n                  <BassGuitar \n                    selectedChord={selectedChord}\n                    availableChords={[...transposedLeftChords, ...transposedRightChords]}\n                    transposition={transposition}\n                    onStringPlay={handleBassVisualPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={() => setIsDragging(true)}\n                    onDragEnd={() => setIsDragging(false)}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"guitar-dropd\" && (\n                  <GuitarDropDNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"guitar-openg\" && (\n                  <GuitarOpenGNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"guitar-opend\" && (\n                  <GuitarOpenDNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"guitar-dadgad\" && (\n                  <GuitarDADGADNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"guitar-halfstepdown\" && (\n                  <GuitarHalfStepDownNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"guitar-wholestepdown\" && (\n                  <GuitarWholeStepDownNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"ukulele\" && (\n                  <UkuleleNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"mandolin\" && (\n                  <MandolinNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"octavemandolin\" && (\n                  <OctaveMandolinNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"bouzouki\" && (\n                  <BouzoukiNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"balalaika\" && (\n                  <BalalalikaNeck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"banjo4\" && (\n                  <Banjo4Neck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n                {instrumentConfig.primaryInstrument === \"banjo5\" && (\n                  <Banjo5Neck\n                    selectedChord={selectedChord}\n                    transposition={transposition}\n                    onStringPlay={handleStringPlay}\n                    playingString={playingString}\n                    stringAnimation={stringAnimation}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onStringEnter={handleStringEnter}\n                    isDragging={isDragging}\n                    isGlobalMuted={isMuted}\n                  />\n                )}\n              </div>\n\n              {/* Right chord selector - 1/5 */}\n              <ChordSelector\n                chords={rightSongChords}\n                selectedChord={selectedChord}\n                onChordSelect={selectChord}\n              />\n            </div>\n\n            {/* Secondary instruments and metronome - 1/2 width each */}\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              {/* Secondary instruments */}\n              {instrumentConfig.instruments\n                .filter(i => i !== instrumentConfig.primaryInstrument)\n                .map((instrument) => (\n                  <div key={instrument} className=\"h-32\">\n                    {instrument === \"guitar\" && (\n                      <GuitarNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"guitar-dropd\" && (\n                      <GuitarDropDNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"guitar-openg\" && (\n                      <GuitarOpenGNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"guitar-opend\" && (\n                      <GuitarOpenDNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"guitar-dadgad\" && (\n                      <GuitarDADGADNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"guitar-halfstepdown\" && (\n                      <GuitarHalfStepDownNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"guitar-wholestepdown\" && (\n                      <GuitarWholeStepDownNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"bass\" && (\n                      <BassGuitar \n                        selectedChord={selectedChord}\n                        availableChords={[...transposedLeftChords, ...transposedRightChords]}\n                        transposition={transposition}\n                        onStringPlay={handleBassVisualPlay}\n                        playingString={null}\n                        stringAnimation={{}}\n                        onDragStart={() => setIsDragging(true)}\n                        onDragEnd={() => setIsDragging(false)}\n                        onStringEnter={handleStringEnter}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                    )}\n                    {instrument === \"ukulele\" && (\n                      <UkuleleNeck\n                        selectedChord={selectedChord}\n                        transposition={transposition}\n                        onStringPlay={handleSecondaryStringPlay}\n                        playingString={secondaryPlayingString}\n                        stringAnimation={secondaryStringAnimation}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                        onStringEnter={(stringIndex) => {\n                          if (isDragging) {\n                            handleSecondaryStringPlay(stringIndex, true);\n                          }\n                        }}\n                        isDragging={isDragging}\n                        isGlobalMuted={isMuted}\n                      />\n                     )}\n                     {instrument === \"mandolin\" && (\n                       <MandolinNeck\n                         selectedChord={selectedChord}\n                         transposition={transposition}\n                         onStringPlay={handleSecondaryStringPlay}\n                         playingString={secondaryPlayingString}\n                         stringAnimation={secondaryStringAnimation}\n                         onDragStart={handleDragStart}\n                         onDragEnd={handleDragEnd}\n                         onStringEnter={(stringIndex) => {\n                           if (isDragging) {\n                             handleSecondaryStringPlay(stringIndex, true);\n                           }\n                         }}\n                         isDragging={isDragging}\n                         isGlobalMuted={isMuted}\n                       />\n                     )}\n                     {instrument === \"octavemandolin\" && (\n                       <OctaveMandolinNeck\n                         selectedChord={selectedChord}\n                         transposition={transposition}\n                         onStringPlay={handleSecondaryStringPlay}\n                         playingString={secondaryPlayingString}\n                         stringAnimation={secondaryStringAnimation}\n                         onDragStart={handleDragStart}\n                         onDragEnd={handleDragEnd}\n                         onStringEnter={(stringIndex) => {\n                           if (isDragging) {\n                             handleSecondaryStringPlay(stringIndex, true);\n                           }\n                         }}\n                         isDragging={isDragging}\n                         isGlobalMuted={isMuted}\n                       />\n                     )}\n                     {instrument === \"bouzouki\" && (\n                       <BouzoukiNeck\n                         selectedChord={selectedChord}\n                         transposition={transposition}\n                         onStringPlay={handleSecondaryStringPlay}\n                         playingString={secondaryPlayingString}\n                         stringAnimation={secondaryStringAnimation}\n                         onDragStart={handleDragStart}\n                         onDragEnd={handleDragEnd}\n                         onStringEnter={(stringIndex) => {\n                           if (isDragging) {\n                             handleSecondaryStringPlay(stringIndex, true);\n                           }\n                         }}\n                         isDragging={isDragging}\n                         isGlobalMuted={isMuted}\n                       />\n                     )}\n                     {instrument === \"balalaika\" && (\n                       <BalalalikaNeck\n                         selectedChord={selectedChord}\n                         transposition={transposition}\n                         onStringPlay={handleSecondaryStringPlay}\n                         playingString={secondaryPlayingString}\n                         stringAnimation={secondaryStringAnimation}\n                         onDragStart={handleDragStart}\n                         onDragEnd={handleDragEnd}\n                         onStringEnter={(stringIndex) => {\n                           if (isDragging) {\n                             handleSecondaryStringPlay(stringIndex, true);\n                           }\n                         }}\n                         isDragging={isDragging}\n                         isGlobalMuted={isMuted}\n                       />\n                     )}\n                     {instrument === \"banjo4\" && (\n                       <Banjo4Neck\n                         selectedChord={selectedChord}\n                         transposition={transposition}\n                         onStringPlay={handleSecondaryStringPlay}\n                         playingString={secondaryPlayingString}\n                         stringAnimation={secondaryStringAnimation}\n                         onDragStart={handleDragStart}\n                         onDragEnd={handleDragEnd}\n                         onStringEnter={(stringIndex) => {\n                           if (isDragging) {\n                             handleSecondaryStringPlay(stringIndex, true);\n                           }\n                         }}\n                         isDragging={isDragging}\n                         isGlobalMuted={isMuted}\n                       />\n                     )}\n                     {instrument === \"banjo5\" && (\n                       <Banjo5Neck\n                         selectedChord={selectedChord}\n                         transposition={transposition}\n                         onStringPlay={handleSecondaryStringPlay}\n                         playingString={secondaryPlayingString}\n                         stringAnimation={secondaryStringAnimation}\n                         onDragStart={handleDragStart}\n                         onDragEnd={handleDragEnd}\n                         onStringEnter={(stringIndex) => {\n                           if (isDragging) {\n                             handleSecondaryStringPlay(stringIndex, true);\n                           }\n                         }}\n                         isDragging={isDragging}\n                         isGlobalMuted={isMuted}\n                       />\n                     )}\n                  </div>\n                ))}\n\n              {/* Metronome/Auto Player - takes remaining space or full width if no secondary instruments */}\n              {showMetronome && instrumentConfig.primaryInstrument !== \"bass\" && (\n                <div className={`h-32 ${instrumentConfig.instruments.filter(i => i !== instrumentConfig.primaryInstrument).length === 0 ? 'col-span-2' : ''}`}>\n                  <MetronomeAutoPlayer\n                    songLines={songLines}\n                    availableChords={[...transposedLeftChords, ...transposedRightChords]}\n                    transposition={transposition}\n                    onChordSelect={selectChord}\n                    isAutoPlayerEnabled={showAutoPlayer}\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Piano keyboard section - bottom, full width */}\n            <div className=\"h-24\">\n              <Piano selectedChord={selectedChord} transposition={transposition} isGlobalMuted={isMuted} />\n            </div>\n          </>\n        )}\n      </div>\n      <Toaster />\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/chords/ChordBuilder.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":11,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\ninterface ChordBuilderProps {\n  onChordCreated: (chord: Chord) => void;\n}\n\nconst chordTypes = [\n  { value: \"major\", label: \"chord.major\", pattern: [0, 4, 7] },\n  { value: \"minor\", label: \"chord.minor\", pattern: [0, 3, 7] },\n  { value: \"sus2\", label: \"chord.sus2\", pattern: [0, 2, 7] },\n  { value: \"sus4\", label: \"chord.sus4\", pattern: [0, 5, 7] },\n  { value: \"maj7\", label: \"chord.maj7\", pattern: [0, 4, 7, 11] },\n  { value: \"min7\", label: \"chord.min7\", pattern: [0, 3, 7, 10] },\n  { value: \"dom7\", label: \"chord.dom7\", pattern: [0, 4, 7, 10] },\n  { value: \"add9\", label: \"chord.add9\", pattern: [0, 4, 7, 14] },\n  { value: \"maj9\", label: \"chord.maj9\", pattern: [0, 4, 7, 11, 14] },\n  { value: \"6\", label: \"chord.6\", pattern: [0, 4, 7, 9] },\n];\n\nconst rootNotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\nexport const ChordBuilder = ({ onChordCreated }: ChordBuilderProps) => {\n  const [chordName, setChordName] = useState(\"\");\n  const [rootNote, setRootNote] = useState(\"\");\n  const [chordType, setChordType] = useState(\"\");\n  const [customFingers, setCustomFingers] = useState([0, 0, 0, 0, 0, 0]);\n  const [buildMode, setBuildMode] = useState<\"theory\" | \"manual\">(\"theory\");\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  const generateChordFromTheory = () => {\n    if (!rootNote || !chordType) return;\n    \n    const selectedType = chordTypes.find(t => t.value === chordType);\n    if (!selectedType) return;\n    \n    // Simplified chord generation - this would be more complex in real implementation\n    // This is a basic approximation for demonstration\n    const baseFingers = [0, 0, 0, 0, 0, 0];\n    const rootIndex = rootNotes.indexOf(rootNote);\n    \n    // Basic chord patterns on guitar (simplified)\n    const chordPatterns: { [key: string]: number[] } = {\n      \"C\": [0, 1, 0, 2, 3, 0],\n      \"D\": [0, 0, 0, 2, 3, 2], \n      \"E\": [0, 2, 2, 1, 0, 0],\n      \"F\": [1, 1, 3, 3, 3, 1],\n      \"G\": [3, 2, 0, 0, 3, 3],\n      \"A\": [0, 0, 2, 2, 2, 0],\n      \"B\": [2, 2, 4, 4, 4, 2],\n    };\n    \n    let fingers = baseFingers;\n    const basePattern = chordPatterns[rootNote];\n    if (basePattern) {\n      fingers = [...basePattern];\n      \n      // Modify based on chord type (simplified)\n      if (chordType === \"minor\") {\n        // Lower the 3rd\n        fingers = fingers.map((f, i) => f > 0 && [1, 2].includes(i) ? Math.max(0, f - 1) : f);\n      } else if (chordType === \"dom7\") {\n        // Add 7th\n        fingers[0] = Math.min(5, fingers[0] + 1);\n      }\n    }\n    \n    setCustomFingers(fingers);\n    setChordName(`${rootNote}${t(selectedType.label)}`);\n  };\n\n  const handleFingerChange = (stringIndex: number, fret: number) => {\n    const newFingers = [...customFingers];\n    newFingers[stringIndex] = fret;\n    setCustomFingers(newFingers);\n  };\n\n  const createChord = () => {\n    if (!chordName.trim()) {\n      toast({\n        title: t(\"builder.error.name\"),\n        description: t(\"builder.error.name\"),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const chord: Chord = {\n      name: chordName.trim(),\n      fingers: [...customFingers],\n      isCustom: true,\n    };\n\n    onChordCreated(chord);\n    toast({\n      title: t(\"builder.success\"),\n      description: `${chord.name} ${t(\"builder.success.desc\")}`,\n    });\n\n    // Reset form\n    setChordName(\"\");\n    setCustomFingers([0, 0, 0, 0, 0, 0]);\n    setRootNote(\"\");\n    setChordType(\"\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex gap-2\">\n        <Button\n          variant={buildMode === \"theory\" ? \"default\" : \"outline\"}\n          onClick={() => setBuildMode(\"theory\")}\n          className=\"flex-1\"\n        >\n          {t(\"builder.theory\")}\n        </Button>\n        <Button\n          variant={buildMode === \"manual\" ? \"default\" : \"outline\"}\n          onClick={() => setBuildMode(\"manual\")}\n          className=\"flex-1\"\n        >\n          {t(\"builder.manual\")}\n        </Button>\n      </div>\n\n      {buildMode === \"theory\" && (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"root-note\">{t(\"builder.root\")}</Label>\n              <Select value={rootNote} onValueChange={setRootNote}>\n                <SelectTrigger className=\"bg-input border-border\">\n                  <SelectValue placeholder={t(\"builder.root\")} />\n                </SelectTrigger>\n                <SelectContent className=\"bg-popover border-border\">\n                  {rootNotes.map((note) => (\n                    <SelectItem key={note} value={note} className=\"text-popover-foreground\">\n                      {note}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"chord-type\">{t(\"builder.type\")}</Label>\n              <Select value={chordType} onValueChange={setChordType}>\n                <SelectTrigger className=\"bg-input border-border\">\n                  <SelectValue placeholder={t(\"builder.type\")} />\n                </SelectTrigger>\n                <SelectContent className=\"bg-popover border-border\">\n                  {chordTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value} className=\"text-popover-foreground\">\n                      {t(type.label)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <Button \n            onClick={generateChordFromTheory} \n            disabled={!rootNote || !chordType}\n            className=\"w-full\"\n          >\n            {t(\"builder.generate\")}\n          </Button>\n        </div>\n      )}\n\n      <Card className=\"p-4 bg-card border-border\">\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"chord-name\">{t(\"builder.name\")}</Label>\n            <Input\n              id=\"chord-name\"\n              value={chordName}\n              onChange={(e) => setChordName(e.target.value)}\n              placeholder={t(\"builder.name.placeholder\")}\n              className=\"bg-input border-border text-foreground\"\n            />\n          </div>\n\n          <div className=\"space-y-3\">\n            <Label>{t(\"builder.fret\")}</Label>\n            <div className=\"space-y-2\">\n              {[t(\"string.e.high\"), t(\"string.b\"), t(\"string.g\"), t(\"string.d\"), t(\"string.a\"), t(\"string.e.low\")].map((stringName, index) => (\n                <div key={index} className=\"flex items-center gap-3\">\n                  <span className=\"w-16 text-sm text-muted-foreground\">{stringName}:</span>\n                  <div className=\"flex gap-1\">\n                    {[0, 1, 2, 3, 4, 5].map((fret) => (\n                      <Button\n                        key={fret}\n                        variant={customFingers[5 - index] === fret ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => handleFingerChange(5 - index, fret)}\n                        className=\"w-8 h-8 p-0\"\n                      >\n                        {fret}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 flex-wrap\">\n            {customFingers.map((fret, index) => (\n              <Badge key={index} variant={fret > 0 ? \"default\" : \"secondary\"}>\n                {[\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"][index]}: {fret}\n              </Badge>\n            ))}\n          </div>\n\n          <Button onClick={createChord} className=\"w-full\">\n            {t(\"builder.create\")}\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/chords/ChordGuide.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":9,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport const ChordGuide = () => {\n  const { t } = useLanguage();\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n          {t(\"guide.title\")}\n        </h3>\n        <p className=\"text-muted-foreground\">\n          {t(\"guide.subtitle\")}\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"basics\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4 bg-muted\">\n          <TabsTrigger value=\"basics\">{t(\"guide.basics\")}</TabsTrigger>\n          <TabsTrigger value=\"extensions\">{t(\"guide.extensions\")}</TabsTrigger>\n          <TabsTrigger value=\"alterations\">{t(\"guide.alterations\")}</TabsTrigger>\n          <TabsTrigger value=\"examples\">{t(\"guide.examples\")}</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"basics\" className=\"space-y-4\">\n          <Card className=\"p-4 bg-card border-border\">\n            <h4 className=\"font-semibold text-foreground mb-3\">{t(\"guide.basic.chord.types\")}</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">{t(\"guide.major\")}</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.major.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">{t(\"guide.minor\")}</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 ♭3 5</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.minor.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">Sus2</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 2 5</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.sus2.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">Sus4</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 4 5</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.sus4.desc\")}</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"extensions\" className=\"space-y-4\">\n          <Card className=\"p-4 bg-card border-border\">\n            <h4 className=\"font-semibold text-foreground mb-3\">{t(\"guide.extensions.title\")}</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">6 (Sexta)</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5 6</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.sixth.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">7 (Septima)</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5 ♭7</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.seventh.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">Maj7</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5 7</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.maj7.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">9 (Nona)</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5 ♭7 9</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.ninth.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">Add9</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5 9</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.add9.desc\")}</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"alterations\" className=\"space-y-4\">\n          <Card className=\"p-4 bg-card border-border\">\n            <h4 className=\"font-semibold text-foreground mb-3\">{t(\"guide.alterations.title\")}</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">♭5 ({t(\"guide.diminished.fifth\")})</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 ♭5</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.flat5.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">#5 ({t(\"guide.augmented.fifth\")})</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 #5</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.sharp5.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">♭9 ({t(\"guide.diminished.ninth\")})</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5 ♭7 ♭9</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.flat9.desc\")}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-foreground\">#11 ({t(\"guide.augmented.eleventh\")})</span>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">1 3 5 7 9 #11</Badge>\n                  <span className=\"text-sm text-muted-foreground\">{t(\"guide.sharp11.desc\")}</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"examples\" className=\"space-y-4\">\n          <Card className=\"p-4 bg-card border-border\">\n            <h4 className=\"font-semibold text-foreground mb-3\">{t(\"guide.popular.chords\")}</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <h5 className=\"font-medium text-foreground\">{t(\"guide.rock.pop\")}</h5>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">C - Am - F - G</span>\n                    <span className=\"text-xs text-muted-foreground\">vi-IV-I-V</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Em - C - G - D</span>\n                    <span className=\"text-xs text-muted-foreground\">{t(\"guide.popular.progression\")}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h5 className=\"font-medium text-foreground\">{t(\"guide.jazz\")}</h5>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Cmaj7 - Am7 - Dm7 - G7</span>\n                    <span className=\"text-xs text-muted-foreground\">ii-V-I</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Em7♭5 - A7 - Dm</span>\n                    <span className=\"text-xs text-muted-foreground\">Minor ii-V-i</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-4 bg-card border-border\">\n            <h4 className=\"font-semibold text-foreground mb-3\">{t(\"guide.chord.building.tips\")}</h4>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>• {t(\"guide.tip1\")}</p>\n              <p>• {t(\"guide.tip2\")}</p>\n              <p>• {t(\"guide.tip3\")}</p>\n              <p>• {t(\"guide.tip4\")}</p>\n              <p>• {t(\"guide.tip5\")}</p>\n            </div>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/chords/ChordLibrary.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":11,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Trash2, ArrowLeft, ArrowRight, Search } from \"lucide-react\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\ninterface ChordLibraryProps {\n  leftChords: Chord[];\n  rightChords: Chord[];\n  onChordsUpdate: (leftChords: Chord[], rightChords: Chord[]) => void;\n}\n\nconst defaultChords: Chord[] = [\n  { name: \"C\", fingers: [0, 1, 0, 2, 3, 0] },\n  { name: \"D\", fingers: [0, 0, 0, 2, 3, 2] },\n  { name: \"E\", fingers: [0, 2, 2, 1, 0, 0] },\n  { name: \"F\", fingers: [1, 1, 3, 3, 3, 1] },\n  { name: \"G\", fingers: [3, 2, 0, 0, 3, 3] },\n  { name: \"A\", fingers: [0, 0, 2, 2, 2, 0] },\n  { name: \"B\", fingers: [2, 2, 4, 4, 4, 2] },\n  { name: \"Am\", fingers: [0, 0, 2, 2, 1, 0] },\n  { name: \"Dm\", fingers: [0, 0, 0, 2, 3, 1] },\n  { name: \"Em\", fingers: [0, 2, 2, 0, 0, 0] },\n  { name: \"Fm\", fingers: [1, 1, 3, 3, 1, 1] },\n  { name: \"Gm\", fingers: [3, 1, 1, 3, 3, 3] },\n  { name: \"C7\", fingers: [0, 1, 0, 2, 1, 0] },\n  { name: \"G7\", fingers: [3, 2, 0, 0, 0, 1] },\n  { name: \"A7\", fingers: [0, 0, 2, 0, 2, 0] },\n  { name: \"E7\", fingers: [0, 2, 0, 1, 0, 0] },\n];\n\nexport const ChordLibrary = ({ leftChords, rightChords, onChordsUpdate }: ChordLibraryProps) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  const allCustomChords = [...leftChords, ...rightChords].filter(chord => chord.isCustom);\n  const availableChords = defaultChords.concat(allCustomChords);\n  \n  const filteredChords = availableChords.filter(chord =>\n    chord.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const addToLeft = (chord: Chord) => {\n    if (leftChords.find(c => c.name === chord.name)) {\n      toast({\n        title: t(\"library.exists\"),\n        description: `${chord.name} ${t(\"library.exists.left\")}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    onChordsUpdate([...leftChords, chord], rightChords);\n    toast({\n      title: t(\"library.added\"),\n      description: `${chord.name} ${t(\"library.added.left\")}`,\n    });\n  };\n\n  const addToRight = (chord: Chord) => {\n    if (rightChords.find(c => c.name === chord.name)) {\n      toast({\n        title: t(\"library.exists\"),\n        description: `${chord.name} ${t(\"library.exists.right\")}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    onChordsUpdate(leftChords, [...rightChords, chord]);\n    toast({\n      title: t(\"library.added\"),\n      description: `${chord.name} ${t(\"library.added.right\")}`,\n    });\n  };\n\n  const removeFromLeft = (chordName: string) => {\n    onChordsUpdate(\n      leftChords.filter(chord => chord.name !== chordName),\n      rightChords\n    );\n  };\n\n  const removeFromRight = (chordName: string) => {\n    onChordsUpdate(\n      leftChords,\n      rightChords.filter(chord => chord.name !== chordName)\n    );\n  };\n\n  const moveLeftToRight = (chord: Chord) => {\n    removeFromLeft(chord.name);\n    addToRight(chord);\n  };\n\n  const moveRightToLeft = (chord: Chord) => {\n    removeFromRight(chord.name);\n    addToLeft(chord);\n  };\n\n  const renderChordCard = (chord: Chord) => (\n    <Card key={chord.name} className=\"p-3 bg-card border-border\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"font-medium text-foreground\">{chord.name}</span>\n        {chord.isCustom && <Badge variant=\"secondary\">{t(\"library.custom\")}</Badge>}\n      </div>\n      <div className=\"flex gap-1 mb-3\">\n        {chord.fingers.map((fret, index) => (\n          <div\n            key={index}\n            className={`w-4 h-4 rounded-full text-xs flex items-center justify-center ${\n              fret > 0 ? \"bg-accent text-accent-foreground\" : \"bg-muted text-muted-foreground\"\n            }`}\n          >\n            {fret}\n          </div>\n        ))}\n      </div>\n      <div className=\"flex gap-1\">\n        <Button size=\"sm\" variant=\"outline\" onClick={() => addToLeft(chord)}>\n          <ArrowLeft className=\"w-3 h-3\" />\n        </Button>\n        <Button size=\"sm\" variant=\"outline\" onClick={() => addToRight(chord)}>\n          <ArrowRight className=\"w-3 h-3\" />\n        </Button>\n      </div>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"search\">{t(\"library.search\")}</Label>\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            id=\"search\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            placeholder={t(\"library.search.placeholder\")}\n            className=\"pl-10 bg-input border-border text-foreground\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold text-foreground\">{t(\"library.left\")}</h4>\n          <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n            {leftChords.map((chord) => (\n              <div key={chord.name} className=\"flex items-center justify-between p-2 bg-card border border-border rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-foreground\">{chord.name}</span>\n                  {chord.isCustom && <Badge variant=\"secondary\" className=\"text-xs\">{t(\"library.custom\")}</Badge>}\n                </div>\n                <div className=\"flex gap-1\">\n                  <Button size=\"sm\" variant=\"ghost\" onClick={() => moveLeftToRight(chord)}>\n                    <ArrowRight className=\"w-3 h-3\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"ghost\" onClick={() => removeFromLeft(chord.name)}>\n                    <Trash2 className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold text-foreground\">{t(\"library.right\")}</h4>\n          <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n            {rightChords.map((chord) => (\n              <div key={chord.name} className=\"flex items-center justify-between p-2 bg-card border border-border rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-foreground\">{chord.name}</span>\n                  {chord.isCustom && <Badge variant=\"secondary\" className=\"text-xs\">{t(\"library.custom\")}</Badge>}\n                </div>\n                <div className=\"flex gap-1\">\n                  <Button size=\"sm\" variant=\"ghost\" onClick={() => moveRightToLeft(chord)}>\n                    <ArrowLeft className=\"w-3 h-3\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"ghost\" onClick={() => removeFromRight(chord.name)}>\n                    <Trash2 className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-3\">\n        <h4 className=\"font-semibold text-foreground\">{t(\"library.available\")}</h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 max-h-80 overflow-y-auto\">\n          {filteredChords.map(renderChordCard)}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/chords/ChordPresets.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":7,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\ninterface ChordPreset {\n  name: string;\n  description: string;\n  leftChords: Chord[];\n  rightChords: Chord[];\n  genre: string;\n}\n\ninterface ChordPresetsProps {\n  onPresetSelect: (leftChords: Chord[], rightChords: Chord[]) => void;\n}\n\nconst getChordPresets = (t: (key: string) => string): ChordPreset[] => [\n  {\n    name: t(\"presets.pop.name\"),\n    description: t(\"presets.pop.description\"),\n    genre: \"pop\",\n    leftChords: [\n      { name: \"C\", fingers: [0, 1, 0, 2, 3, 0] },\n      { name: \"F\", fingers: [1, 1, 3, 3, 3, 1] },\n      { name: \"Am\", fingers: [0, 0, 2, 2, 1, 0] },\n      { name: \"Dm\", fingers: [0, 0, 0, 2, 3, 1] },\n      { name: \"E\", fingers: [0, 2, 2, 1, 0, 0] },\n      { name: \"B7\", fingers: [0, 2, 1, 2, 0, 2] },\n    ],\n    rightChords: [\n      { name: \"G\", fingers: [3, 2, 0, 0, 3, 3] },\n      { name: \"Em\", fingers: [0, 2, 2, 0, 0, 0] },\n      { name: \"D\", fingers: [0, 0, 0, 2, 3, 2] },\n      { name: \"A\", fingers: [0, 0, 2, 2, 2, 0] },\n      { name: \"Cadd9\", fingers: [0, 3, 2, 0, 3, 0] },\n      { name: \"Dsus4\", fingers: [0, 0, 0, 2, 3, 3] },\n    ]\n  },\n  {\n    name: t(\"presets.blues.name\"),\n    description: t(\"presets.blues.description\"),\n    genre: \"blues\",\n    leftChords: [\n      { name: \"E7\", fingers: [0, 2, 0, 1, 0, 0] },\n      { name: \"A7\", fingers: [0, 0, 2, 0, 2, 0] },\n      { name: \"B7\", fingers: [0, 2, 1, 2, 0, 2] },\n      { name: \"C7\", fingers: [0, 1, 3, 2, 4, 1] },\n      { name: \"G7\", fingers: [3, 2, 0, 0, 0, 1] },\n      { name: \"D7\", fingers: [0, 0, 0, 2, 1, 2] },\n    ],\n    rightChords: [\n      { name: \"Em\", fingers: [0, 2, 2, 0, 0, 0] },\n      { name: \"Am\", fingers: [0, 0, 2, 2, 1, 0] },\n      { name: \"Bm\", fingers: [2, 2, 4, 4, 3, 2] },\n      { name: \"F#7\", fingers: [2, 4, 2, 3, 2, 2] },\n      { name: \"E\", fingers: [0, 2, 2, 1, 0, 0] },\n      { name: \"A\", fingers: [0, 0, 2, 2, 2, 0] },\n    ]\n  },\n  {\n    name: t(\"presets.jazz.name\"),\n    description: t(\"presets.jazz.description\"),\n    genre: \"jazz\",\n    leftChords: [\n      { name: \"Cmaj7\", fingers: [0, 3, 2, 0, 0, 0] },\n      { name: \"Dm7\", fingers: [0, 0, 0, 2, 1, 1] },\n      { name: \"G7\", fingers: [3, 2, 0, 0, 0, 1] },\n      { name: \"Am7\", fingers: [0, 0, 2, 0, 1, 0] },\n      { name: \"Fmaj7\", fingers: [1, 3, 3, 2, 1, 0] },\n      { name: \"Em7\", fingers: [0, 2, 0, 0, 0, 0] },\n    ],\n    rightChords: [\n      { name: \"Bm7b5\", fingers: [2, 2, 3, 2, 3, 2] },\n      { name: \"E7\", fingers: [0, 2, 0, 1, 0, 0] },\n      { name: \"Am\", fingers: [0, 0, 2, 2, 1, 0] },\n      { name: \"D7\", fingers: [0, 0, 0, 2, 1, 2] },\n      { name: \"Gm7\", fingers: [3, 5, 3, 3, 3, 3] },\n      { name: \"C7\", fingers: [0, 1, 3, 2, 4, 1] },\n    ]\n  },\n  {\n    name: t(\"presets.country.name\"),\n    description: t(\"presets.country.description\"),\n    genre: \"country\",\n    leftChords: [\n      { name: \"G\", fingers: [3, 2, 0, 0, 3, 3] },\n      { name: \"C\", fingers: [0, 1, 0, 2, 3, 0] },\n      { name: \"D\", fingers: [0, 0, 0, 2, 3, 2] },\n      { name: \"Em\", fingers: [0, 2, 2, 0, 0, 0] },\n      { name: \"Am\", fingers: [0, 0, 2, 2, 1, 0] },\n      { name: \"F\", fingers: [1, 1, 3, 3, 3, 1] },\n    ],\n    rightChords: [\n      { name: \"D7\", fingers: [0, 0, 0, 2, 1, 2] },\n      { name: \"G7\", fingers: [3, 2, 0, 0, 0, 1] },\n      { name: \"C7\", fingers: [0, 1, 3, 2, 4, 1] },\n      { name: \"A7\", fingers: [0, 0, 2, 0, 2, 0] },\n      { name: \"E7\", fingers: [0, 2, 0, 1, 0, 0] },\n      { name: \"B7\", fingers: [0, 2, 1, 2, 0, 2] },\n    ]\n  },\n  {\n    name: t(\"presets.indie.name\"),\n    description: t(\"presets.indie.description\"),\n    genre: \"indie\",\n    leftChords: [\n      { name: \"Cadd9\", fingers: [0, 3, 2, 0, 3, 0] },\n      { name: \"Gsus4\", fingers: [3, 3, 0, 0, 3, 3] },\n      { name: \"Am7\", fingers: [0, 0, 2, 0, 1, 0] },\n      { name: \"Fmaj7\", fingers: [1, 3, 3, 2, 1, 0] },\n      { name: \"Em7\", fingers: [0, 2, 0, 0, 0, 0] },\n      { name: \"Dm7\", fingers: [0, 0, 0, 2, 1, 1] },\n    ],\n    rightChords: [\n      { name: \"G/B\", fingers: [2, 2, 0, 0, 3, 3] },\n      { name: \"Am/C\", fingers: [0, 1, 2, 2, 1, 0] },\n      { name: \"F/C\", fingers: [0, 1, 3, 2, 1, 1] },\n      { name: \"Csus2\", fingers: [0, 3, 0, 0, 3, 0] },\n      { name: \"Dsus2\", fingers: [0, 0, 0, 2, 3, 0] },\n      { name: \"Asus2\", fingers: [0, 0, 2, 2, 0, 0] },\n    ]\n  },\n  {\n    name: t(\"presets.rock.name\"),\n    description: t(\"presets.rock.description\"),\n    genre: \"rock\",\n    leftChords: [\n      { name: \"E5\", fingers: [0, 2, 2, 0, 0, 0] },\n      { name: \"A5\", fingers: [0, 0, 2, 2, 0, 0] },\n      { name: \"D5\", fingers: [0, 0, 0, 2, 3, 0] },\n      { name: \"G5\", fingers: [3, 5, 5, 0, 0, 0] },\n      { name: \"C5\", fingers: [0, 1, 3, 0, 0, 0] },\n      { name: \"F5\", fingers: [1, 3, 3, 0, 0, 0] },\n    ],\n    rightChords: [\n      { name: \"B5\", fingers: [2, 2, 4, 0, 0, 0] },\n      { name: \"F#5\", fingers: [2, 4, 4, 0, 0, 0] },\n      { name: \"C#5\", fingers: [4, 4, 6, 0, 0, 0] },\n      { name: \"Em\", fingers: [0, 2, 2, 0, 0, 0] },\n      { name: \"Am\", fingers: [0, 0, 2, 2, 1, 0] },\n      { name: \"Dm\", fingers: [0, 0, 0, 2, 3, 1] },\n    ]\n  }\n];\n\nexport const ChordPresets = ({ onPresetSelect }: ChordPresetsProps) => {\n  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);\n  const { t } = useLanguage();\n  \n  const chordPresets = getChordPresets(t);\n\n  const handlePresetSelect = (preset: ChordPreset) => {\n    setSelectedPreset(preset.name);\n    onPresetSelect(preset.leftChords, preset.rightChords);\n  };\n\n  const getGenreColor = (genre: string) => {\n    const colors = {\n      pop: \"bg-pink-500/20 text-pink-700 border-pink-300\",\n      blues: \"bg-blue-500/20 text-blue-700 border-blue-300\",\n      jazz: \"bg-purple-500/20 text-purple-700 border-purple-300\",\n      country: \"bg-amber-500/20 text-amber-700 border-amber-300\",\n      indie: \"bg-green-500/20 text-green-700 border-green-300\",\n      rock: \"bg-red-500/20 text-red-700 border-red-300\"\n    };\n    return colors[genre as keyof typeof colors] || \"bg-gray-500/20 text-gray-700 border-gray-300\";\n  };\n\n  return (\n    <Card className=\"p-4 mb-4\">\n      <h3 className=\"text-lg font-bold mb-3\">{t(\"presets.title\")}</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        {chordPresets.map((preset) => (\n          <div\n            key={preset.name}\n            className={`p-3 border rounded-lg cursor-pointer transition-all duration-200 hover:shadow-md ${\n              selectedPreset === preset.name\n                ? \"border-accent bg-accent/10 shadow-md\"\n                : \"border-border hover:border-accent/50\"\n            }`}\n            onClick={() => handlePresetSelect(preset)}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"font-semibold text-sm\">{preset.name}</h4>\n              <Badge variant=\"outline\" className={`text-xs ${getGenreColor(preset.genre)}`}>\n                {preset.genre.toUpperCase()}\n              </Badge>\n            </div>\n            <p className=\"text-xs text-muted-foreground mb-2\">{preset.description}</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {[...preset.leftChords.slice(0, 3), ...preset.rightChords.slice(0, 3)].map((chord, index) => (\n                <span\n                  key={index}\n                  className=\"text-xs bg-muted px-1.5 py-0.5 rounded\"\n                >\n                  {chord.name}\n                </span>\n              ))}\n              {preset.leftChords.length + preset.rightChords.length > 6 && (\n                <span className=\"text-xs text-muted-foreground\">\n                  +{preset.leftChords.length + preset.rightChords.length - 6} {t(\"presets.more\")}\n                </span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/chords/ChordSelector.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":10,"column":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Chord, ChordSelectorProps } from \"@/types/chord\";\n\nexport const ChordSelector = ({\n  chords,\n  selectedChord,\n  onChordSelect,\n  title\n}: ChordSelectorProps) => {\n  return (\n    <Card className=\"bg-gradient-wood border-2 border-wood-dark p-3\" role=\"region\" aria-label={title || \"Chord selector\"}>\n      {title && (\n        <h3 className=\"text-sm font-medium text-muted-foreground mb-2 text-center\" id={`chord-title-${title.replace(/\\s+/g, '-').toLowerCase()}`}>\n          {title}\n        </h3>\n      )}\n      <div className=\"flex flex-col space-y-1\" role=\"list\" aria-labelledby={title ? `chord-title-${title.replace(/\\s+/g, '-').toLowerCase()}` : undefined}>\n        {chords.map((chord, index) => (\n          <Button\n            key={`${chord.name}-${index}`}\n            variant=\"outline\"\n            size=\"sm\"\n            role=\"listitem\"\n            tabIndex={0}\n            onClick={() => onChordSelect(chord)}\n            onPointerDown={(e) => {\n              e.preventDefault();\n              onChordSelect(chord);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                onChordSelect(chord);\n              }\n            }}\n            aria-label={`${chord.name} chord${selectedChord?.name === chord.name ? ', currently selected' : ''}`}\n            aria-pressed={selectedChord?.name === chord.name}\n            className={`\n              relative h-8 bg-gradient-wood border-2 border-wood-dark\n              text-foreground font-semibold text-xs\n              hover:shadow-lg hover:scale-105 transition-all duration-200\n              active:animate-press px-1\n              ${selectedChord?.name === chord.name ? \n                \"border-accent shadow-accent/50 bg-accent/10\" : \n                \"hover:border-accent/50\"\n              }\n            `}\n          >\n            {chord.name}\n            <div className=\"absolute bottom-0.5 left-1/2 transform -translate-x-1/2\">\n              <div className=\"flex space-x-0.5\">\n                {chord.fingers.map((fret, index) => (\n                  <div\n                    key={index}\n                    className={`w-0.5 h-0.5 rounded-full ${\n                      fret === -1 ? \"bg-destructive\" : \n                      fret > 0 ? \"bg-accent\" : \"bg-muted\"\n                    }`}\n                    title={fret === -1 ? \"Muted string\" : `Fret ${fret}`}\n                  />\n                ))}\n              </div>\n            </div>\n          </Button>\n        ))}\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/chords/ChordSettings.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":20,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Settings, Music } from \"lucide-react\";\nimport { ChordBuilder } from \"./ChordBuilder\";\nimport { ChordGuide } from \"./ChordGuide\";\nimport { ChordLibrary } from \"./ChordLibrary\";\nimport { ChordPresets } from \"./ChordPresets\";\nimport { LanguageSelector } from \"../ui/LanguageSelector\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { SongSelector } from \"../ui/SongSelector\";\nimport { GuitarTuningSelector } from \"../ui/GuitarTuningSelector\";\n\ninterface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\nexport interface InstrumentConfig {\n  instruments: string[];\n  primaryInstrument: string;\n}\n\ninterface ChordSettingsProps {\n  leftChords: Chord[];\n  rightChords: Chord[];\n  onChordsUpdate: (leftChords: Chord[], rightChords: Chord[]) => void;\n  onPresetSelect?: (leftChords: Chord[], rightChords: Chord[]) => void;\n  showSongText: boolean;\n  onShowSongTextChange: (show: boolean) => void;\n  showAutoPlayer?: boolean;\n  onShowAutoPlayerChange?: (show: boolean) => void;\n  showMetronome?: boolean;\n  onShowMetronomeChange?: (show: boolean) => void;\n  autoPlayChords?: boolean;\n  onAutoPlayChordsChange?: (auto: boolean) => void;\n  instrumentConfig?: InstrumentConfig;\n  onInstrumentConfigChange?: (config: InstrumentConfig) => void;\n}\n\nexport const ChordSettings = ({ \n  leftChords, \n  rightChords, \n  onChordsUpdate,\n  onPresetSelect,\n  showSongText, \n  onShowSongTextChange,\n  showAutoPlayer = true,\n  onShowAutoPlayerChange,\n  showMetronome = true,\n  onShowMetronomeChange,\n  autoPlayChords = true,\n  onAutoPlayChordsChange,\n  instrumentConfig = { instruments: [\"guitar\"], primaryInstrument: \"guitar\" },\n  onInstrumentConfigChange\n}: ChordSettingsProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { t, language } = useLanguage();\n  const navigate = useNavigate();\n\n  const languageFlags: Record<string, string> = {\n    sv: \"🇸🇪\",\n    en: \"🇬🇧\", \n    de: \"🇩🇪\",\n    fr: \"🇫🇷\",\n    es: \"🇪🇸\",\n    it: \"🇮🇹\",\n    pt: \"🇵🇹\",\n    nl: \"🇳🇱\",\n    da: \"🇩🇰\",\n    no: \"🇳🇴\",\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"absolute top-4 right-4 z-10 bg-card/80 backdrop-blur-sm border-border hover:bg-accent/20\"\n        >\n          <Settings className=\"w-4 h-4\" />\n        </Button>\n      </DialogTrigger>\n        <DialogContent className=\"max-w-5xl h-[85vh] flex flex-col bg-card border-border\">\n          <DialogHeader className=\"flex-shrink-0\">\n            <DialogTitle className=\"text-foreground\">{t(\"settings.title\")}</DialogTitle>\n          </DialogHeader>\n          \n          <Tabs defaultValue=\"songs\" className=\"flex-1 flex flex-col min-h-0\">\n            <TabsList className=\"flex flex-wrap gap-1 bg-muted h-auto p-2 flex-shrink-0\">\n            <TabsTrigger\n              value=\"songs\" \n              className=\"text-muted-foreground data-[state=active]:text-foreground text-xs px-2 py-2\"\n            >\n              <Music className=\"w-3 h-3\" />\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"display\" \n              className=\"text-muted-foreground data-[state=active]:text-foreground text-xs px-2 py-2\"\n            >\n              {t(\"settings.display\")}\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"presets\" \n              className=\"text-muted-foreground data-[state=active]:text-foreground text-xs px-2 py-2\"\n            >\n              {t(\"settings.presets\")}\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"library\" \n              className=\"text-muted-foreground data-[state=active]:text-foreground text-xs px-2 py-2\"\n            >\n              {t(\"chords.library\")}\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"builder\" \n              className=\"text-muted-foreground data-[state=active]:text-foreground text-xs px-2 py-2\"\n            >\n              {t(\"settings.builder\")}\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"guide\" \n              className=\"text-muted-foreground data-[state=active]:text-foreground text-xs px-2 py-2\"\n            >\n              {t(\"chords.guide\")}\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"settings\" \n              className=\"text-muted-foreground data-[state=active]:text-foreground text-xs px-2 py-2\"\n            >\n              {languageFlags[language]}\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"songs\" className=\"flex-1 overflow-y-auto space-y-4 min-h-0\">\n            <SongSelector onSongSelect={() => setIsOpen(false)} />\n          </TabsContent>\n          \n          <TabsContent value=\"display\" className=\"flex-1 overflow-y-auto space-y-4 min-h-0\">\n            {onInstrumentConfigChange && (\n              <div className=\"space-y-4 p-4 border border-border rounded bg-card/50\">\n                <Label className=\"text-sm font-medium text-foreground\">\n                  {t(\"settings.instruments\")}\n                </Label>\n                \n                <div className=\"space-y-3\">\n                  {[\"guitar\", \"guitar-dropd\", \"guitar-openg\", \"guitar-opend\", \"guitar-dadgad\", \"guitar-halfstepdown\", \"guitar-wholestepdown\", \"bass\", \"ukulele\", \"mandolin\", \"octavemandolin\", \"bouzouki\", \"balalaika\", \"banjo4\", \"banjo5\"].map((instrument) => (\n                    <div key={instrument} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`instrument-${instrument}`}\n                          checked={instrumentConfig.instruments.includes(instrument)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              const newInstruments = [...instrumentConfig.instruments, instrument];\n                              onInstrumentConfigChange({\n                                instruments: newInstruments,\n                                primaryInstrument: newInstruments.length === 1 ? instrument : instrumentConfig.primaryInstrument\n                              });\n                            } else {\n                              const newInstruments = instrumentConfig.instruments.filter(i => i !== instrument);\n                              if (newInstruments.length > 0) {\n                                onInstrumentConfigChange({\n                                  instruments: newInstruments,\n                                  primaryInstrument: instrumentConfig.primaryInstrument === instrument ? newInstruments[0] : instrumentConfig.primaryInstrument\n                                });\n                              }\n                            }\n                          }}\n                        />\n                        <Label htmlFor={`instrument-${instrument}`} className=\"text-sm\">\n                          {t(`settings.instrument.${instrument}`)}\n                        </Label>\n                      </div>\n                      \n                      {instrumentConfig.instruments.includes(instrument) && (\n                        <Button\n                          variant={instrumentConfig.primaryInstrument === instrument ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => {\n                            onInstrumentConfigChange({\n                              ...instrumentConfig,\n                              primaryInstrument: instrument\n                            });\n                          }}\n                          className=\"text-xs px-2 py-1\"\n                        >\n                          {instrumentConfig.primaryInstrument === instrument ? t(\"settings.primary\") : t(\"settings.setPrimary\")}\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {onShowMetronomeChange && (\n              <div className=\"flex items-center justify-between p-2 border border-border rounded bg-card/50\">\n                <Label htmlFor=\"show-metronome\" className=\"text-sm font-medium text-foreground\">\n                  {t(\"settings.showMetronome\")}\n                </Label>\n                <Switch\n                  id=\"show-metronome\"\n                  checked={showMetronome}\n                  onCheckedChange={onShowMetronomeChange}\n                />\n              </div>\n            )}\n            \n            <div className=\"flex items-center justify-between p-2 border border-border rounded bg-card/50\">\n              <Label htmlFor=\"show-songtext\" className=\"text-sm font-medium text-foreground\">\n                {t(\"settings.showSongText\")}\n              </Label>\n              <Switch\n                id=\"show-songtext\"\n                checked={showSongText}\n                onCheckedChange={onShowSongTextChange}\n              />\n            </div>\n            \n            \n            {onShowAutoPlayerChange && (\n              <div className=\"flex items-center justify-between p-2 border border-border rounded bg-card/50\">\n                <Label htmlFor=\"show-autoplayer\" className=\"text-sm font-medium text-foreground\">\n                  {t(\"settings.showAutoPlayer\")}\n                </Label>\n                <Switch\n                  id=\"show-autoplayer\"\n                  checked={showAutoPlayer}\n                  onCheckedChange={onShowAutoPlayerChange}\n                />\n              </div>\n            )}\n\n            {onAutoPlayChordsChange && (\n              <div className=\"flex items-center justify-between p-2 border border-border rounded bg-card/50\">\n                <Label htmlFor=\"auto-play-chords\" className=\"text-sm font-medium text-foreground\">\n                  {t(\"settings.autoPlayChords\")}\n                </Label>\n                <Switch\n                  id=\"auto-play-chords\"\n                  checked={autoPlayChords}\n                  onCheckedChange={onAutoPlayChordsChange}\n                />\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"presets\" className=\"flex-1 overflow-y-auto min-h-0\">\n            <ChordPresets onPresetSelect={onPresetSelect || onChordsUpdate} />\n          </TabsContent>\n          \n          <TabsContent value=\"library\" className=\"flex-1 overflow-y-auto min-h-0\">\n            <ChordLibrary \n              leftChords={leftChords}\n              rightChords={rightChords}\n              onChordsUpdate={onChordsUpdate}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"builder\" className=\"flex-1 overflow-y-auto space-y-4 min-h-0\">\n            <ChordBuilder \n              onChordCreated={(chord) => {\n                // Add to left side by default, user can move it in library\n                onChordsUpdate([...leftChords, chord], rightChords);\n              }}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"guide\" className=\"flex-1 overflow-y-auto min-h-0\">\n            <ChordGuide />\n          </TabsContent>\n          \n          <TabsContent value=\"settings\" className=\"flex-1 overflow-y-auto space-y-4 min-h-0\">\n            <LanguageSelector onLanguageChange={() => setIsOpen(false)} />\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/chords/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/BalalalikaNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const BalalalikaNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"balalaika\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/Banjo4Neck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const Banjo4Neck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"banjo4\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/Banjo5Neck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const Banjo5Neck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"banjo5\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/BassGuitar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":19,"column":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { useStringInstrument } from \"@/hooks/useStringInstrument\";\nimport { useSyntheticBassSounds } from \"@/hooks/useSyntheticBassSounds\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const BassGuitar = ({\n  selectedChord,\n  availableChords = [],\n  transposition = 0,\n  onStringPlay,\n  playingString,\n  stringAnimation,\n  onDragStart,\n  onDragEnd,\n  onStringEnter,\n  isDragging,\n  isGlobalMuted = false\n}: StringInstrumentProps) => {\n  const { instrumentSystem, getChordFingering, playString } = useStringInstrument(\"bass\");\n  const { playBassNote, initializeBassSounds } = useSyntheticBassSounds();\n  const [isAudioReady, setIsAudioReady] = useState(false);\n\n  useEffect(() => {\n    const initAudio = async () => {\n      await initializeBassSounds();\n      setIsAudioReady(true);\n    };\n    initAudio();\n  }, [initializeBassSounds]);\n\n  const handleBassStringPlay = async (stringIndex: number, fromDrag: boolean = false) => {\n    // Bass string play logic\n    \n    // Play bass-specific sound directly\n    if (isAudioReady && !isGlobalMuted) {\n      \n      \n      // Get the note to play based on chord fingering or open string\n      let noteToPlay: string;\n      if (selectedChord) {\n        const fingering = getChordFingering(selectedChord.name, transposition);\n        const fingerPosition = fingering.find(f => f.stringIndex === stringIndex);\n        \n        if (fingerPosition && fingerPosition.fret > 0) {\n          // Calculate the actual note with octave based on string and fret\n          noteToPlay = instrumentSystem.calculateNoteFromFret(stringIndex, fingerPosition.fret);\n          \n        } else if (fingerPosition && fingerPosition.fret === 0) {\n          noteToPlay = instrumentSystem.getStringNote(stringIndex);\n          \n        } else {\n          // Muted string or invalid - don't play anything\n          \n          return;\n        }\n      } else {\n        // No chord selected, play open string\n        noteToPlay = instrumentSystem.getStringNote(stringIndex);\n        \n      }\n      \n      await playBassNote(noteToPlay);\n    }\n  };\n\n  // Calculate maximum fret needed for all available chords\n  const getMaxFretForChords = () => {\n    let maxFret = 3; // Minimum frets to show\n    \n    availableChords.forEach(chord => {\n      const fingering = getChordFingering(chord.name, transposition);\n      fingering.forEach(position => {\n        if (position.fret > 0 && position.fret > maxFret) {\n          maxFret = position.fret;\n        }\n      });\n    });\n    \n    return Math.min(maxFret + 1, instrumentSystem.getFretCount()); // Add one extra fret, but don't exceed instrument limit\n  };\n\n  const maxFretsToShow = getMaxFretForChords();\n\n  const renderStrings = () => {\n    const stringCount = instrumentSystem.getStringCount();\n    const chordFingering = selectedChord ? getChordFingering(selectedChord.name, transposition) : [];\n    \n    // New TAB-based positioning system (same as FretBoard)\n    const getFretPosition = (fretNumber: number) => {\n      if (fretNumber <= 0) return null;\n      // Direct mapping: fret 1 = first position, fret 2 = second position, etc.\n      // Each fret is 25px apart, starting at 35px from top to align with fret lines\n      return 35 + (fretNumber - 1) * 25;\n    };\n    \n    return (\n      <div className=\"relative flex flex-row\">\n        <div className=\"relative flex flex-row space-x-1 px-1 h-32 flex-1\">\n          {/* Nut indicator - horisontell linje längst upp */}\n          <div className=\"absolute top-1 left-2 right-2 h-1.5 bg-amber-900 shadow-lg z-0\" />\n          \n          {/* Fret markers - horizontal lines */}\n          <div className=\"absolute inset-0 flex flex-col justify-start py-2 pointer-events-none\">\n            {[...Array(maxFretsToShow)].map((_, index) => (\n              <div\n                key={index}\n                className=\"h-0.5 w-full bg-metal opacity-40\"\n                style={{ marginTop: index === 0 ? '18px' : '19px' }}\n              />\n            ))}\n          </div>\n          \n          {[...Array(stringCount)].map((_, index) => {\n            const fingeringPosition = chordFingering.find(f => f.stringIndex === index);\n            const fret = fingeringPosition?.fret || 0;\n            const isPressed = fret > 0;\n            const isStringMuted = fret === -1; // Renamed for clarity\n            const stringNote = instrumentSystem.getStringNote(index);\n            const stringThickness = instrumentSystem.getStringThickness(index);\n            const stringColor = instrumentSystem.getStringColor(index);\n            \n            // Convert thickness to Tailwind width class with more dramatic differences for bass\n            const getWidthClass = (thickness: number) => {\n              if (thickness >= 6) return 'w-6';    // Thickest bass string\n              if (thickness >= 5) return 'w-5';    // Very thick\n              if (thickness >= 4) return 'w-4';    // Medium thick\n              return 'w-3';                        // Thinnest bass string\n            };\n            \n            return (\n              <div\n                key={index}\n                className={`\n                  relative px-2 py-2 cursor-pointer flex flex-col items-center flex-1\n                  transition-all duration-300 hover:scale-x-110 hover:shadow-md\n                  ${stringAnimation[index] ? \"animate-string-vibrate\" : \"\"}\n                  ${playingString === index ? \"shadow-lg\" : \"\"}\n                  ${selectedChord ? \"hover:bg-accent/20 rounded-md\" : \"\"}\n                  ${isGlobalMuted ? \"opacity-50 cursor-not-allowed\" : \"\"}\n                `}\n                onPointerDown={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  if (!isGlobalMuted) {\n                    onDragStart();\n                    handleBassStringPlay(index);\n                    onStringPlay(index); // Call parent for visual feedback\n                  }\n                }}\n                onPointerUp={(e) => {\n                  e.stopPropagation();\n                  onDragEnd();\n                }}\n                onPointerLeave={(e) => {\n                  e.stopPropagation();\n                  // Don't end drag on leave, only on pointer up\n                }}\n                onPointerEnter={(e) => {\n                  e.stopPropagation();\n                  if (!isGlobalMuted) onStringEnter(index);\n                }}\n                onPointerMove={(e) => {\n                  e.stopPropagation();\n                  // Handle drag over strings\n                  if (isDragging && !isGlobalMuted) {\n                    onStringEnter(index);\n                    handleBassStringPlay(index, true);\n                  }\n                }}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  // Only handle click if it's not part of a drag operation\n                  // onClick is redundant since we handle onPointerDown\n                }}\n              >\n                {/* Note name */}\n                <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 text-xs font-semibold text-muted-foreground\">\n                  {stringNote}\n                </div>\n                \n                {/* Muted string indicator */}\n                {isStringMuted && (\n                  <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 text-lg font-bold text-destructive\">\n                    ×\n                  </div>\n                )}\n                \n                {/* The actual string */}\n                <div \n                  className={`\n                    ${getWidthClass(stringThickness)} ${stringColor} rounded-full my-auto h-full\n                    ${stringAnimation[index] ? \"animate-string-vibrate\" : \"\"}\n                    ${isStringMuted ? \"bg-muted opacity-30\" : \"\"}\n                  `}\n                  style={{\n                    boxShadow: playingString === index ? \"0 0 16px hsl(var(--accent))\" : \n                              selectedChord && !isStringMuted ? \"0 0 6px hsl(var(--string) / 0.5)\" : \"none\"\n                  }}\n                />\n                \n                {/* Finger position indicator - NEW TAB SYSTEM */}\n                {isPressed && !isStringMuted && (\n                  <div \n                    className={`\n                      absolute w-4 h-4 rounded-full border-2 shadow-lg pointer-events-none z-10 transition-all duration-200\n                      ${fingeringPosition?.isRoot ? \"bg-green-500 border-green-600\" : \"bg-yellow-500 border-yellow-600\"}\n                    `}\n                     style={{\n                       top: `${getFretPosition(fret)}px`,\n                       left: \"50%\",\n                       transform: \"translate(-50%, -50%)\"\n                     }}\n                  />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"bg-gradient-wood border-2 border-wood-dark p-1\">\n      <div className=\"relative\">\n        <div className=\"bg-gradient-metal rounded-lg p-1 shadow-inner\">\n          {renderStrings()}\n        </div>\n        \n        {/* Sound hole effect */}\n        <div className=\"absolute inset-0 bg-gradient-glow opacity-20 rounded-lg pointer-events-none\" />\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/BouzoukiNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const BouzoukiNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"bouzouki\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/DrumKit.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":20,"column":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { Circle, RectangleHorizontal, Zap, Sparkles } from \"lucide-react\";\nimport { useDrumSounds } from \"@/hooks/useDrumSounds\";\n\nexport const DrumKit = () => {\n  const [playingDrum, setPlayingDrum] = useState<string | null>(null);\n  const { t } = useLanguage();\n  const { playDrum } = useDrumSounds();\n\n  const drums = [\n    { name: \"kick\", icon: Circle, color: \"bg-red-500/20 border-red-500\" },\n    { name: \"snare\", icon: RectangleHorizontal, color: \"bg-blue-500/20 border-blue-500\" },\n    { name: \"hihat\", icon: Zap, color: \"bg-yellow-500/20 border-yellow-500\" },\n    { name: \"crash\", icon: Sparkles, color: \"bg-orange-500/20 border-orange-500\" },\n  ];\n\n  const handleDrumPlay = async (drumName: string) => {\n    setPlayingDrum(drumName);\n    await playDrum(drumName);\n    setTimeout(() => setPlayingDrum(null), 200);\n  };\n\n  return (\n    <Card className=\"bg-gradient-wood border-2 border-wood-dark p-3 h-full flex flex-col\">\n      <div className=\"grid grid-cols-2 gap-3\">\n        {drums.map((drum) => {\n          const IconComponent = drum.icon;\n          return (\n            <Button\n              key={drum.name}\n              variant=\"outline\"\n              onClick={() => handleDrumPlay(drum.name)}\n              onPointerDown={(e) => {\n                e.preventDefault();\n                handleDrumPlay(drum.name);\n              }}\n              className={`\n                h-12 text-foreground font-semibold transition-all duration-150 flex items-center justify-center\n                ${drum.color}\n                ${playingDrum === drum.name ? \n                  \"scale-95 shadow-lg\" : \n                  \"hover:scale-105 hover:shadow-md\"\n                }\n              `}\n            >\n              <IconComponent size={24} />\n            </Button>\n          );\n        })}\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/FretBoard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card } from \"@/components/ui/card\";\nimport { useStringInstrument } from \"@/hooks/useStringInstrument\";\n\ninterface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\ninterface FretBoardProps {\n  instrumentType: string;\n  selectedChord: Chord | null;\n  availableChords?: Chord[];\n  transposition?: number;\n  onStringPlay: (stringIndex: number, fromDrag?: boolean) => void;\n  playingString: number | null;\n  stringAnimation: { [key: number]: boolean };\n  onDragStart: () => void;\n  onDragEnd: () => void;\n  onStringEnter: (stringIndex: number) => void;\n  isDragging: boolean;\n  isGlobalMuted?: boolean;\n}\n\nexport const FretBoard = ({\n  instrumentType,\n  selectedChord,\n  availableChords = [],\n  transposition = 0,\n  onStringPlay,\n  playingString,\n  stringAnimation,\n  onDragStart,\n  onDragEnd,\n  onStringEnter,\n  isDragging,\n  isGlobalMuted = false\n}: FretBoardProps) => {\n  const { instrumentSystem, getChordFingering } = useStringInstrument(instrumentType);\n  \n  // Calculate maximum fret needed for all available chords\n  const getMaxFretForChords = () => {\n    let maxFret = 3; // Minimum frets to show\n    \n    availableChords.forEach(chord => {\n      const fingering = getChordFingering(chord.name, transposition);\n      fingering.forEach(position => {\n        if (position.fret > 0 && position.fret > maxFret) {\n          maxFret = position.fret;\n        }\n      });\n    });\n    \n    return Math.min(maxFret + 1, instrumentSystem.getFretCount()); // Add one extra fret, but don't exceed instrument limit\n  };\n  \n  const maxFretsToShow = getMaxFretForChords();\n  \n  const renderStrings = () => {\n    const stringCount = instrumentSystem.getStringCount();\n    const chordFingering = selectedChord ? getChordFingering(selectedChord.name, transposition) : [];\n    \n    // Debug log for FretBoard fingering display\n    if (selectedChord && chordFingering.length > 0) {\n      \n    } else if (selectedChord) {\n      \n    }\n    \n    // New TAB-based positioning system\n    const getFretPosition = (fretNumber: number) => {\n      if (fretNumber <= 0) return null;\n      // Direct mapping: fret 1 = first position, fret 2 = second position, etc.\n      // Each fret is 25px apart, starting at 35px from top to align with fret lines\n      return 35 + (fretNumber - 1) * 25;\n    };\n    \n    return (\n      <div className=\"relative flex flex-row\">\n      <div className=\"relative flex flex-row space-x-1 px-1 h-32 flex-1\">\n        {/* Nut indicator - horisontell linje längst upp */}\n        <div className=\"absolute top-1 left-2 right-2 h-1.5 bg-amber-900 shadow-lg z-0\" />\n        \n        {/* Fret markers - horizontal lines */}\n        <div className=\"absolute inset-0 flex flex-col justify-start py-2 pointer-events-none\">\n          {[...Array(maxFretsToShow)].map((_, index) => (\n            <div\n              key={index}\n              className=\"h-0.5 w-full bg-metal opacity-40\"\n              style={{ marginTop: index === 0 ? '18px' : '19px' }}\n            />\n          ))}\n        </div>\n          \n          {[...Array(stringCount)].map((_, index) => {\n            const fingeringPosition = chordFingering.find(f => f.stringIndex === index);\n            const fret = fingeringPosition?.fret ?? (chordFingering.length === 0 ? -1 : 0);\n            const isPressed = fret > 0;\n            const isStringMuted = fret === -1; // Renamed for clarity\n            const stringNote = instrumentSystem.getStringNote(index);\n            const stringThickness = instrumentSystem.getStringThickness(index);\n            const stringColor = instrumentSystem.getStringColor(index);\n            \n            // Convert thickness to Tailwind width class with more dramatic differences\n            const getWidthClass = (thickness: number) => {\n              if (thickness >= 6) return 'w-4';    // Thickest string\n              if (thickness >= 5) return 'w-3';    // Very thick\n              if (thickness >= 4) return 'w-2';    // Medium thick\n              if (thickness >= 3) return 'w-1.5';  // Medium\n              if (thickness >= 2) return 'w-1';    // Thin\n              return 'w-0.5';                      // Thinnest string\n            };\n            \n            return (\n              <div\n                key={index}\n                className={`\n                  relative px-2 py-2 cursor-pointer flex flex-col items-center flex-1\n                  transition-all duration-300 hover:scale-x-110 hover:shadow-md\n                  ${stringAnimation[index] ? \"animate-string-vibrate\" : \"\"}\n                  ${playingString === index ? \"shadow-lg\" : \"\"}\n                  ${selectedChord ? \"hover:bg-accent/20 rounded-md\" : \"\"}\n                  ${isGlobalMuted ? \"opacity-50 cursor-not-allowed\" : \"\"}\n                `}\n                onPointerDown={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  if (!isGlobalMuted && !isStringMuted) {\n                    onDragStart();\n                    onStringPlay(index);\n                  }\n                }}\n                onPointerUp={(e) => {\n                  e.stopPropagation();\n                  onDragEnd();\n                }}\n                onPointerLeave={(e) => {\n                  e.stopPropagation();\n                  // Don't end drag on leave, only on pointer up\n                }}\n                onPointerEnter={(e) => {\n                  e.stopPropagation();\n                  if (!isGlobalMuted) onStringEnter(index);\n                }}\n                onPointerMove={(e) => {\n                  e.stopPropagation();\n                  // Handle drag over strings\n                  if (isDragging && !isGlobalMuted) {\n                    onStringEnter(index);\n                  }\n                }}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  // Only handle click if it's not part of a drag operation\n                  // onClick is redundant since we handle onPointerDown\n                }}\n              >\n                {/* Note name or muted indicator */}\n                <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 text-xs font-semibold\">\n                  {isStringMuted ? (\n                    <span className=\"text-lg font-bold text-destructive\">×</span>\n                  ) : (\n                    <span className=\"text-muted-foreground\">{stringNote}</span>\n                  )}\n                </div>\n                \n                {/* The actual string */}\n                <div \n                  className={`\n                    ${getWidthClass(stringThickness)} ${stringColor} rounded-full my-auto h-full\n                    ${stringAnimation[index] ? \"animate-string-vibrate\" : \"\"}\n                    ${isStringMuted ? \"bg-muted opacity-30\" : \"\"}\n                  `}\n                  style={{\n                    boxShadow: playingString === index ? \"0 0 16px hsl(var(--accent))\" : \n                              selectedChord && !isStringMuted ? \"0 0 6px hsl(var(--string) / 0.5)\" : \"none\"\n                  }}\n                />\n                \n                {/* Finger position indicator - NEW TAB SYSTEM */}\n                {isPressed && !isStringMuted && (\n                  <div \n                    className={`\n                      absolute w-4 h-4 rounded-full border-2 shadow-lg pointer-events-none z-10 transition-all duration-200\n                      ${fingeringPosition?.isRoot ? \"bg-green-500 border-green-600\" : \"bg-yellow-500 border-yellow-600\"}\n                    `}\n                     style={{\n                       top: `${getFretPosition(fret)}px`,\n                       left: \"50%\",\n                       transform: \"translate(-50%, -50%)\"\n                     }}\n                  />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"bg-gradient-wood border-2 border-wood-dark p-1\">\n      <div className=\"relative\">\n        <div className=\"bg-gradient-metal rounded-lg p-1 shadow-inner\">\n          {renderStrings()}\n        </div>\n        \n        {/* Sound hole effect */}\n        <div className=\"absolute inset-0 bg-gradient-glow opacity-20 rounded-lg pointer-events-none\" />\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/GuitarDADGADNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const GuitarDADGADNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"guitar-dadgad\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/GuitarDropDNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const GuitarDropDNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"guitar-dropd\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/GuitarHalfStepDownNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const GuitarHalfStepDownNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"guitar-halfstepdown\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/GuitarNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const GuitarNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"guitar\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/GuitarOpenDNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const GuitarOpenDNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"guitar-opend\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/GuitarOpenGNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const GuitarOpenGNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"guitar-openg\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/GuitarWholeStepDownNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const GuitarWholeStepDownNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"guitar-wholestepdown\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/MandolinNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const MandolinNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"mandolin\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/MetronomeAutoPlayer.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":11,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause, Volume2, VolumeX } from \"lucide-react\";\nimport { useDrumSounds } from \"@/hooks/useDrumSounds\";\nimport { useAutoChordSelection } from \"@/hooks/useAutoChordSelection\";\nimport { MetronomeAutoPlayerSettings } from \"@/components/ui/MetronomeAutoPlayerSettings\";\nimport { useGlobalAudio } from \"@/contexts/GlobalAudioContext\";\nimport { Chord } from \"@/types/chord\";\n\ninterface SongLine {\n  text: string;\n  chords: string[];\n  section?: string;\n}\n\ninterface MetronomeAutoPlayerProps {\n  // Auto player props\n  songLines: SongLine[];\n  availableChords: Chord[];\n  transposition: number;\n  onChordSelect: (chord: Chord) => void;\n  isAutoPlayerEnabled: boolean;\n}\n\nexport const MetronomeAutoPlayer = ({\n  songLines,\n  availableChords,\n  transposition,\n  onChordSelect,\n  isAutoPlayerEnabled\n}: MetronomeAutoPlayerProps) => {\n  // Metronome state\n  const [bpm, setBpm] = useState(120);\n  const [isMetronomePlayng, setIsMetronomePlayng] = useState(false);\n  const [beatCount, setBeatCount] = useState(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { playDrum } = useDrumSounds();\n  const { isMuted: isGlobalMuted, toggleMute: toggleGlobalMute } = useGlobalAudio();\n\n  // Auto player state\n  const [mode, setMode] = useState<'metronome' | 'autoplayer'>('metronome');\n\n  // Auto chord selection hook - use BPM for timing\n  const {\n    currentLine,\n    currentChordIndex,\n    isPlaying: isAutoPlayerPlaying,\n    nextChord,\n    previousChord,\n    resetToStart,\n    toggleAutoPlay,\n    progress\n  } = useAutoChordSelection({\n    songLines,\n    availableChords,\n    transposition,\n    onChordSelect,\n    isEnabled: isAutoPlayerEnabled && mode === 'autoplayer'\n  });\n\n  // Play drum click sound\n  const playClick = useCallback(async (isAccented: boolean = false) => {\n    if (!isGlobalMuted) {\n      const drumSound = isAccented ? \"kick\" : \"hihat\";\n      await playDrum(drumSound);\n    }\n  }, [playDrum, isGlobalMuted]);\n\n  // Toggle metronome\n  const toggleMetronome = useCallback(() => {\n    if (isMetronomePlayng) {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      setIsMetronomePlayng(false);\n      setBeatCount(0);\n    } else {\n      setIsMetronomePlayng(true);\n      setBeatCount(1);\n      playClick(true);\n      \n      const interval = 60000 / bpm;\n      intervalRef.current = setInterval(() => {\n        setBeatCount(prevCount => {\n          const newCount = (prevCount % 4) + 1;\n          playClick(newCount === 1);\n          return newCount;\n        });\n      }, interval);\n    }\n  }, [isMetronomePlayng, bpm, playClick]);\n\n  // Update metronome interval when BPM changes\n  useEffect(() => {\n    if (isMetronomePlayng && intervalRef.current) {\n      clearInterval(intervalRef.current);\n      const interval = 60000 / bpm;\n      intervalRef.current = setInterval(() => {\n        setBeatCount(prevCount => {\n          const newCount = (prevCount % 4) + 1;\n          playClick(newCount === 1);\n          return newCount;\n        });\n      }, interval);\n    }\n  }, [bpm, isMetronomePlayng, playClick]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  const hasAutoPlayerContent = isAutoPlayerEnabled && songLines.length > 0;\n  \n  // Get current line chords for chord indicators\n  const currentLineChords = songLines[currentLine]?.chords || [];\n  const maxChords = Math.max(4, currentLineChords.length); // At least 4 dots, more if needed\n\n  return (\n    <Card className=\"bg-gradient-wood border-2 border-wood-dark p-3 h-full flex flex-col\">\n      <div className=\"flex-1 flex flex-col justify-between space-y-2\">\n        {/* Mode selector and settings */}\n        <div className=\"flex items-center justify-between\">\n          {hasAutoPlayerContent && (\n            <div className=\"flex\">\n              <Button\n                variant={mode === 'metronome' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setMode('metronome')}\n                className=\"h-6 px-2 text-xs\"\n              >\n                Metronom\n              </Button>\n              <Button\n                variant={mode === 'autoplayer' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setMode('autoplayer')}\n                className=\"h-6 px-2 text-xs\"\n              >\n                Auto\n              </Button>\n            </div>\n          )}\n          \n          <div className=\"flex items-center space-x-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleGlobalMute}\n              className=\"h-6 w-6 p-0\"\n              title={isGlobalMuted ? \"Slå på ljud (Global)\" : \"Stäng av ljud (Global)\"}\n            >\n              {isGlobalMuted ? (\n                <VolumeX className=\"h-3 w-3 text-destructive\" />\n              ) : (\n                <Volume2 className=\"h-3 w-3 text-foreground\" />\n              )}\n            </Button>\n            \n            <MetronomeAutoPlayerSettings\n              bpm={bpm}\n              setBpm={setBpm}\n            />\n          </div>\n        </div>\n\n        {mode === 'metronome' ? (\n          // Metronome mode\n          <>\n            {/* Beat indicator */}\n            <div className=\"flex justify-center space-x-1\">\n              {[1, 2, 3, 4].map((beat) => (\n                <div\n                  key={beat}\n                  className={`\n                    w-2 h-2 rounded-full transition-all duration-100\n                    ${beatCount === beat && isMetronomePlayng\n                      ? beat === 1 \n                        ? \"bg-accent shadow-lg scale-125\" \n                        : \"bg-primary shadow-md scale-110\"\n                      : \"bg-muted\"\n                    }\n                  `}\n                />\n              ))}\n            </div>\n\n            {/* BPM Display */}\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-foreground\">\n                {bpm}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">BPM</div>\n            </div>\n\n            {/* Play/Pause Button */}\n            <div className=\"flex justify-center\">\n              <Button\n                onClick={toggleMetronome}\n                variant=\"default\"\n                size=\"sm\"\n                className=\"h-8 px-4\"\n              >\n                {isMetronomePlayng ? (\n                  <>\n                    <Pause className=\"h-3 w-3 mr-1\" />\n                    Pausa\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Spela\n                  </>\n                )}\n              </Button>\n            </div>\n          </>\n        ) : (\n          // Auto player mode\n          <>\n            {/* Chord indicators - same style as metronome beats */}\n            <div className=\"flex justify-center space-x-1\">\n              {Array.from({ length: maxChords }, (_, index) => {\n                const chordIndex = index;\n                const hasChord = chordIndex < currentLineChords.length;\n                const isCurrentChord = chordIndex === currentChordIndex && isAutoPlayerPlaying;\n                \n                return (\n                  <div\n                    key={chordIndex}\n                    className={`\n                      w-2 h-2 rounded-full transition-all duration-100\n                      ${!hasChord \n                        ? \"bg-muted/30\" \n                        : isCurrentChord\n                        ? chordIndex === 0 \n                          ? \"bg-accent shadow-lg scale-125\" \n                          : \"bg-primary shadow-md scale-110\"\n                        : \"bg-muted\"\n                      }\n                    `}\n                  />\n                );\n              })}\n            </div>\n\n            {/* BPM Display for auto player */}\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-foreground\">\n                {bpm}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">BPM</div>\n            </div>\n\n            {/* Auto player controls - simplified */}\n            <div className=\"flex justify-center\">\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => {\n                  // Convert BPM to reasonable chord change interval (minimum 1.5 seconds)\n                  const bpmInterval = Math.max((60000 / bpm) * 2, 1500); // 2 beats per chord, minimum 1.5s\n                  toggleAutoPlay(bpmInterval);\n                }}\n                className=\"h-8 px-4\"\n              >\n                {isAutoPlayerPlaying ? (\n                  <>\n                    <Pause className=\"h-3 w-3 mr-1\" />\n                    Pausa\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Spela\n                  </>\n                )}\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/OctaveMandolinNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const OctaveMandolinNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"octavemandolin\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/Piano.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":5,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { usePianoSounds } from \"@/hooks/usePianoSounds\";\n\ninterface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\ninterface PianoProps {\n  selectedChord: Chord | null;\n  transposition: number;\n  isGlobalMuted?: boolean;\n}\n\n// Extended mapping of chord names to piano notes\nconst chordMappings: { [key: string]: string[] } = {\n  'C': ['C', 'E', 'G'],\n  'C#': ['C#', 'F', 'G#'],\n  'Db': ['C#', 'F', 'G#'],\n  'D': ['D', 'F#', 'A'],\n  'D#': ['D#', 'G', 'A#'],\n  'Eb': ['D#', 'G', 'A#'],\n  'E': ['E', 'G#', 'B'],\n  'F': ['F', 'A', 'C'],\n  'F#': ['F#', 'A#', 'C#'],\n  'Gb': ['F#', 'A#', 'C#'],\n  'G': ['G', 'B', 'D'],\n  'G#': ['G#', 'C', 'D#'],\n  'Ab': ['G#', 'C', 'D#'],\n  'A': ['A', 'C#', 'E'],\n  'A#': ['A#', 'D', 'F'],\n  'Bb': ['A#', 'D', 'F'],\n  'B': ['B', 'D#', 'F#'],\n  // Mollackord\n  'Cm': ['C', 'D#', 'G'],\n  'C#m': ['C#', 'E', 'G#'],\n  'Dm': ['D', 'F', 'A'],\n  'D#m': ['D#', 'F#', 'A#'],\n  'Em': ['E', 'G', 'B'],\n  'Fm': ['F', 'G#', 'C'],\n  'F#m': ['F#', 'A', 'C#'],\n  'Gm': ['G', 'A#', 'D'],\n  'G#m': ['G#', 'B', 'D#'],\n  'Am': ['A', 'C', 'E'],\n  'A#m': ['A#', 'C#', 'F'],\n  'Bm': ['B', 'D', 'F#'],\n  // Seventh chords and special chords\n  'B7': ['B', 'D#', 'F#', 'A'],\n  'C7': ['C', 'E', 'G', 'A#'],\n  'D7': ['D', 'F#', 'A', 'C'],\n  'E7': ['E', 'G#', 'B', 'D'],\n  'F7': ['F', 'A', 'C', 'D#'],\n  'G7': ['G', 'B', 'D', 'F'],\n  'A7': ['A', 'C#', 'E', 'G'],\n  'Cadd9': ['C', 'E', 'G', 'D'],\n  'Dsus4': ['D', 'G', 'A'],\n  'Csus4': ['C', 'F', 'G'],\n  'Fsus4': ['F', 'A#', 'C'],\n  'Gsus4': ['G', 'C', 'D']\n};\n\nconst whiteKeys = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];\nconst blackKeys = ['C#', 'D#', 'F#', 'G#', 'A#'];\n\nexport const Piano = ({ selectedChord, transposition, isGlobalMuted = false }: PianoProps) => {\n  const [playingNotes, setPlayingNotes] = useState<string[]>([]);\n  const { playNote, initializeSounds, isLoaded } = usePianoSounds();\n\n  useEffect(() => {\n    initializeSounds();\n  }, [initializeSounds]);\n\n  // Get notes to highlight for current chord with transposition\n  const getChordNotes = (): string[] => {\n    if (!selectedChord) return [];\n    \n    const baseNotes = chordMappings[selectedChord.name] || [];\n    \n    // Transponeringsmappning\n    const noteMap: { [key: string]: number } = {\n      'C': 0, 'C#': 1, 'D': 2, 'D#': 3, 'E': 4, 'F': 5,\n      'F#': 6, 'G': 7, 'G#': 8, 'A': 9, 'A#': 10, 'B': 11\n    };\n    \n    const reverseMap = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    \n    return baseNotes.map(note => {\n      const noteIndex = noteMap[note];\n      if (noteIndex === undefined) return note; // Fallback for unknown notes\n      const transposedIndex = (noteIndex + transposition + 12) % 12;\n      return reverseMap[transposedIndex];\n    });\n  };\n\n  const handleNotePlay = async (note: string) => {\n    if (!isLoaded || isGlobalMuted) return;\n    \n    \n    setPlayingNotes(prev => [...prev, note]);\n    await playNote(note);\n    \n    // Longer tone - 1 second instead of 300ms\n    setTimeout(() => {\n      setPlayingNotes(prev => prev.filter(n => n !== note));\n    }, 1000);\n  };\n\n  const chordNotes = getChordNotes();\n  const rootNote = chordNotes[0]; // First note is the root\n\n  return (\n    <Card className=\"bg-gradient-wood border-2 border-wood-dark p-2 h-full\">\n      <div className=\"relative h-full flex items-end\">\n        {/* White keys */}\n        <div className=\"flex h-full w-full\">\n          {whiteKeys.map((note, index) => {\n            const isChordNote = chordNotes.includes(note);\n            const isRootNote = note === rootNote;\n            const isPlaying = playingNotes.includes(note);\n            \n            return (\n              <button\n                key={note}\n                className={`\n                  flex-1 h-full border border-gray-400 rounded-b-md\n                  transition-all duration-150 cursor-pointer\n                  ${isRootNote ? 'bg-green-200' : isChordNote ? 'bg-accent/20' : 'bg-white'}\n                  ${isPlaying ? 'bg-accent/40' : ''}\n                  hover:bg-gray-100 active:bg-gray-200\n                  relative flex items-end justify-center pb-2\n                `}\n                onClick={() => handleNotePlay(note)}\n                onPointerDown={(e) => {\n                  e.preventDefault();\n                  handleNotePlay(note);\n                }}\n              >\n                {/* Remove chord indicator ring - color is enough */}\n                <span className=\"text-xs font-semibold text-gray-600\">\n                  {note}\n                </span>\n              </button>\n            );\n          })}\n        </div>\n        \n        {/* Black keys */}\n        <div className=\"absolute top-0 left-0 w-full h-3/5 flex\">\n          {blackKeys.map((note, index) => {\n            const isChordNote = chordNotes.includes(note);\n            const isRootNote = note === rootNote;\n            const isPlaying = playingNotes.includes(note);\n            \n            // Position black keys between white keys\n            const positions = [0.7, 1.7, 3.7, 4.7, 5.7]; // Relative positions\n            const leftPercent = (positions[index] / 7) * 100;\n            \n            return (\n              <button\n                key={note}\n                className={`\n                  absolute w-6 h-full rounded-b-md border border-gray-600\n                  transition-all duration-150 cursor-pointer\n                  ${isRootNote ? 'bg-green-600' : isChordNote ? 'bg-accent/40' : 'bg-gray-800'}\n                  ${isPlaying ? 'bg-accent/60' : ''}\n                  hover:bg-gray-700 active:bg-gray-600\n                  flex items-end justify-center pb-1\n                `}\n                style={{ left: `${leftPercent}%`, transform: 'translateX(-50%)' }}\n                onClick={() => handleNotePlay(note)}\n                onPointerDown={(e) => {\n                  e.preventDefault();\n                  handleNotePlay(note);\n                }}\n              >\n                {/* Remove chord indicator ring - color is enough */}\n                <span className=\"text-xs font-semibold text-white\">\n                  {note}\n                </span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/UkuleleNeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FretBoard } from \"./FretBoard\";\nimport { StringInstrumentProps } from \"@/types/instrument\";\n\nexport const UkuleleNeck = (props: StringInstrumentProps) => {\n  return <FretBoard instrumentType=\"ukulele\" {...props} />;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/instruments/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/FullscreenSongText.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":8,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { transposeChordName } from \"@/lib/chordSystem\";\nimport { X, RotateCcw } from \"lucide-react\";\n\ninterface FullscreenSongTextProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedChord?: { name: string } | null;\n  transposition?: number;\n}\n\nexport const FullscreenSongText = ({ \n  isOpen, \n  onClose, \n  selectedChord, \n  transposition = 0 \n}: FullscreenSongTextProps) => {\n  const languageContext = useLanguage();\n  const t = languageContext?.t || ((key: string) => key);\n  const [currentLine, setCurrentLine] = useState(0);\n  const [chordProgress, setChordProgress] = useState(0);\n  \n  // Default song\n  const defaultSong = {\n    title: \"Twinkle Twinkle Little Star\",\n    lines: [\n      { text: \"Twinkle twinkle little star\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Vers 1\" },\n      { text: \"How I wonder what you are\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Up above the world so high\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Vers 2\" },\n      { text: \"Like a diamond in the sky\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Twinkle twinkle little star\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Refräng\" },\n      { text: \"How I wonder what you are\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  };\n\n  const [songData, setSongData] = useState(defaultSong);\n\n  // Load song from localStorage\n  useEffect(() => {\n    const loadSong = () => {\n      const saved = localStorage.getItem(\"selectedSongData\");\n      if (saved) {\n        try {\n          const parsedSong = JSON.parse(saved);\n          setSongData(parsedSong);\n          setCurrentLine(0);\n          setChordProgress(0);\n        } catch (error) {\n          // Error parsing saved song, using default\n          setSongData(defaultSong);\n        }\n      }\n    };\n\n    if (isOpen) {\n      loadSong();\n    }\n\n    const handleSongChange = () => {\n      loadSong();\n    };\n    \n    window.addEventListener('songChanged', handleSongChange);\n    return () => window.removeEventListener('songChanged', handleSongChange);\n  }, [isOpen]);\n\n  const transposeChord = (chord: string, semitones: number): string => {\n    return transposeChordName(chord, semitones);\n  };\n\n  const songLines = songData.lines;\n\n  // Track chord progression\n  useEffect(() => {\n    if (!selectedChord || currentLine >= songLines.length) return;\n    \n    const currentLineChords = songLines[currentLine].chords;\n    const expectedChord = currentLineChords[chordProgress];\n    \n    const originalSelectedChord = transposeChord(selectedChord.name, -transposition);\n    \n    if (originalSelectedChord === expectedChord) {\n      if (chordProgress < currentLineChords.length - 1) {\n        setChordProgress(prev => prev + 1);\n      } else {\n        setCurrentLine(prev => prev + 1);\n        setChordProgress(0);\n      }\n    }\n  }, [selectedChord, currentLine, chordProgress, songLines, transposition]);\n\n  const resetSong = () => {\n    setCurrentLine(0);\n    setChordProgress(0);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl h-[95vh] p-4\">\n        <DialogHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <DialogTitle className=\"text-xl font-bold\">{songData.title}</DialogTitle>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={resetSong}>\n              <RotateCcw className=\"h-4 w-4 mr-2\" />\n              Börja om\n            </Button>\n          </div>\n        </DialogHeader>\n        <DialogDescription className=\"sr-only\">\n          Visa låttext och ackord i helskärmsläge\n        </DialogDescription>\n        \n        <div className=\"flex-1 overflow-y-auto\">\n          <div className=\"space-y-1\">\n            {songLines.map((line, lineIndex) => {\n              const isCurrentLine = lineIndex === currentLine;\n              const hasPassedCurrentLine = lineIndex < currentLine;\n              \n              return (\n                <div \n                  key={lineIndex} \n                  className={`\n                    relative p-3 rounded-lg transition-all duration-300\n                    ${isCurrentLine \n                      ? 'bg-accent/20 border-2 border-accent' \n                      : hasPassedCurrentLine \n                        ? 'opacity-60 bg-muted/20' \n                        : 'bg-background/50 hover:bg-muted/10'\n                    }\n                  `}\n                >\n                  {/* Section label */}\n                  {line.section && (\n                    <div className=\"text-xs font-bold text-accent mb-2 uppercase tracking-wide\">\n                      {line.section}\n                    </div>\n                  )}\n                  \n                  {/* Chord line */}\n                  <div className=\"relative h-6 mb-1\">\n                    {line.chords.map((chord, chordIndex) => {\n                      const isCurrentChord = isCurrentLine && chordIndex === chordProgress;\n                      const isPlayedChord = isCurrentLine && chordIndex < chordProgress;\n                      const hasPassedChord = hasPassedCurrentLine;\n                      \n                      return (\n                        <span\n                          key={chordIndex}\n                          className={`\n                            absolute text-sm font-bold transition-all duration-300\n                            ${isCurrentChord \n                              ? \"text-accent scale-110 animate-pulse\" \n                              : isPlayedChord || hasPassedChord\n                              ? \"text-muted-foreground line-through opacity-60\"\n                              : \"text-primary\"\n                            }\n                          `}\n                          style={{ left: `${chordIndex * 4.5}rem` }}\n                        >\n                          {transposeChord(chord, transposition)}\n                        </span>\n                      );\n                    })}\n                  </div>\n                  \n                  {/* Text line */}\n                  <div className={`\n                    text-base font-medium leading-snug\n                    ${isCurrentLine ? 'text-foreground' : hasPassedCurrentLine ? 'text-muted-foreground' : 'text-foreground'}\n                  `}>\n                    {line.text}\n                  </div>\n                  \n                  {/* Progress indicator */}\n                  {isCurrentLine && (\n                    <div className=\"absolute right-3 top-3\">\n                      <div className=\"text-xs text-accent font-medium\">\n                        Rad {currentLine + 1} av {songLines.length}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/GuitarTuningSelector.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":5,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Guitar } from \"lucide-react\";\n\nexport interface GuitarTuning {\n  id: string;\n  name: string;\n  description: string;\n  strings: string[];\n}\n\nexport const GUITAR_TUNINGS: GuitarTuning[] = [\n  {\n    id: \"guitar\",\n    name: \"Standard\",\n    description: \"E-A-D-G-B-E (Standard tuning)\",\n    strings: [\"E2\", \"A2\", \"D3\", \"G3\", \"B3\", \"E4\"]\n  },\n  {\n    id: \"guitar-dropd\",\n    name: \"Drop D\",\n    description: \"D-A-D-G-B-E (Drop D tuning)\",\n    strings: [\"D2\", \"A2\", \"D3\", \"G3\", \"B3\", \"E4\"]\n  },\n  {\n    id: \"guitar-openg\",\n    name: \"Open G\",\n    description: \"D-G-D-G-B-D (Open G tuning)\",\n    strings: [\"D2\", \"G2\", \"D3\", \"G3\", \"B3\", \"D4\"]\n  },\n  {\n    id: \"guitar-opend\",\n    name: \"Open D\",\n    description: \"D-A-D-F#-A-D (Open D tuning)\",\n    strings: [\"D2\", \"A2\", \"D3\", \"F#3\", \"A3\", \"D4\"]\n  },\n  {\n    id: \"guitar-dadgad\",\n    name: \"DADGAD\",\n    description: \"D-A-D-G-A-D (Celtic tuning)\",\n    strings: [\"D2\", \"A2\", \"D3\", \"G3\", \"A3\", \"D4\"]\n  },\n  {\n    id: \"guitar-halfstepdown\",\n    name: \"Half-step Down\",\n    description: \"D♯-G♯-C♯-F♯-A♯-D♯ (All strings down ½ step)\",\n    strings: [\"D#2\", \"G#2\", \"C#3\", \"F#3\", \"A#3\", \"D#4\"]\n  },\n  {\n    id: \"guitar-wholestepdown\",\n    name: \"Whole-step Down\",\n    description: \"D-G-C-F-A-D (All strings down 1 step)\",\n    strings: [\"D2\", \"G2\", \"C3\", \"F3\", \"A3\", \"D4\"]\n  }\n];\n\ninterface GuitarTuningSelectorProps {\n  selectedTuning: string;\n  onTuningChange: (tuningId: string) => void;\n  className?: string;\n}\n\nexport const GuitarTuningSelector = ({ \n  selectedTuning, \n  onTuningChange, \n  className = \"\" \n}: GuitarTuningSelectorProps) => {\n  const currentTuning = GUITAR_TUNINGS.find(t => t.id === selectedTuning) || GUITAR_TUNINGS[0];\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <Label htmlFor=\"guitar-tuning\" className=\"flex items-center gap-2 text-sm font-medium\">\n        <Guitar className=\"h-4 w-4\" />\n        Gitarrstämning\n      </Label>\n      <Select value={selectedTuning} onValueChange={onTuningChange}>\n        <SelectTrigger id=\"guitar-tuning\" className=\"w-full bg-background border-border\">\n          <SelectValue placeholder=\"Välj stämning\">\n            <div className=\"flex flex-col items-start\">\n              <span className=\"font-medium\">{currentTuning.name}</span>\n              <span className=\"text-xs text-muted-foreground truncate\">{currentTuning.description}</span>\n            </div>\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent className=\"bg-popover border-border shadow-lg z-50\">\n          {GUITAR_TUNINGS.map((tuning) => (\n            <SelectItem \n              key={tuning.id} \n              value={tuning.id}\n              className=\"cursor-pointer hover:bg-accent hover:text-accent-foreground\"\n            >\n              <div className=\"flex flex-col items-start py-1\">\n                <span className=\"font-medium\">{tuning.name}</span>\n                <span className=\"text-xs text-muted-foreground\">{tuning.description}</span>\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/LanguageSelector.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":5,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/components/ui/button\";\nimport { useLanguage, Language } from \"@/contexts/LanguageContext\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst languageFlags: Record<Language, string> = {\n  sv: \"🇸🇪\",\n  en: \"🇬🇧\", \n  de: \"🇩🇪\",\n  fr: \"🇫🇷\",\n  es: \"🇪🇸\",\n  it: \"🇮🇹\",\n  pt: \"🇵🇹\",\n  nl: \"🇳🇱\",\n  da: \"🇩🇰\",\n  no: \"🇳🇴\",\n};\n\ninterface LanguageSelectorProps {\n  onLanguageChange?: () => void;\n}\n\nexport const LanguageSelector = ({ onLanguageChange }: LanguageSelectorProps) => {\n  const { language, setLanguage } = useLanguage();\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"space-y-3\" data-testid=\"language-selector\">\n      <div className=\"grid grid-cols-5 gap-3 justify-center max-w-md mx-auto\">\n        {Object.entries(languageFlags).map(([code, flag]) => (\n          <Button\n            key={code}\n            variant={language === code ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => {\n              setLanguage(code as Language);\n              onLanguageChange?.();\n            }}\n            className=\"text-2xl p-4 h-auto aspect-square flex items-center justify-center\"\n          >\n            {flag}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/MetronomeAutoPlayerSettings.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":8,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Settings } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface MetronomeAutoPlayerSettingsProps {\n  // Metronome settings\n  bpm: number;\n  setBpm: (bpm: number) => void;\n}\n\nexport const MetronomeAutoPlayerSettings = ({\n  bpm,\n  setBpm\n}: MetronomeAutoPlayerSettingsProps) => {\n  const { t } = useLanguage();\n  \n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-6 w-6 p-0\"\n          title={t(\"settings.title\")}\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{t(\"settings.metronomeSettings\")}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-muted/50 p-3 rounded-lg\">\n            <p className=\"text-sm text-muted-foreground\">\n              <strong>{t(\"settings.autoPlayer\")}:</strong> {t(\"settings.chordChangesEvery\")} {Math.max((60000 / bpm) * 2 / 1000, 1.5).toFixed(1)} {t(\"settings.secondsBasedOnBPM\")}.\n            </p>\n          </div>\n          <div className=\"space-y-2\">\n            <Label>{t(\"settings.bpmLabel\")}</Label>\n            <Slider\n              value={[bpm]}\n              onValueChange={(value) => setBpm(value[0])}\n              min={40}\n              max={200}\n              step={1}\n              className=\"w-full\"\n            />\n            <div className=\"text-sm text-muted-foreground text-center\">\n              {bpm} BPM\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label>{t(\"settings.quickSelectBPM\")}</Label>\n            <div className=\"grid grid-cols-4 gap-2\">\n              {[60, 80, 120, 140, 100, 160, 180, 200].map((presetBpm) => (\n                <Button\n                  key={presetBpm}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setBpm(presetBpm)}\n                  className={`text-xs ${bpm === presetBpm ? 'bg-accent/20 border-accent' : ''}`}\n                >\n                  {presetBpm}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/SongSelector.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":6,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface Song {\n  id: string;\n  title: string;\n  artist: string;\n  genre: string;\n  difficulty: \"Easy\" | \"Medium\" | \"Hard\";\n  lines: {\n    text: string;\n    chords: string[];\n    section?: string;\n  }[];\n}\n\ninterface SongSelectorProps {\n  onSongSelect?: () => void;\n}\n\nconst availableSongs: Song[] = [\n  // Children's Songs & Traditional\n  {\n    id: \"twinkle\",\n    title: \"Twinkle Twinkle Little Star\",\n    artist: \"Traditional\",\n    genre: \"Children's Song\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Twinkle twinkle little star\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Vers 1\" },\n      { text: \"How I wonder what you are\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Up above the world so high\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Vers 2\" },\n      { text: \"Like a diamond in the sky\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Twinkle twinkle little star\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Refräng\" },\n      { text: \"How I wonder what you are\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"blinka-lilla-stjarna\",\n    title: \"Blinka Lilla Stjärna\",\n    artist: \"Traditionell\",\n    genre: \"Barnsång\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Blinka lilla stjärna där\", chords: [\"C\", \"C\", \"G\", \"G\"], section: \"Vers 1\" },\n      { text: \"Högt bland molnen går din färd\", chords: [\"Am\", \"Am\", \"G\", \"G\"] },\n      { text: \"Hur jag undrar vad du är\", chords: [\"F\", \"F\", \"C\", \"C\"], section: \"Vers 2\" },\n      { text: \"Fjärran stor och nära liten\", chords: [\"G\", \"G\", \"C\", \"C\"] },\n      { text: \"Blinka lilla stjärna där\", chords: [\"C\", \"C\", \"G\", \"G\"], section: \"Refräng\" },\n      { text: \"Högt bland molnen går din färd\", chords: [\"Am\", \"Am\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"happy-birthday\",\n    title: \"Happy Birthday\",\n    artist: \"Traditional\",\n    genre: \"Celebration\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Happy birthday to you\", chords: [\"C\", \"C\", \"D\", \"C\"] },\n      { text: \"Happy birthday to you\", chords: [\"F\", \"C\", \"C\", \"C\"] },\n      { text: \"Happy birthday dear friend\", chords: [\"C\", \"C\", \"D\", \"C\"] },\n      { text: \"Happy birthday to you\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"row-row-row\",\n    title: \"Row Row Row Your Boat\",\n    artist: \"Traditional\",\n    genre: \"Children's Song\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Row row row your boat\", chords: [\"C\", \"C\", \"C\", \"C\"] },\n      { text: \"Gently down the stream\", chords: [\"C\", \"C\", \"G\", \"G\"] },\n      { text: \"Merrily merrily merrily merrily\", chords: [\"G\", \"G\", \"G\", \"G\"] },\n      { text: \"Life is but a dream\", chords: [\"G\", \"G\", \"C\", \"C\"] }\n    ]\n  },\n  {\n    id: \"old-macdonald\",\n    title: \"Old MacDonald\",\n    artist: \"Traditional\",\n    genre: \"Children's Song\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Old MacDonald had a farm\", chords: [\"C\", \"C\", \"G\", \"C\"] },\n      { text: \"E-I-E-I-O\", chords: [\"G\", \"G\", \"C\", \"C\"] },\n      { text: \"And on his farm he had a cow\", chords: [\"C\", \"C\", \"G\", \"C\"] },\n      { text: \"E-I-E-I-O\", chords: [\"G\", \"G\", \"C\", \"C\"] }\n    ]\n  },\n\n  // Pop & Rock Classics\n  {\n    id: \"imagine\",\n    title: \"Imagine\",\n    artist: \"John Lennon\",\n    genre: \"Pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Imagine there's no heaven\", chords: [\"C\", \"Cmaj7\", \"F\", \"C\"] },\n      { text: \"It's easy if you try\", chords: [\"Cmaj7\", \"F\", \"C\", \"C\"] },\n      { text: \"No hell below us\", chords: [\"C\", \"Cmaj7\", \"F\", \"C\"] },\n      { text: \"Above us only sky\", chords: [\"Cmaj7\", \"F\", \"Am\", \"Dm\"] }\n    ]\n  },\n  {\n    id: \"let-it-be\",\n    title: \"Let It Be\",\n    artist: \"The Beatles\",\n    genre: \"Rock\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"When I find myself in times of trouble\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"Mother Mary comes to me\", chords: [\"C\", \"G\", \"F\", \"C\"] },\n      { text: \"Speaking words of wisdom\", chords: [\"Dm\", \"C\", \"G\", \"F\"] },\n      { text: \"Let it be\", chords: [\"C\", \"G\", \"C\", \"C\"] }\n    ]\n  },\n  {\n    id: \"yesterday\",\n    title: \"Yesterday\",\n    artist: \"The Beatles\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Yesterday all my troubles seemed so far away\", chords: [\"C\", \"E7\", \"Am\", \"F\"] },\n      { text: \"Now it looks as though they're here to stay\", chords: [\"C\", \"G\", \"F\", \"Em\"] },\n      { text: \"Oh I believe in yesterday\", chords: [\"Dm\", \"G\", \"C\", \"C\"] },\n      { text: \"Suddenly I'm not half the man I used to be\", chords: [\"C\", \"E7\", \"Am\", \"F\"] }\n    ]\n  },\n  {\n    id: \"hey-jude\",\n    title: \"Hey Jude\",\n    artist: \"The Beatles\",\n    genre: \"Rock\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Hey Jude don't make it bad\", chords: [\"C\", \"G\", \"G7\", \"C\"] },\n      { text: \"Take a sad song and make it better\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Remember to let her into your heart\", chords: [\"C\", \"G\", \"G7\", \"C\"] },\n      { text: \"Then you can start to make it better\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"wonderwall\",\n    title: \"Wonderwall\",\n    artist: \"Oasis\",\n    genre: \"Rock\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Today is gonna be the day\", chords: [\"Em\", \"G\", \"D\", \"C\"] },\n      { text: \"That they're gonna throw it back to you\", chords: [\"Em\", \"G\", \"D\", \"C\"] },\n      { text: \"By now you should've somehow\", chords: [\"Em\", \"G\", \"D\", \"C\"] },\n      { text: \"Realized what you gotta do\", chords: [\"Em\", \"G\", \"D\", \"C\"] }\n    ]\n  },\n  {\n    id: \"champagne-supernova\",\n    title: \"Champagne Supernova\",\n    artist: \"Oasis\",\n    genre: \"Rock\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"How many special people change\", chords: [\"A\", \"E\", \"F#m\", \"D\"] },\n      { text: \"How many lives are living strange\", chords: [\"A\", \"E\", \"F#m\", \"D\"] },\n      { text: \"Where were you while we were getting high\", chords: [\"A\", \"E\", \"F#m\", \"D\"] },\n      { text: \"Slowly walking down the hall\", chords: [\"A\", \"E\", \"F#m\", \"D\"] }\n    ]\n  },\n  {\n    id: \"hotel-california\",\n    title: \"Hotel California\",\n    artist: \"Eagles\",\n    genre: \"Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"On a dark desert highway\", chords: [\"Bm\", \"F#\", \"A\", \"E\"] },\n      { text: \"Cool wind in my hair\", chords: [\"G\", \"D\", \"Em\", \"F#\"] },\n      { text: \"Warm smell of colitas\", chords: [\"Bm\", \"F#\", \"A\", \"E\"] },\n      { text: \"Rising up through the air\", chords: [\"G\", \"D\", \"Em\", \"F#\"] }\n    ]\n  },\n  {\n    id: \"bohemian-rhapsody\",\n    title: \"Bohemian Rhapsody\",\n    artist: \"Queen\",\n    genre: \"Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Is this the real life\", chords: [\"Bb\", \"C\", \"F\", \"Dm\"], section: \"Intro\" },\n      { text: \"Is this just fantasy\", chords: [\"Gm\", \"C\", \"F\", \"C\"] },\n      { text: \"Caught in a landslide\", chords: [\"Bb\", \"C\", \"F\", \"Dm\"], section: \"Vers 1\" },\n      { text: \"No escape from reality\", chords: [\"Gm\", \"C\", \"F\", \"A\"] },\n      { text: \"Open your eyes\", chords: [\"Dm\", \"Bb\", \"F\", \"C\"], section: \"Förrefräng\" },\n      { text: \"Look up to the skies and see\", chords: [\"Dm\", \"Bb\", \"F\", \"C\"] },\n      { text: \"I'm just a poor boy\", chords: [\"Bb\", \"F\", \"Bb\", \"F\"], section: \"Refräng\" },\n      { text: \"I need no sympathy\", chords: [\"Bb\", \"F\", \"Bb\", \"C\"] }\n    ]\n  },\n  {\n    id: \"we-will-rock-you\",\n    title: \"We Will Rock You\",\n    artist: \"Queen\",\n    genre: \"Rock\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Buddy you're a boy make a big noise\", chords: [\"C\", \"C\", \"C\", \"C\"] },\n      { text: \"Playing in the street gonna be a big man someday\", chords: [\"C\", \"C\", \"C\", \"C\"] },\n      { text: \"You got mud on your face\", chords: [\"F\", \"F\", \"C\", \"C\"] },\n      { text: \"You big disgrace\", chords: [\"F\", \"F\", \"C\", \"C\"] }\n    ]\n  },\n  {\n    id: \"sweet-child-of-mine\",\n    title: \"Sweet Child O' Mine\",\n    artist: \"Guns N' Roses\",\n    genre: \"Hard Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"She's got a smile that it seems to me\", chords: [\"D\", \"C\", \"G\", \"D\"] },\n      { text: \"Reminds me of childhood memories\", chords: [\"C\", \"G\", \"D\", \"D\"] },\n      { text: \"Where everything was as fresh as the bright blue sky\", chords: [\"D\", \"C\", \"G\", \"D\"] },\n      { text: \"Now and then when I see her face\", chords: [\"C\", \"G\", \"D\", \"D\"] }\n    ]\n  },\n\n  // Folk & Country\n  {\n    id: \"amazing-grace\",\n    title: \"Amazing Grace\",\n    artist: \"Traditional\",\n    genre: \"Gospel\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Amazing grace how sweet the sound\", chords: [\"C\", \"F\", \"C\", \"Am\"] },\n      { text: \"That saved a wretch like me\", chords: [\"C\", \"G\", \"C\", \"C\"] },\n      { text: \"I once was lost but now am found\", chords: [\"C\", \"F\", \"C\", \"Am\"] },\n      { text: \"Was blind but now I see\", chords: [\"C\", \"G\", \"C\", \"C\"] }\n    ]\n  },\n  {\n    id: \"house-of-rising-sun\",\n    title: \"House of the Rising Sun\",\n    artist: \"Traditional\",\n    genre: \"Folk\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"There is a house in New Orleans\", chords: [\"Am\", \"C\", \"D\", \"F\"] },\n      { text: \"They call the Rising Sun\", chords: [\"Am\", \"C\", \"E\", \"E\"] },\n      { text: \"And it's been the ruin of many a poor boy\", chords: [\"Am\", \"C\", \"D\", \"F\"] },\n      { text: \"And God I know I'm one\", chords: [\"Am\", \"E\", \"Am\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"hallelujah\",\n    title: \"Hallelujah\",\n    artist: \"Leonard Cohen\",\n    genre: \"Folk\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I've heard there was a secret chord\", chords: [\"C\", \"Am\", \"C\", \"Am\"] },\n      { text: \"That David played and it pleased the Lord\", chords: [\"F\", \"G\", \"C\", \"G\"] },\n      { text: \"But you don't really care for music do you\", chords: [\"C\", \"F\", \"G\", \"Am\"] },\n      { text: \"It goes like this the fourth the fifth\", chords: [\"F\", \"Am\", \"F\", \"C\"] }\n    ]\n  },\n  {\n    id: \"country-roads\",\n    title: \"Country Roads\",\n    artist: \"John Denver\",\n    genre: \"Country\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Almost heaven West Virginia\", chords: [\"G\", \"Em\", \"D\", \"C\"] },\n      { text: \"Blue Ridge Mountains Shenandoah River\", chords: [\"G\", \"Em\", \"D\", \"C\"] },\n      { text: \"Life is old there older than the trees\", chords: [\"Em\", \"D\", \"G\", \"G\"] },\n      { text: \"Younger than the mountains blowing like a breeze\", chords: [\"Em\", \"D\", \"C\", \"G\"] }\n    ]\n  },\n  {\n    id: \"ring-of-fire\",\n    title: \"Ring of Fire\",\n    artist: \"Johnny Cash\",\n    genre: \"Country\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Love is a burning thing\", chords: [\"G\", \"C\", \"G\", \"G\"] },\n      { text: \"And it makes a fiery ring\", chords: [\"G\", \"C\", \"G\", \"G\"] },\n      { text: \"Bound by wild desire\", chords: [\"G\", \"D\", \"G\", \"G\"] },\n      { text: \"I fell into a ring of fire\", chords: [\"D\", \"C\", \"G\", \"G\"] }\n    ]\n  },\n  {\n    id: \"hurt\",\n    title: \"Hurt\",\n    artist: \"Johnny Cash\",\n    genre: \"Country\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I hurt myself today\", chords: [\"Am\", \"C\", \"D\", \"Am\"] },\n      { text: \"To see if I still feel\", chords: [\"C\", \"D\", \"Am\", \"Am\"] },\n      { text: \"I focus on the pain\", chords: [\"Am\", \"C\", \"D\", \"Am\"] },\n      { text: \"The only thing that's real\", chords: [\"C\", \"D\", \"Am\", \"Am\"] }\n    ]\n  },\n\n  // Blues & Jazz\n  {\n    id: \"blue-suede-shoes\",\n    title: \"Blue Suede Shoes\",\n    artist: \"Elvis Presley\",\n    genre: \"Blues\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Well it's one for the money\", chords: [\"A\", \"A\", \"A\", \"A\"] },\n      { text: \"Two for the show\", chords: [\"A\", \"A\", \"A\", \"A\"] },\n      { text: \"Three to get ready\", chords: [\"D\", \"D\", \"A\", \"A\"] },\n      { text: \"Now go cat go\", chords: [\"E\", \"D\", \"A\", \"E\"] }\n    ]\n  },\n  {\n    id: \"hound-dog\",\n    title: \"Hound Dog\",\n    artist: \"Elvis Presley\",\n    genre: \"Blues\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"You ain't nothing but a hound dog\", chords: [\"C\", \"C\", \"C\", \"C\"] },\n      { text: \"Cryin' all the time\", chords: [\"C\", \"C\", \"C\", \"C\"] },\n      { text: \"You ain't nothing but a hound dog\", chords: [\"F\", \"F\", \"C\", \"C\"] },\n      { text: \"Cryin' all the time\", chords: [\"G\", \"F\", \"C\", \"G\"] }\n    ]\n  },\n  {\n    id: \"summertime\",\n    title: \"Summertime\",\n    artist: \"George Gershwin\",\n    genre: \"Jazz\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Summertime and the living is easy\", chords: [\"Am\", \"E7\", \"Am\", \"Am\"] },\n      { text: \"Fish are jumping and the cotton is high\", chords: [\"Dm\", \"G\", \"C\", \"F\"] },\n      { text: \"Your daddy's rich and your mama's good looking\", chords: [\"Dm\", \"E7\", \"Am\", \"Am\"] },\n      { text: \"So hush little baby don't you cry\", chords: [\"E7\", \"E7\", \"Am\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"fly-me-to-moon\",\n    title: \"Fly Me to the Moon\",\n    artist: \"Frank Sinatra\",\n    genre: \"Jazz\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Fly me to the moon\", chords: [\"Am\", \"Dm\", \"G\", \"C\"] },\n      { text: \"Let me play among the stars\", chords: [\"F\", \"Dm\", \"E\", \"Am\"] },\n      { text: \"Let me see what spring is like\", chords: [\"Dm\", \"G\", \"Em\", \"A\"] },\n      { text: \"On Jupiter and Mars\", chords: [\"Dm\", \"G\", \"C\", \"C\"] }\n    ]\n  },\n\n  // Pop Modern\n  {\n    id: \"someone-like-you\",\n    title: \"Someone Like You\",\n    artist: \"Adele\",\n    genre: \"Pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"I heard that you're settled down\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"That you found a girl and you're married now\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"I heard that your dreams came true\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"Guess she gave you things I didn't give to you\", chords: [\"G\", \"D\", \"Em\", \"C\"] }\n    ]\n  },\n  {\n    id: \"rolling-in-deep\",\n    title: \"Rolling in the Deep\",\n    artist: \"Adele\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"There's a fire starting in my heart\", chords: [\"C\", \"G\", \"Bb\", \"F\"] },\n      { text: \"Reaching a fever pitch and it's bringing me out the dark\", chords: [\"C\", \"G\", \"Bb\", \"F\"] },\n      { text: \"Finally I can see you crystal clear\", chords: [\"C\", \"G\", \"Bb\", \"F\"] },\n      { text: \"Go ahead and sell me out and I'll lay your ship bare\", chords: [\"C\", \"G\", \"Bb\", \"F\"] }\n    ]\n  },\n  {\n    id: \"perfect\",\n    title: \"Perfect\",\n    artist: \"Ed Sheeran\",\n    genre: \"Pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"I found a love for me\", chords: [\"G\", \"Em\", \"C\", \"D\"] },\n      { text: \"Darling just dive right in and follow my lead\", chords: [\"G\", \"Em\", \"C\", \"D\"] },\n      { text: \"Well I found a girl beautiful and sweet\", chords: [\"G\", \"Em\", \"C\", \"D\"] },\n      { text: \"Oh I never knew you were the someone waiting for me\", chords: [\"G\", \"Em\", \"C\", \"D\"] }\n    ]\n  },\n  {\n    id: \"shape-of-you\",\n    title: \"Shape of You\",\n    artist: \"Ed Sheeran\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"The club isn't the best place to find a lover\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"So the bar is where I go\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Me and my friends at the table doing shots\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Drinking fast and then we talk slow\", chords: [\"Am\", \"F\", \"C\", \"G\"] }\n    ]\n  },\n  {\n    id: \"thinking-out-loud\",\n    title: \"Thinking Out Loud\",\n    artist: \"Ed Sheeran\",\n    genre: \"Pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"When your legs don't work like they used to before\", chords: [\"D\", \"A\", \"Em\", \"G\"] },\n      { text: \"And I can't sweep you off of your feet\", chords: [\"D\", \"A\", \"Em\", \"G\"] },\n      { text: \"Will your mouth still remember the taste of my love\", chords: [\"D\", \"A\", \"Em\", \"G\"] },\n      { text: \"Will your eyes still smile from your cheeks\", chords: [\"D\", \"A\", \"Em\", \"G\"] }\n    ]\n  },\n\n  // Alternative & Indie\n  {\n    id: \"radioactive\",\n    title: \"Radioactive\",\n    artist: \"Imagine Dragons\",\n    genre: \"Alternative\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I'm waking up to ash and dust\", chords: [\"Am\", \"C\", \"G\", \"D\"] },\n      { text: \"I wipe my brow and I sweat my rust\", chords: [\"Am\", \"C\", \"G\", \"D\"] },\n      { text: \"I'm breathing in the chemicals\", chords: [\"Am\", \"C\", \"G\", \"D\"] },\n      { text: \"I'm breaking in shaping up\", chords: [\"Am\", \"C\", \"G\", \"D\"] }\n    ]\n  },\n  {\n    id: \"demons\",\n    title: \"Demons\",\n    artist: \"Imagine Dragons\",\n    genre: \"Alternative\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"When the days are cold\", chords: [\"C\", \"G\", \"D\", \"Em\"] },\n      { text: \"And the cards all fold\", chords: [\"C\", \"G\", \"D\", \"Em\"] },\n      { text: \"And the saints we see\", chords: [\"C\", \"G\", \"D\", \"Em\"] },\n      { text: \"Are all made of gold\", chords: [\"C\", \"G\", \"D\", \"Em\"] }\n    ]\n  },\n  {\n    id: \"mr-brightside\",\n    title: \"Mr. Brightside\",\n    artist: \"The Killers\",\n    genre: \"Alternative\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I'm coming out of my cage\", chords: [\"D\", \"A\", \"Bm\", \"G\"] },\n      { text: \"And I've been doing just fine\", chords: [\"D\", \"A\", \"Bm\", \"G\"] },\n      { text: \"Gotta gotta be down\", chords: [\"D\", \"A\", \"Bm\", \"G\"] },\n      { text: \"Because I want it all\", chords: [\"D\", \"A\", \"Bm\", \"G\"] }\n    ]\n  },\n  {\n    id: \"zombie\",\n    title: \"Zombie\",\n    artist: \"The Cranberries\",\n    genre: \"Alternative\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Another head hangs lowly\", chords: [\"Em\", \"C\", \"G\", \"D\"] },\n      { text: \"Child is slowly taken\", chords: [\"Em\", \"C\", \"G\", \"D\"] },\n      { text: \"And the violence caused such silence\", chords: [\"Em\", \"C\", \"G\", \"D\"] },\n      { text: \"Who are we mistaken\", chords: [\"Em\", \"C\", \"G\", \"D\"] }\n    ]\n  },\n  {\n    id: \"creep\",\n    title: \"Creep\",\n    artist: \"Radiohead\",\n    genre: \"Alternative Rock\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"When you were here before\", chords: [\"G\", \"B\", \"C\", \"Cm\"] },\n      { text: \"Couldn't look you in the eye\", chords: [\"G\", \"B\", \"C\", \"Cm\"] },\n      { text: \"You're just like an angel\", chords: [\"G\", \"B\", \"C\", \"Cm\"] },\n      { text: \"Your skin makes me cry\", chords: [\"G\", \"B\", \"C\", \"Cm\"] }\n    ]\n  },\n\n  // Reggae & World\n  {\n    id: \"no-woman-no-cry\",\n    title: \"No Woman No Cry\",\n    artist: \"Bob Marley\",\n    genre: \"Reggae\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"No woman no cry\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"No woman no cry\", chords: [\"C\", \"F\", \"C\", \"G\"] },\n      { text: \"No woman no cry\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"No woman no cry\", chords: [\"C\", \"F\", \"C\", \"G\"] }\n    ]\n  },\n  {\n    id: \"three-little-birds\",\n    title: \"Three Little Birds\",\n    artist: \"Bob Marley\",\n    genre: \"Reggae\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Don't worry about a thing\", chords: [\"A\", \"A\", \"A\", \"A\"] },\n      { text: \"Cause every little thing gonna be alright\", chords: [\"D\", \"A\", \"A\", \"A\"] },\n      { text: \"Singin' don't worry about a thing\", chords: [\"A\", \"A\", \"A\", \"A\"] },\n      { text: \"Cause every little thing gonna be alright\", chords: [\"D\", \"A\", \"A\", \"A\"] }\n    ]\n  },\n  {\n    id: \"one-love\",\n    title: \"One Love\",\n    artist: \"Bob Marley\",\n    genre: \"Reggae\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"One love one heart\", chords: [\"Bb\", \"F\", \"Bb\", \"Bb\"] },\n      { text: \"Let's get together and feel all right\", chords: [\"Eb\", \"Bb\", \"F\", \"Bb\"] },\n      { text: \"Hear the children crying\", chords: [\"Bb\", \"F\", \"Bb\", \"Bb\"] },\n      { text: \"Hear the children crying\", chords: [\"Eb\", \"Bb\", \"F\", \"Bb\"] }\n    ]\n  },\n  {\n    id: \"la-bamba\",\n    title: \"La Bamba\",\n    artist: \"Ritchie Valens\",\n    genre: \"Latin\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Para bailar la bamba\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Para bailar la bamba se necesita\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Una poca de gracia\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Una poca de gracia para mi para ti\", chords: [\"C\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n\n  // Swedish Songs\n  {\n    id: \"sommaren-ar-kort\",\n    title: \"Sommaren är kort\",\n    artist: \"Lasse Berghagen\",\n    genre: \"Svensk pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Sommaren är kort här i Norden\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Bara några månader om året\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Men sen när den kommer\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Ja då är den ljuvlig och klar\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"gabriellas-sang\",\n    title: \"Gabriellas sång\",\n    artist: \"Helen Sjöholm\",\n    genre: \"Svensk pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Höga berg och mörka skogar\", chords: [\"Em\", \"Am\", \"D\", \"G\"] },\n      { text: \"Ligga mellan oss\", chords: [\"C\", \"D\", \"G\", \"G\"] },\n      { text: \"Kanske aldrig vi få se varann\", chords: [\"Em\", \"Am\", \"D\", \"G\"] },\n      { text: \"Men kom ihåg den natt\", chords: [\"C\", \"D\", \"G\", \"G\"] }\n    ]\n  },\n  {\n    id: \"sol-vind-och-vatten\",\n    title: \"Sol, vind och vatten\",\n    artist: \"Ted Gärdestad\",\n    genre: \"Svensk pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Sol vind och vatten\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Och en bit av en jord\", chords: [\"Em\", \"Am\", \"D\", \"G\"] },\n      { text: \"Det enda jag ville ha\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Stå med dig där vid fjord\", chords: [\"Em\", \"Am\", \"D\", \"G\"] }\n    ]\n  },\n  {\n    id: \"stockholm-i-mitt-hjarta\",\n    title: \"Stockholm i mitt hjärta\",\n    artist: \"Ulf Lundell\",\n    genre: \"Svensk rock\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Jag har varit i New York\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Sett på Broadway show\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Men Stockholm i mitt hjärta\", chords: [\"C\", \"F\", \"G\", \"Am\"] },\n      { text: \"Det kommer inget ställe överträffa\", chords: [\"F\", \"G\", \"C\", \"C\"] }\n    ]\n  },\n\n  // French Songs (5 typical French songs)\n  {\n    id: \"la-vie-en-rose\",\n    title: \"La Vie en Rose\",\n    artist: \"Édith Piaf\",\n    genre: \"Chanson française\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Quand il me prend dans ses bras\", chords: [\"C\", \"Am\", \"F\", \"G\"] },\n      { text: \"Il me parle tout bas\", chords: [\"C\", \"Am\", \"F\", \"G\"] },\n      { text: \"Je vois la vie en rose\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Il me dit des mots d'amour\", chords: [\"C\", \"Am\", \"F\", \"G\"] }\n    ]\n  },\n  {\n    id: \"non-je-ne-regrette-rien\",\n    title: \"Non, je ne regrette rien\",\n    artist: \"Édith Piaf\",\n    genre: \"Chanson française\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Non rien de rien\", chords: [\"Am\", \"Dm\", \"G\", \"C\"] },\n      { text: \"Non je ne regrette rien\", chords: [\"F\", \"C\", \"G\", \"Am\"] },\n      { text: \"Ni le bien qu'on m'a fait\", chords: [\"Am\", \"Dm\", \"G\", \"C\"] },\n      { text: \"Ni le mal tout ça m'est bien égal\", chords: [\"F\", \"C\", \"G\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"champs-elysees\",\n    title: \"Aux Champs-Élysées\",\n    artist: \"Joe Dassin\",\n    genre: \"Chanson française\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Je m'baladais sur l'avenue\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Le cœur ouvert à l'inconnu\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"J'avais envie de dire bonjour\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"À n'importe qui\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"sous-le-ciel-de-paris\",\n    title: \"Sous le ciel de Paris\",\n    artist: \"Yves Montand\",\n    genre: \"Chanson française\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Sous le ciel de Paris\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"S'envole une chanson\", chords: [\"C\", \"G\", \"C\", \"C\"] },\n      { text: \"Elle est née d'aujourd'hui\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"Dans le cœur d'un garçon\", chords: [\"C\", \"G\", \"C\", \"C\"] }\n    ]\n  },\n  {\n    id: \"je-ne-veux-pas-travailler\",\n    title: \"Je ne veux pas travailler\",\n    artist: \"Pink Martini\",\n    genre: \"Chanson française\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Je ne veux pas travailler\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Je ne veux pas déjeuner\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Je veux seulement l'oublier\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Et puis je fume\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n\n  // Spanish Songs (5 typical Spanish songs)\n  {\n    id: \"besame-mucho\",\n    title: \"Bésame Mucho\",\n    artist: \"Consuelo Velázquez\",\n    genre: \"Bolero\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Bésame bésame mucho\", chords: [\"Dm\", \"A7\", \"Dm\", \"Dm\"] },\n      { text: \"Como si fuera esta noche\", chords: [\"Gm\", \"A7\", \"Dm\", \"Dm\"] },\n      { text: \"La última vez\", chords: [\"A7\", \"A7\", \"Dm\", \"Dm\"] },\n      { text: \"Bésame bésame mucho\", chords: [\"Dm\", \"A7\", \"Dm\", \"Dm\"] }\n    ]\n  },\n  {\n    id: \"bamboleo\",\n    title: \"Bamboléo\",\n    artist: \"Gipsy Kings\",\n    genre: \"Rumba flamenca\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Bamboléo bamboléa\", chords: [\"Am\", \"Dm\", \"G\", \"C\"] },\n      { text: \"Porque mi vida yo la prefiero vivir así\", chords: [\"F\", \"E\", \"Am\", \"Am\"] },\n      { text: \"Bamboléo bamboléa\", chords: [\"Am\", \"Dm\", \"G\", \"C\"] },\n      { text: \"Porque mi vida yo la prefiero vivir así\", chords: [\"F\", \"E\", \"Am\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"manu-chao-me-gustas-tu\",\n    title: \"Me Gustas Tú\",\n    artist: \"Manu Chao\",\n    genre: \"Latin Rock\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Me gustas tú\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Me gustas tú\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Me gustas tú\", chords: [\"Em\", \"C\", \"D\", \"G\"] },\n      { text: \"Me gustas tú\", chords: [\"G\", \"C\", \"D\", \"G\"] }\n    ]\n  },\n  {\n    id: \"ojos-de-brujo\",\n    title: \"Vente Pa Madrid\",\n    artist: \"Ojos de Brujo\",\n    genre: \"Flamenco fusion\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Vente pa Madrid\", chords: [\"Em\", \"Am\", \"B7\", \"Em\"] },\n      { text: \"Que aquí se vive mejor\", chords: [\"C\", \"G\", \"B7\", \"Em\"] },\n      { text: \"Vente pa Madrid\", chords: [\"Em\", \"Am\", \"B7\", \"Em\"] },\n      { text: \"Y olvídate del dolor\", chords: [\"C\", \"G\", \"B7\", \"Em\"] }\n    ]\n  },\n  {\n    id: \"la-negra\",\n    title: \"La Negra\",\n    artist: \"Mariachi\",\n    genre: \"Mariachi\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Negrita de mis pesares\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Ojos de papel volando\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"A todos diles que sí\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Pero no les digas cuándo\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n\n  // German Songs (5 typical German songs)\n  {\n    id: \"99-luftballons\",\n    title: \"99 Luftballons\",\n    artist: \"Nena\",\n    genre: \"Deutsche Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Hast du etwas Zeit für mich\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"Dann singe ich ein Lied für dich\", chords: [\"C\", \"G\", \"F\", \"C\"] },\n      { text: \"Von 99 Luftballons\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"Auf ihrem Weg zum Horizont\", chords: [\"C\", \"G\", \"F\", \"C\"] }\n    ]\n  },\n  {\n    id: \"die-gedanken-sind-frei\",\n    title: \"Die Gedanken sind frei\",\n    artist: \"Traditionell\",\n    genre: \"Volkslied\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Die Gedanken sind frei\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Wer kann sie erraten\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Sie fliegen vorbei\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Wie nächtliche Schatten\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"du-hast\",\n    title: \"Du Hast\",\n    artist: \"Rammstein\",\n    genre: \"Industrial Metal\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Du hast\", chords: [\"Em\", \"Em\", \"Em\", \"Em\"] },\n      { text: \"Du hast mich\", chords: [\"Em\", \"Em\", \"Em\", \"Em\"] },\n      { text: \"Du hast mich gefragt\", chords: [\"C\", \"G\", \"Em\", \"Em\"] },\n      { text: \"Und ich hab nichts gesagt\", chords: [\"C\", \"G\", \"Em\", \"Em\"] }\n    ]\n  },\n  {\n    id: \"atemlos\",\n    title: \"Atemlos durch die Nacht\",\n    artist: \"Helene Fischer\",\n    genre: \"Schlager\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Atemlos durch die Nacht\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"Bis ein neuer Tag erwacht\", chords: [\"C\", \"G\", \"F\", \"C\"] },\n      { text: \"Atemlos durch die Nacht\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"Spür was Liebe mit uns macht\", chords: [\"C\", \"G\", \"F\", \"C\"] }\n    ]\n  },\n  {\n    id: \"major-tom\",\n    title: \"Major Tom\",\n    artist: \"Peter Schilling\",\n    genre: \"Neue Deutsche Welle\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Völlig losgelöst\", chords: [\"Em\", \"C\", \"G\", \"D\"] },\n      { text: \"Von der Erde\", chords: [\"Em\", \"C\", \"G\", \"D\"] },\n      { text: \"Schwebt das Raumschiff\", chords: [\"Em\", \"C\", \"G\", \"D\"] },\n      { text: \"Völlig schwerelos\", chords: [\"Em\", \"C\", \"G\", \"D\"] }\n    ]\n  },\n\n  // Italian Songs (5 typical Italian songs)\n  {\n    id: \"azzurro\",\n    title: \"Azzurro\",\n    artist: \"Adriano Celentano\",\n    genre: \"Canzone italiana\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Azzurro il pomeriggio è troppo azzurro\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"E lungo per me\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Mi accorgo di non avere più risorse\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Senza di te\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"bella-ciao\",\n    title: \"Bella Ciao\",\n    artist: \"Tradizionale\",\n    genre: \"Folk italiano\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Una mattina mi son svegliato\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"O bella ciao bella ciao bella ciao ciao ciao\", chords: [\"Am\", \"G\", \"Am\", \"Am\"] },\n      { text: \"Una mattina mi son svegliato\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"E ho trovato l'invasor\", chords: [\"F\", \"G\", \"Am\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"volare\",\n    title: \"Volare (Nel blu dipinto di blu)\",\n    artist: \"Domenico Modugno\",\n    genre: \"Canzone italiana\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Nel blu dipinto di blu\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Felice di stare lassù\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"E volavo volavo felice\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Più in alto del sole\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"caruso\",\n    title: \"Caruso\",\n    artist: \"Lucio Dalla\",\n    genre: \"Canzone d'autore\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Qui dove il mare luccica\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"E tira forte il vento\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Su una vecchia terrazza\", chords: [\"F\", \"C\", \"G\", \"Am\"] },\n      { text: \"Davanti al golfo di Surriento\", chords: [\"F\", \"C\", \"G\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"laura-non-ce\",\n    title: \"Laura non c'è\",\n    artist: \"Nek\",\n    genre: \"Pop italiano\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Laura non c'è\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"È andata via\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"Ha detto non voglio\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"La vita mia legata qui\", chords: [\"G\", \"D\", \"Em\", \"C\"] }\n    ]\n  },\n\n  // Portuguese Songs (5 typical Portuguese songs)\n  {\n    id: \"garota-de-ipanema\",\n    title: \"Garota de Ipanema\",\n    artist: \"Tom Jobim\",\n    genre: \"Bossa Nova\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Olha que coisa mais linda\", chords: [\"F\", \"G7\", \"Gm7\", \"C7\"] },\n      { text: \"Mais cheia de graça\", chords: [\"F\", \"F7\", \"Bb\", \"Bbm\"] },\n      { text: \"É ela menina\", chords: [\"F\", \"G7\", \"Gm7\", \"C7\"] },\n      { text: \"Que vem e que passa\", chords: [\"F\", \"Bb\", \"F\", \"F\"] }\n    ]\n  },\n  {\n    id: \"mas-que-nada\",\n    title: \"Mas Que Nada\",\n    artist: \"Jorge Ben Jor\",\n    genre: \"Samba\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Mas que nada\", chords: [\"Am\", \"Dm\", \"G\", \"C\"] },\n      { text: \"Sai da minha frente\", chords: [\"F\", \"E\", \"Am\", \"Am\"] },\n      { text: \"Que eu quero passar\", chords: [\"Am\", \"Dm\", \"G\", \"C\"] },\n      { text: \"Pois o samba está animado\", chords: [\"F\", \"E\", \"Am\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"aquarela-do-brasil\",\n    title: \"Aquarela do Brasil\",\n    artist: \"Ary Barroso\",\n    genre: \"Samba\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Brasil meu Brasil brasileiro\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Meu mulato inzoneiro\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Vou cantar-te nos meus versos\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Ô Brasil samba que dá\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"out-outro-lugar\",\n    title: \"Out'ro Lugar\",\n    artist: \"Skank\",\n    genre: \"Rock brasileiro\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Vou morar out'ro lugar\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Onde não me digam\", chords: [\"Em\", \"C\", \"D\", \"G\"] },\n      { text: \"Como eu devo andar\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Nem o que dizer\", chords: [\"Em\", \"C\", \"D\", \"G\"] }\n    ]\n  },\n  {\n    id: \"a-banda\",\n    title: \"A Banda\",\n    artist: \"Chico Buarque\",\n    genre: \"MPB\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Estava à toa na vida\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"O meu amor me chamou\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Pra ver a banda passar\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Cantando coisas de amor\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n\n  // Dutch Songs (5 typical Dutch songs)\n  {\n    id: \"tulpen-uit-amsterdam\",\n    title: \"Tulpen uit Amsterdam\",\n    artist: \"Vader Abraham\",\n    genre: \"Nederlandse muziek\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Tulpen uit Amsterdam\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Tulpen uit Amsterdam\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Breng ik mee voor jou\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Want je hebt mijn hart gestolen\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"een-roosje-m-n-roosje\",\n    title: \"Een roosje, m'n roosje\",\n    artist: \"Traditioneel\",\n    genre: \"Volkslied\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Een roosje m'n roosje\", chords: [\"C\", \"G\", \"C\", \"C\"] },\n      { text: \"Een roosje in het gras\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Ik ging zo graag wandelen\", chords: [\"C\", \"G\", \"C\", \"C\"] },\n      { text: \"Toen ik bij 't roosje was\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"brabant\",\n    title: \"Brabant\",\n    artist: \"Guus Meeuwis\",\n    genre: \"Nederlandse pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Brabant dat zijn de mensen\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Brabant dat is een gevoel\", chords: [\"Em\", \"C\", \"D\", \"G\"] },\n      { text: \"Brabant dat zijn de herinneringen\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Waar je nooit meer afscheid van doet\", chords: [\"Em\", \"C\", \"D\", \"G\"] }\n    ]\n  },\n  {\n    id: \"klein-klein-kleutertje\",\n    title: \"Klein klein kleutertje\",\n    artist: \"Kinderen voor Kinderen\",\n    genre: \"Kinderlied\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Klein klein kleutertje\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Wat ben je aan het doen\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Klein klein kleutertje\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Kom je even bij me\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"ik-leef-niet-meer-voor-jou\",\n    title: \"Ik leef niet meer voor jou\",\n    artist: \"Marco Borsato\",\n    genre: \"Nederlandse pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Ik leef niet meer voor jou\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Het leven gaat door\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Maar zonder jou\", chords: [\"F\", \"C\", \"G\", \"Am\"] },\n      { text: \"Is niets meer zoals het was\", chords: [\"F\", \"C\", \"G\", \"Am\"] }\n    ]\n  },\n\n  // Danish Songs (5 typical Danish songs)\n  {\n    id: \"der-er-et-yndigt-land\",\n    title: \"Der er et yndigt land\",\n    artist: \"Traditionel\",\n    genre: \"Folkevise\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Der er et yndigt land\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Det står med brede bøge\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Nær salten østerstrand\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Det bugter sig i bakke dal\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"i-øst-for-sol\",\n    title: \"I øst for sol og vest for måne\",\n    artist: \"Traditionel\",\n    genre: \"Folkevise\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I øst for sol og vest for måne\", chords: [\"Em\", \"Am\", \"D\", \"G\"] },\n      { text: \"Der ligger et land\", chords: [\"C\", \"D\", \"G\", \"G\"] },\n      { text: \"Som få har hørt det nævne\", chords: [\"Em\", \"Am\", \"D\", \"G\"] },\n      { text: \"Drømmenes land\", chords: [\"C\", \"D\", \"G\", \"G\"] }\n    ]\n  },\n  {\n    id: \"velkommen-til-vores-fest\",\n    title: \"Velkommen til vores fest\",\n    artist: \"Bamse og Kylling\",\n    genre: \"Børnemusik\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Velkommen til vores fest\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Hvor alle er velkommen\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Velkommen til vores fest\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Vi håber I hygger jer\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"lille-peter-edderkop\",\n    title: \"Lille Peter Edderkop\",\n    artist: \"Traditionel\",\n    genre: \"Børnesang\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Lille Peter Edderkop\", chords: [\"C\", \"G\", \"C\", \"C\"] },\n      { text: \"Kravlede op ad muren\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Så kom regnen ned\", chords: [\"C\", \"G\", \"C\", \"C\"] },\n      { text: \"Og Peter forsvandt\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"en-sæltand\",\n    title: \"En sæltand\",\n    artist: \"Poul Henningsen\",\n    genre: \"Vise\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"En sæltand blev skudt\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"På en flage af is\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Mens den lå og solede sig\", chords: [\"F\", \"C\", \"G\", \"Am\"] },\n      { text: \"Og drømte om fisk\", chords: [\"F\", \"C\", \"G\", \"Am\"] }\n    ]\n  },\n\n  // Norwegian Songs (5 typical Norwegian songs)\n  {\n    id: \"ja-vi-elsker\",\n    title: \"Ja, vi elsker dette landet\",\n    artist: \"Bjørnstjerne Bjørnson\",\n    genre: \"Folkevise\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Ja vi elsker dette landet\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Som det stiger frem\", chords: [\"Am\", \"F\", \"G\", \"C\"] },\n      { text: \"Furet værbitt over vannet\", chords: [\"C\", \"F\", \"G\", \"C\"] },\n      { text: \"Med de tusen hjem\", chords: [\"Am\", \"F\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"det-finnes-en-dag\",\n    title: \"Det finnes en dag\",\n    artist: \"Ole Paus\",\n    genre: \"Vise\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Det finnes en dag\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Da alt er forbi\", chords: [\"Em\", \"C\", \"D\", \"G\"] },\n      { text: \"Da står vi der nakne\", chords: [\"G\", \"C\", \"D\", \"G\"] },\n      { text: \"Og spør deg og meg\", chords: [\"Em\", \"C\", \"D\", \"G\"] }\n    ]\n  },\n  {\n    id: \"millioner-roser\",\n    title: \"Millioner roser\",\n    artist: \"Bjørn Eidsvåg\",\n    genre: \"Vise\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Tusen takk for alt du ga\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Tusen takk for hvert sekund\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Millioner roser ville ikke\", chords: [\"F\", \"C\", \"G\", \"Am\"] },\n      { text: \"Vært nok til å si\", chords: [\"F\", \"C\", \"G\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"du-ska-veta\",\n    title: \"Du ska' veta\",\n    artist: \"Kari Bremnes\",\n    genre: \"Vise\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Du ska' veta at jeg tenker på deg\", chords: [\"Em\", \"Am\", \"D\", \"G\"] },\n      { text: \"Når jeg ser på havet\", chords: [\"C\", \"D\", \"G\", \"G\"] },\n      { text: \"Du ska' veta at jeg tenker på deg\", chords: [\"Em\", \"Am\", \"D\", \"G\"] },\n      { text: \"Når jeg hører på regnet\", chords: [\"C\", \"D\", \"G\", \"G\"] }\n    ]\n  },\n  {\n    id: \"to-skritt-frem\",\n    title: \"To skritt frem\",\n    artist: \"DumDum Boys\",\n    genre: \"Norsk rock\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"To skritt frem\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"Og ett tilbake\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"Det er slik\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"Vi må lære å danse\", chords: [\"G\", \"D\", \"Em\", \"C\"] }\n    ]\n  },\n\n  // Christmas Songs\n  {\n    id: \"jingle-bells\",\n    title: \"Jingle Bells\",\n    artist: \"Traditional\",\n    genre: \"Christmas\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Jingle bells jingle bells\", chords: [\"C\", \"C\", \"C\", \"C\"] },\n      { text: \"Jingle all the way\", chords: [\"C\", \"C\", \"G\", \"G\"] },\n      { text: \"Oh what fun it is to ride\", chords: [\"F\", \"C\", \"Dm\", \"G\"] },\n      { text: \"In a one horse open sleigh\", chords: [\"C\", \"C\", \"C\", \"C\"] }\n    ]\n  },\n  {\n    id: \"silent-night\",\n    title: \"Silent Night\",\n    artist: \"Traditional\",\n    genre: \"Christmas\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Silent night holy night\", chords: [\"C\", \"C\", \"G\", \"C\"] },\n      { text: \"All is calm all is bright\", chords: [\"F\", \"C\", \"F\", \"C\"] },\n      { text: \"Round yon virgin mother and child\", chords: [\"F\", \"C\", \"F\", \"C\"] },\n      { text: \"Holy infant so tender and mild\", chords: [\"G\", \"C\", \"G\", \"C\"] }\n    ]\n  },\n  {\n    id: \"white-christmas\",\n    title: \"White Christmas\",\n    artist: \"Irving Berlin\",\n    genre: \"Christmas\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I'm dreaming of a white Christmas\", chords: [\"C\", \"Am\", \"Dm\", \"G\"] },\n      { text: \"Just like the ones I used to know\", chords: [\"Em\", \"Am\", \"Dm\", \"G\"] },\n      { text: \"Where the treetops glisten\", chords: [\"C\", \"C7\", \"F\", \"C\"] },\n      { text: \"And children listen\", chords: [\"Am\", \"D\", \"G\", \"G\"] }\n    ]\n  },\n  {\n    id: \"tomtarnas-julnatt\",\n    title: \"Tomtarnas julnatt\",\n    artist: \"Traditionell\",\n    genre: \"Julsång\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Midnatt råder och tystnad stor\", chords: [\"F\", \"Bb\", \"F\", \"C\"] },\n      { text: \"Över skog och nejd\", chords: [\"F\", \"Bb\", \"F\", \"F\"] },\n      { text: \"Endast tomtar i stugor och hus\", chords: [\"F\", \"Bb\", \"F\", \"C\"] },\n      { text: \"Vakta julens frid\", chords: [\"F\", \"Bb\", \"F\", \"F\"] }\n    ]\n  },\n\n  // Additional Modern Hits\n  {\n    id: \"blinding-lights\",\n    title: \"Blinding Lights\",\n    artist: \"The Weeknd\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I've been trying to call\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"I've been on my own for long enough\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"Maybe you can show me how to love maybe\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"I can't go on without you\", chords: [\"Am\", \"F\", \"C\", \"G\"] }\n    ]\n  },\n  {\n    id: \"bad-guy\",\n    title: \"Bad Guy\",\n    artist: \"Billie Eilish\",\n    genre: \"Alternative\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"White shirt now red my bloody nose\", chords: [\"Gm\", \"Gm\", \"Gm\", \"Gm\"] },\n      { text: \"Sleeping you're on your tippy toes\", chords: [\"Gm\", \"Gm\", \"Gm\", \"Gm\"] },\n      { text: \"Creeping around like no one knows\", chords: [\"Bb\", \"Bb\", \"Bb\", \"Bb\"] },\n      { text: \"Think you're so criminal\", chords: [\"Gm\", \"Gm\", \"Gm\", \"Gm\"] }\n    ]\n  },\n  {\n    id: \"watermelon-sugar\",\n    title: \"Watermelon Sugar\",\n    artist: \"Harry Styles\",\n    genre: \"Pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Tastes like strawberries on a summer evenin'\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"And it sounds just like a song\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"I want more berries and that summer feelin'\", chords: [\"Am\", \"F\", \"C\", \"G\"] },\n      { text: \"It's so wonderful and warm\", chords: [\"Am\", \"F\", \"C\", \"G\"] }\n    ]\n  },\n  {\n    id: \"levitating\",\n    title: \"Levitating\",\n    artist: \"Dua Lipa\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"If you wanna run away with me\", chords: [\"Bm\", \"G\", \"D\", \"A\"] },\n      { text: \"I know a galaxy and I can take you for a ride\", chords: [\"Bm\", \"G\", \"D\", \"A\"] },\n      { text: \"I had a premonition that we fell into a rhythm\", chords: [\"Bm\", \"G\", \"D\", \"A\"] },\n      { text: \"Where the music don't stop for life\", chords: [\"Bm\", \"G\", \"D\", \"A\"] }\n    ]\n  },\n\n  // Classic Rock Deep Cuts\n  {\n    id: \"stairway-to-heaven\",\n    title: \"Stairway to Heaven\",\n    artist: \"Led Zeppelin\",\n    genre: \"Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"There's a lady who's sure all that glitters is gold\", chords: [\"Am\", \"C\", \"D\", \"F\"], section: \"Vers 1\" },\n      { text: \"And she's buying a stairway to heaven\", chords: [\"Am\", \"C\", \"D\", \"F\"] },\n      { text: \"When she gets there she knows\", chords: [\"C\", \"D\", \"F\", \"Am\"], section: \"Vers 2\" },\n      { text: \"If the stores are all closed\", chords: [\"C\", \"D\", \"F\", \"Am\"] },\n      { text: \"With a word she can get what she came for\", chords: [\"C\", \"D\", \"F\", \"Am\"] },\n      { text: \"And she's buying a stairway to heaven\", chords: [\"Am\", \"C\", \"G\", \"Am\"], section: \"Refräng\" },\n      { text: \"There's a sign on the wall\", chords: [\"F\", \"Am\", \"F\", \"Am\"], section: \"Stick\" },\n      { text: \"But she wants to be sure\", chords: [\"F\", \"Am\", \"F\", \"Am\"] }\n    ]\n  },\n  {\n    id: \"purple-haze\",\n    title: \"Purple Haze\",\n    artist: \"Jimi Hendrix\",\n    genre: \"Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Purple haze all in my brain\", chords: [\"E\", \"G\", \"A\", \"E\"] },\n      { text: \"Lately things don't seem the same\", chords: [\"E\", \"G\", \"A\", \"E\"] },\n      { text: \"Actin' funny but I don't know why\", chords: [\"G\", \"A\", \"E\", \"E\"] },\n      { text: \"Excuse me while I kiss the sky\", chords: [\"G\", \"A\", \"E\", \"E\"] }\n    ]\n  },\n  {\n    id: \"layla\",\n    title: \"Layla\",\n    artist: \"Eric Clapton\",\n    genre: \"Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"What'll you do when you get lonely\", chords: [\"Dm\", \"Bb\", \"C\", \"Dm\"] },\n      { text: \"And nobody's waiting by your side\", chords: [\"Bb\", \"C\", \"Dm\", \"Dm\"] },\n      { text: \"You've been running and hiding much too long\", chords: [\"Dm\", \"Bb\", \"C\", \"Dm\"] },\n      { text: \"You know it's just your foolish pride\", chords: [\"Bb\", \"C\", \"Dm\", \"Dm\"] }\n    ]\n  },\n  {\n    id: \"smoke-on-water\",\n    title: \"Smoke on the Water\",\n    artist: \"Deep Purple\",\n    genre: \"Hard Rock\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"We all came out to Montreux\", chords: [\"G\", \"Bb\", \"C\", \"G\"] },\n      { text: \"On the Lake Geneva shoreline\", chords: [\"G\", \"Bb\", \"C\", \"G\"] },\n      { text: \"To make records with a mobile\", chords: [\"G\", \"Bb\", \"C\", \"G\"] },\n      { text: \"We didn't have much time\", chords: [\"F\", \"G\", \"G\", \"G\"] }\n    ]\n  },\n  {\n    id: \"comfortably-numb\",\n    title: \"Comfortably Numb\",\n    artist: \"Pink Floyd\",\n    genre: \"Progressive Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"Hello, is there anybody in there\", chords: [\"Bm\", \"A\", \"G\", \"Em\"], section: \"Vers 1\" },\n      { text: \"Just nod if you can hear me\", chords: [\"Bm\", \"A\", \"G\", \"Em\"] },\n      { text: \"Is there anyone home\", chords: [\"C\", \"G\", \"C\", \"G\"] },\n      { text: \"Come on now\", chords: [\"D\", \"A\", \"D\", \"A\"], section: \"Förrefräng\" },\n      { text: \"I hear you're feeling down\", chords: [\"D\", \"A\", \"D\", \"A\"] },\n      { text: \"I can ease your pain\", chords: [\"G\", \"D\", \"C\", \"G\"], section: \"Refräng\" },\n      { text: \"Get you on your feet again\", chords: [\"G\", \"D\", \"C\", \"G\"] },\n      { text: \"There is no pain, you are receding\", chords: [\"Bm\", \"A\", \"G\", \"Em\"], section: \"Vers 2\" }\n    ]\n  },\n  {\n    id: \"shallow\",\n    title: \"Shallow\",\n    artist: \"Lady Gaga & Bradley Cooper\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"Tell me somethin' girl\", chords: [\"Em\", \"C\", \"G\", \"D\"], section: \"Vers 1\" },\n      { text: \"Are you happy in this modern world\", chords: [\"Em\", \"C\", \"G\", \"D\"] },\n      { text: \"I'm falling\", chords: [\"Am\", \"D\", \"G\", \"C\"], section: \"Refräng\" },\n      { text: \"In all the good times\", chords: [\"G\", \"D\", \"Em\", \"C\"] }\n    ]\n  },\n  {\n    id: \"perfect\",\n    title: \"Perfect\",\n    artist: \"Ed Sheeran\",\n    genre: \"Pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"I found a love for me\", chords: [\"G\", \"Em\", \"C\", \"D\"], section: \"Vers 1\" },\n      { text: \"Darling just dive right in\", chords: [\"G\", \"Em\", \"C\", \"D\"] },\n      { text: \"Baby I'm dancing in the dark\", chords: [\"Em\", \"C\", \"G\", \"D\"], section: \"Refräng\" },\n      { text: \"With you between my arms\", chords: [\"Em\", \"C\", \"G\", \"D\"] }\n    ]\n  },\n  {\n    id: \"someone-like-you\",\n    title: \"Someone Like You\",\n    artist: \"Adele\",\n    genre: \"Ballad\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I heard that you're settled down\", chords: [\"G\", \"D\", \"Em\", \"C\"], section: \"Vers 1\" },\n      { text: \"That you found a girl\", chords: [\"G\", \"D\", \"Em\", \"C\"] },\n      { text: \"Never mind I'll find someone like you\", chords: [\"G\", \"D\", \"Em\", \"C\"], section: \"Refräng\" },\n      { text: \"I wish nothing but the best for you too\", chords: [\"G\", \"D\", \"Em\", \"C\"] }\n    ]\n  },\n  {\n    id: \"shape-of-you\",\n    title: \"Shape of You\",\n    artist: \"Ed Sheeran\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"The club isn't the best place\", chords: [\"Am\", \"C\", \"F\", \"Dm\"], section: \"Vers 1\" },\n      { text: \"To find a lover so the bar is where I go\", chords: [\"Am\", \"C\", \"F\", \"Dm\"] },\n      { text: \"I'm in love with the shape of you\", chords: [\"Am\", \"C\", \"F\", \"Dm\"], section: \"Refräng\" },\n      { text: \"We push and pull like a magnet do\", chords: [\"Am\", \"C\", \"F\", \"Dm\"] }\n    ]\n  },\n  {\n    id: \"all-of-me\",\n    title: \"All of Me\",\n    artist: \"John Legend\",\n    genre: \"Ballad\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"What would I do without your smart mouth\", chords: [\"F\", \"Dm\", \"Bb\", \"C\"], section: \"Vers 1\" },\n      { text: \"Drawing me in and you kicking me out\", chords: [\"F\", \"Dm\", \"Bb\", \"C\"] },\n      { text: \"All of me loves all of you\", chords: [\"F\", \"Dm\", \"Bb\", \"C\"], section: \"Refräng\" },\n      { text: \"Love your curves and all your edges\", chords: [\"F\", \"Dm\", \"Bb\", \"C\"] }\n    ]\n  },\n  {\n    id: \"thinking-out-loud\",\n    title: \"Thinking Out Loud\",\n    artist: \"Ed Sheeran\",\n    genre: \"Ballad\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"When your legs don't work like they used to before\", chords: [\"D\", \"A\", \"Em\", \"G\"], section: \"Vers 1\" },\n      { text: \"And I can't sweep you off of your feet\", chords: [\"D\", \"A\", \"Em\", \"G\"] },\n      { text: \"So honey now\", chords: [\"D\", \"A\", \"Em\", \"G\"], section: \"Refräng\" },\n      { text: \"Take me into your loving arms\", chords: [\"D\", \"A\", \"Em\", \"G\"] }\n    ]\n  },\n  {\n    id: \"blinding-lights\",\n    title: \"Blinding Lights\",\n    artist: \"The Weeknd\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"I've been tryna call\", chords: [\"Fm\", \"C\", \"Db\", \"Ab\"], section: \"Vers 1\" },\n      { text: \"I've been on my own for long enough\", chords: [\"Fm\", \"C\", \"Db\", \"Ab\"] },\n      { text: \"I feel like I'm just missing something\", chords: [\"Fm\", \"C\", \"Db\", \"Ab\"], section: \"Refräng\" },\n      { text: \"When you're gone\", chords: [\"Fm\", \"C\", \"Db\", \"Ab\"] }\n    ]\n  },\n  {\n    id: \"someone-you-loved\",\n    title: \"Someone You Loved\",\n    artist: \"Lewis Capaldi\",\n    genre: \"Ballad\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"I'm going under and this time\", chords: [\"C\", \"G\", \"Am\", \"F\"], section: \"Vers 1\" },\n      { text: \"I fear there's no one to save me\", chords: [\"C\", \"G\", \"Am\", \"F\"] },\n      { text: \"I'm falling like the stars above\", chords: [\"C\", \"G\", \"Am\", \"F\"], section: \"Refräng\" },\n      { text: \"I need somebody to love\", chords: [\"C\", \"G\", \"Am\", \"F\"] }\n    ]\n  },\n  {\n    id: \"bad-guy\",\n    title: \"Bad Guy\",\n    artist: \"Billie Eilish\",\n    genre: \"Pop\",\n    difficulty: \"Medium\",\n    lines: [\n      { text: \"White shirt now red\", chords: [\"Gm\", \"Gm\", \"Gm\", \"Gm\"], section: \"Vers 1\" },\n      { text: \"My bloody nose\", chords: [\"Gm\", \"Gm\", \"Gm\", \"Gm\"] },\n      { text: \"So you're a tough guy\", chords: [\"Gm\", \"Bb\", \"F\", \"Eb\"], section: \"Refräng\" },\n      { text: \"Like it really rough guy\", chords: [\"Gm\", \"Bb\", \"F\", \"Eb\"] }\n    ]\n  },\n  {\n    id: \"watermelon-sugar\",\n    title: \"Watermelon Sugar\",\n    artist: \"Harry Styles\",\n    genre: \"Pop\",\n    difficulty: \"Easy\",\n    lines: [\n      { text: \"Tastes like strawberries on a summer evenin'\", chords: [\"Dm\", \"Am\", \"Bb\", \"F\"], section: \"Vers 1\" },\n      { text: \"And it sounds just like a song\", chords: [\"Dm\", \"Am\", \"Bb\", \"F\"] },\n      { text: \"Watermelon sugar high\", chords: [\"Dm\", \"Am\", \"Bb\", \"F\"], section: \"Refräng\" },\n      { text: \"Watermelon sugar high\", chords: [\"Dm\", \"Am\", \"Bb\", \"F\"] }\n    ]\n  },\n  {\n    id: \"wish-you-were-here\",\n    title: \"Wish You Were Here\",\n    artist: \"Pink Floyd\",\n    genre: \"Progressive Rock\",\n    difficulty: \"Hard\",\n    lines: [\n      { text: \"So, so you think you can tell\", chords: [\"Em7\", \"A7sus4\", \"Em7\", \"A7sus4\"], section: \"Intro\" },\n      { text: \"Heaven from hell\", chords: [\"Em7\", \"A7sus4\", \"Em7\", \"A7sus4\"] },\n      { text: \"Blue skies from pain\", chords: [\"G\", \"D\", \"C\", \"Am\"], section: \"Vers 1\" },\n      { text: \"Can you tell a green field\", chords: [\"G\", \"D\", \"C\", \"Am\"] },\n      { text: \"From a cold steel rail\", chords: [\"G\", \"D\", \"C\", \"Am\"] },\n      { text: \"A smile from a veil\", chords: [\"G\", \"D\", \"C\", \"Am\"] },\n      { text: \"Do you think you can tell\", chords: [\"G\", \"D\", \"C\", \"Am\"] },\n      { text: \"How I wish, how I wish you were here\", chords: [\"C\", \"D\", \"Am\", \"G\"], section: \"Refräng\" }\n    ]\n  }\n];\n\nexport const SongSelector = ({ onSongSelect }: SongSelectorProps = {}) => {\n  const { t, language } = useLanguage();\n  const [selectedSong, setSelectedSong] = useState<string>(() => {\n    const saved = localStorage.getItem(\"selectedSong\");\n    // Set default based on language\n    const defaultSong = language === 'sv' ? \"blinka-lilla-stjarna\" : \"twinkle\";\n    return saved || defaultSong;\n  });\n  const [filterGenre, setFilterGenre] = useState<string>(\"all\");\n  const [filterDifficulty, setFilterDifficulty] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n\n  const genres = [\"all\", ...Array.from(new Set(availableSongs.map(song => song.genre)))].sort();\n  const difficulties = [\"all\", \"Easy\", \"Medium\", \"Hard\"];\n\n  const filteredSongs = availableSongs.filter(song => {\n    const genreMatch = filterGenre === \"all\" || song.genre === filterGenre;\n    const difficultyMatch = filterDifficulty === \"all\" || song.difficulty === filterDifficulty;\n    const searchMatch = searchQuery === \"\" || \n      song.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      song.artist.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    return genreMatch && difficultyMatch && searchMatch;\n  });\n\n  \n\n  const handleSongSelect = (songId: string) => {\n    setSelectedSong(songId);\n    localStorage.setItem(\"selectedSong\", songId);\n    \n    // Store the selected song data\n    const song = availableSongs.find(s => s.id === songId);\n    if (song) {\n      localStorage.setItem(\"selectedSongData\", JSON.stringify(song));\n      // Trigger song change event to update other components\n      window.dispatchEvent(new CustomEvent('songChanged'));\n      \n      // Call the onSongSelect callback to close the dialog\n      onSongSelect?.();\n    }\n  };\n\n  // Initialize default song based on language\n  useEffect(() => {\n    if (!localStorage.getItem(\"selectedSongData\")) {\n      const defaultSongId = language === 'sv' ? \"blinka-lilla-stjarna\" : \"twinkle\";\n      const defaultSong = availableSongs.find(s => s.id === defaultSongId);\n      if (defaultSong) {\n        localStorage.setItem(\"selectedSongData\", JSON.stringify(defaultSong));\n        localStorage.setItem(\"selectedSong\", defaultSongId);\n        setSelectedSong(defaultSongId);\n      }\n    }\n  }, [language]);\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\": return \"bg-green-500/20 text-green-700 dark:text-green-300\";\n      case \"Medium\": return \"bg-yellow-500/20 text-yellow-700 dark:text-yellow-300\";\n      case \"Hard\": return \"bg-red-500/20 text-red-700 dark:text-red-300\";\n      default: return \"bg-gray-500/20 text-gray-700 dark:text-gray-300\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Filters */}\n      <div className=\"flex gap-4\">\n        <div>\n          <label className=\"text-sm font-medium text-muted-foreground mb-2 block\">\n            {t(\"songs.genre\")}\n          </label>\n          <select\n            value={filterGenre}\n            onChange={(e) => setFilterGenre(e.target.value)}\n            className=\"px-3 py-2 border border-border rounded-md bg-background text-foreground text-sm\"\n          >\n            {genres.map(genre => (\n              <option key={genre} value={genre}>\n                {genre === \"all\" ? t(\"songs.all.genres\") : genre}\n              </option>\n            ))}\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"text-sm font-medium text-muted-foreground mb-2 block\">\n            {t(\"songs.difficulty\")}\n          </label>\n          <select\n            value={filterDifficulty}\n            onChange={(e) => setFilterDifficulty(e.target.value)}\n            className=\"px-3 py-2 border border-border rounded-md bg-background text-foreground text-sm\"\n          >\n            {difficulties.map(difficulty => (\n              <option key={difficulty} value={difficulty}>\n                {difficulty === \"all\" ? t(\"songs.all.levels\") : difficulty}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Song List */}\n      <div className=\"grid gap-3 max-h-64 overflow-y-auto\" role=\"list\" aria-label={t(\"songs.songList\")}>\n        {filteredSongs.map((song) => (\n          <Card\n            key={song.id}\n            role=\"listitem\"\n            tabIndex={0}\n            className={`p-3 cursor-pointer transition-all duration-200 hover:shadow-md focus:outline-none focus:ring-2 focus:ring-accent ${\n              selectedSong === song.id \n                ? \"border-accent bg-accent/10\" \n                : \"border-border hover:border-accent/50\"\n            }`}\n            onClick={() => handleSongSelect(song.id)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                handleSongSelect(song.id);\n              }\n            }}\n            aria-label={`${song.title} by ${song.artist}, ${song.genre}, ${song.difficulty}`}\n          >\n            <div className=\"flex justify-between items-start mb-2\">\n              <div>\n                <h3 className=\"text-sm font-semibold text-foreground\">{song.title}</h3>\n                <p className=\"text-xs text-muted-foreground\">{song.artist}</p>\n              </div>\n              <div className=\"flex gap-1\">\n                <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\n                  {song.genre}\n                </Badge>\n                <Badge className={`text-xs px-2 py-0 ${getDifficultyColor(song.difficulty)}`}>\n                  {song.difficulty}\n                </Badge>\n              </div>\n            </div>\n            \n            {/* Preview of chord progression */}\n            <div className=\"text-xs text-muted-foreground\">\n              <div className=\"flex gap-1 flex-wrap\">\n                {song.lines[0]?.chords.slice(0, 4).map((chord, index) => (\n                  <span key={index} className=\"px-1 py-0.5 bg-accent/20 rounded text-xs\">\n                    {chord}\n                  </span>\n                ))}\n                {song.lines.length > 1 && (\n                  <span className=\"text-muted-foreground\">...</span>\n                )}\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {filteredSongs.length === 0 && (\n        <div className=\"text-center py-4 text-muted-foreground text-sm\">\n          {t(\"songs.no.results\")}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/SongText.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":9,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { transposeChordName } from \"@/lib/chordSystem\";\nimport { FullscreenSongText } from \"./FullscreenSongText\";\nimport { Expand } from \"lucide-react\";\n\ninterface SongTextProps {\n  selectedChord?: { name: string } | null;\n  transposition?: number;\n}\n\nexport const SongText = ({ selectedChord, initialChord, transposition = 0 }: SongTextProps & { initialChord?: string }) => {\n  const languageContext = useLanguage();\n  const t = languageContext?.t || ((key: string) => key);\n  const [currentLine, setCurrentLine] = useState(0);\n  const [chordProgress, setChordProgress] = useState(0);\n  const [isFullscreenOpen, setIsFullscreenOpen] = useState(false);\n  \n  // Default song - always use this first\n  const defaultSong = {\n    title: \"Twinkle Twinkle Little Star\",\n    lines: [\n      { text: \"Twinkle twinkle little star\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Vers 1\" },\n      { text: \"How I wonder what you are\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Up above the world so high\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Vers 2\" },\n      { text: \"Like a diamond in the sky\", chords: [\"F\", \"C\", \"G\", \"C\"] },\n      { text: \"Twinkle twinkle little star\", chords: [\"C\", \"F\", \"C\", \"G\"], section: \"Refräng\" },\n      { text: \"How I wonder what you are\", chords: [\"F\", \"C\", \"G\", \"C\"] }\n    ]\n  };\n\n  const [songData, setSongData] = useState(defaultSong);\n\n  // Load song from localStorage and listen for changes\n  useEffect(() => {\n    const loadSong = () => {\n      const saved = localStorage.getItem(\"selectedSongData\");\n      if (saved) {\n        try {\n          const parsedSong = JSON.parse(saved);\n          setSongData(parsedSong);\n          // Reset progression when song changes\n          setCurrentLine(0);\n          setChordProgress(0);\n        } catch (error) {\n          // Error parsing saved song, using default\n          setSongData(defaultSong);\n        }\n      }\n    };\n\n    // Load initial song\n    loadSong();\n\n    // Listen for song changes\n    const handleSongChange = () => {\n      loadSong();\n    };\n    \n    window.addEventListener('songChanged', handleSongChange);\n    return () => window.removeEventListener('songChanged', handleSongChange);\n  }, []);\n\n  // Use the robust transposition system\n  const transposeChord = (chord: string, semitones: number): string => {\n    return transposeChordName(chord, semitones);\n  };\n\n  const songLines = songData.lines;\n\n  // Track chord progression\n  useEffect(() => {\n    if (!selectedChord || currentLine >= songLines.length) return;\n    \n    const currentLineChords = songLines[currentLine].chords;\n    const expectedChord = currentLineChords[chordProgress];\n    \n    // Get the original chord name by transposing back\n    const originalSelectedChord = transposeChord(selectedChord.name, -transposition);\n    \n    if (originalSelectedChord === expectedChord) {\n      if (chordProgress < currentLineChords.length - 1) {\n        // Move to next chord in current line\n        setChordProgress(prev => prev + 1);\n      } else {\n        // Move to next line\n        setCurrentLine(prev => prev + 1);\n        setChordProgress(0);\n      }\n    }\n  }, [selectedChord, currentLine, chordProgress, songLines, transposition]);\n\n  const resetSong = () => {\n    setCurrentLine(0);\n    setChordProgress(0);\n  };\n\n  // Show current and next line\n  const visibleLines = songLines.slice(currentLine, currentLine + 2);\n\n  return (\n    <>\n      <Card \n        className=\"bg-background/50 border border-border/50 p-2 mb-2\"\n      >\n        <div className=\"flex justify-between items-center mb-2\">\n          <div className=\"text-xs text-muted-foreground\">\n            {songData.title} - Rad {currentLine + 1} av {songLines.length}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={(e) => {\n              e.stopPropagation();\n              resetSong();\n            }} className=\"h-6 px-2 text-xs\">\n              <svg className=\"h-3 w-3\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"/>\n                <path d=\"M21 3v5h-5\"/>\n                <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"/>\n                <path d=\"M3 21v-5h5\"/>\n              </svg>\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={(e) => {\n              e.stopPropagation();\n              setIsFullscreenOpen(true);\n            }} className=\"h-6 px-2 text-xs\">\n              <Expand className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          {visibleLines.map((line, lineIndex) => {\n            const actualLineIndex = currentLine + lineIndex;\n            const isCurrentLine = lineIndex === 0;\n            \n            return (\n              <div key={actualLineIndex} className={`relative ${!isCurrentLine ? 'opacity-60' : ''}`}>\n                {/* Section label */}\n                {line.section && (\n                  <div className=\"text-xs font-medium text-accent mb-1 uppercase tracking-wide\">\n                    {line.section}\n                  </div>\n                )}\n                {/* Chord line */}\n                <div className=\"relative h-4 mb-0.5\">\n                  {line.chords.map((chord, chordIndex) => {\n                    const isCurrentChord = isCurrentLine && chordIndex === chordProgress;\n                    const isPlayedChord = isCurrentLine && chordIndex < chordProgress;\n                    \n                    return (\n                      <span\n                        key={chordIndex}\n                        className={`\n                          absolute text-xs font-semibold transition-all duration-200 mr-4\n                          ${isCurrentChord \n                            ? \"text-accent scale-110\" \n                            : isPlayedChord\n                            ? \"text-muted-foreground line-through\"\n                            : \"text-primary\"\n                          }\n                        `}\n                        style={{ left: `${chordIndex * 4}rem` }}\n                      >\n                        {transposeChord(chord, transposition)}\n                      </span>\n                    );\n                  })}\n                </div>\n                \n                {/* Text line */}\n                <div className=\"text-foreground font-medium text-sm leading-tight\">\n                  {line.text}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </Card>\n\n      <FullscreenSongText\n        isOpen={isFullscreenOpen}\n        onClose={() => setIsFullscreenOpen(false)}\n        selectedChord={selectedChord}\n        transposition={transposition}\n      />\n    </>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/accordion.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":10,"column":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item ref={ref} className={cn(\"border-b\", className)} {...props} />\n));\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n));\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n));\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/alert-dialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":14,"column":56}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)} {...props} />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props} />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: \"outline\" }), \"mt-2 sm:mt-0\", className)}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/alert.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":2,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive: \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div ref={ref} role=\"alert\" className={cn(alertVariants({ variant }), className)} {...props} />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h5 ref={ref} className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)} {...props} />\n  ),\n);\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"text-sm [&_p]:leading-relaxed\", className)} {...props} />\n  ),\n);\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/avatar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":7,"column":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\", className)}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image ref={ref} className={cn(\"aspect-square h-full w-full\", className)} {...props} />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\"flex h-full w-full items-center justify-center rounded-full bg-muted\", className)}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/badge.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":2,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/breadcrumb.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier 'React' has already been declared","line":9,"column":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode;\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />);\nBreadcrumb.displayName = \"Breadcrumb\";\n\nconst BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<\"ol\">>(\n  ({ className, ...props }, ref) => (\n    <ol\n      ref={ref}\n      className={cn(\n        \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nBreadcrumbList.displayName = \"BreadcrumbList\";\n\nconst BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<\"li\">>(\n  ({ className, ...props }, ref) => (\n    <li ref={ref} className={cn(\"inline-flex items-center gap-1.5\", className)} {...props} />\n  ),\n);\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean;\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return <Comp ref={ref} className={cn(\"transition-colors hover:text-foreground\", className)} {...props} />;\n});\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\n\nconst BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<\"span\">>(\n  ({ className, ...props }, ref) => (\n    <span\n      ref={ref}\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"font-normal text-foreground\", className)}\n      {...props}\n    />\n  ),\n);\nBreadcrumbPage.displayName = \"BreadcrumbPage\";\n\nconst BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<\"li\">) => (\n  <li role=\"presentation\" aria-hidden=\"true\" className={cn(\"[&>svg]:size-3.5\", className)} {...props}>\n    {children ?? <ChevronRight />}\n  </li>\n);\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n\nconst BreadcrumbEllipsis = ({ className, ...props }: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n);\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\";\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/button.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":3,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/calendar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token type","line":8,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell: \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(buttonVariants({ variant: \"ghost\" }), \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle: \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/card.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier 'React' has already been declared","line":5,"column":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", className)} {...props} />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n  ),\n);\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h3 ref={ref} className={cn(\"text-2xl font-semibold leading-none tracking-tight\", className)} {...props} />\n  ),\n);\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n  ),\n);\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />,\n);\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n  ),\n);\nCardFooter.displayName = \"CardFooter\";\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/carousel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token UseEmblaCarouselType","line":2,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport useEmblaCarousel, { type UseEmblaCarouselType } from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: \"horizontal\" | \"vertical\";\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>(\n  ({ orientation = \"horizontal\", opts, setApi, plugins, className, children, ...props }, ref) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins,\n    );\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return;\n      }\n\n      setCanScrollPrev(api.canScrollPrev());\n      setCanScrollNext(api.canScrollNext());\n    }, []);\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev();\n    }, [api]);\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext();\n    }, [api]);\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault();\n          scrollPrev();\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault();\n          scrollNext();\n        }\n      },\n      [scrollPrev, scrollNext],\n    );\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return;\n      }\n\n      setApi(api);\n    }, [api, setApi]);\n\n    React.useEffect(() => {\n      if (!api) {\n        return;\n      }\n\n      onSelect(api);\n      api.on(\"reInit\", onSelect);\n      api.on(\"select\", onSelect);\n\n      return () => {\n        api?.off(\"select\", onSelect);\n      };\n    }, [api, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation: orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  },\n);\nCarousel.displayName = \"Carousel\";\n\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel();\n\n    return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn(\"flex\", orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", className)}\n          {...props}\n        />\n      </div>\n    );\n  },\n);\nCarouselContent.displayName = \"CarouselContent\";\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel();\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn(\"min-w-0 shrink-0 grow-0 basis-full\", orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\", className)}\n        {...props}\n      />\n    );\n  },\n);\nCarouselItem.displayName = \"CarouselItem\";\n\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          \"absolute h-8 w-8 rounded-full\",\n          orientation === \"horizontal\"\n            ? \"-left-12 top-1/2 -translate-y-1/2\"\n            : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n          className,\n        )}\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        {...props}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Previous slide</span>\n      </Button>\n    );\n  },\n);\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          \"absolute h-8 w-8 rounded-full\",\n          orientation === \"horizontal\"\n            ? \"-right-12 top-1/2 -translate-y-1/2\"\n            : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n          className,\n        )}\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        {...props}\n      >\n        <ArrowRight className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Next slide</span>\n      </Button>\n    );\n  },\n);\nCarouselNext.displayName = \"CarouselNext\";\n\nexport { type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/chart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token as","line":7,"column":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig;\n    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>[\"children\"];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = \"Chart\";\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: \"line\" | \"dot\" | \"dashed\";\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return <div className={cn(\"font-medium\", labelClassName)}>{labelFormatter(value, payload)}</div>;\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className,\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\",\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\", {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\": indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          })}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\",\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">{itemConfig?.label || item.name}</span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = \"ChartTooltip\";\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(({ className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey }, ref) => {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"flex items-center justify-center gap-4\", verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\", className)}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\")}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\nChartLegendContent.displayName = \"ChartLegend\";\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload && typeof payload.payload === \"object\" && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === \"string\") {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/checkbox.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":8,"column":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { Check } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/command.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token DialogProps","line":2,"column":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Search } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {\n  // Extend with additional props if needed\n}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />);\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/context-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":20,"column":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ContextMenu = ContextMenuPrimitive.Root;\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger;\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group;\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal;\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub;\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n));\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n));\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n));\nContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName;\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n));\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold text-foreground\", inset && \"pl-8\", className)}\n    {...props}\n  />\n));\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-border\", className)} {...props} />\n));\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;\n\nconst ContextMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nContextMenuShortcut.displayName = \"ContextMenuShortcut\";\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/dialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":16,"column":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-accent data-[state=open]:text-muted-foreground hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/drawer.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":6,"column":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Drawer as DrawerPrimitive } from \"vaul\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Drawer = ({ shouldScaleBackground = true, ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n);\nDrawer.displayName = \"Drawer\";\n\nconst DrawerTrigger = DrawerPrimitive.Trigger;\n\nconst DrawerPortal = DrawerPrimitive.Portal;\n\nconst DrawerClose = DrawerPrimitive.Close;\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay ref={ref} className={cn(\"fixed inset-0 z-50 bg-black/80\", className)} {...props} />\n));\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n));\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)} {...props} />\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)} {...props} />\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/dropdown-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":20,"column":60}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent focus:bg-accent\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)} {...props} />;\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/form.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token FormFieldContextValue","line":11,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\n\nconst FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const id = React.useId();\n\n    return (\n      <FormItemContext.Provider value={{ id }}>\n        <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n      </FormItemContext.Provider>\n    );\n  },\n);\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return <Label ref={ref} className={cn(error && \"text-destructive\", className)} htmlFor={formItemId} {...props} />;\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(\n  ({ ...props }, ref) => {\n    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n    return (\n      <Slot\n        ref={ref}\n        id={formItemId}\n        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\n        aria-invalid={!!error}\n        {...props}\n      />\n    );\n  },\n);\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => {\n    const { formDescriptionId } = useFormField();\n\n    return <p ref={ref} id={formDescriptionId} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />;\n  },\n);\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, children, ...props }, ref) => {\n    const { error, formMessageId } = useFormField();\n    const body = error ? String(error?.message) : children;\n\n    if (!body) {\n      return null;\n    }\n\n    return (\n      <p ref={ref} id={formMessageId} className={cn(\"text-sm font-medium text-destructive\", className)} {...props}>\n        {body}\n      </p>\n    );\n  },\n);\nFormMessage.displayName = \"FormMessage\";\n\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/hover-card.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":11,"column":54}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst HoverCard = HoverCardPrimitive.Root;\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger;\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName;\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/input-otp.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":7,"column":68}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { OTPInput, OTPInputContext } from \"input-otp\";\nimport { Dot } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst InputOTP = React.forwardRef<React.ElementRef<typeof OTPInput>, React.ComponentPropsWithoutRef<typeof OTPInput>>(\n  ({ className, containerClassName, ...props }, ref) => (\n    <OTPInput\n      ref={ref}\n      containerClassName={cn(\"flex items-center gap-2 has-[:disabled]:opacity-50\", containerClassName)}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  ),\n);\nInputOTP.displayName = \"InputOTP\";\n\nconst InputOTPGroup = React.forwardRef<React.ElementRef<\"div\">, React.ComponentPropsWithoutRef<\"div\">>(\n  ({ className, ...props }, ref) => <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />,\n);\nInputOTPGroup.displayName = \"InputOTPGroup\";\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext);\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink h-4 w-px bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  );\n});\nInputOTPSlot.displayName = \"InputOTPSlot\";\n\nconst InputOTPSeparator = React.forwardRef<React.ElementRef<\"div\">, React.ComponentPropsWithoutRef<\"div\">>(\n  ({ ...props }, ref) => (\n    <div ref={ref} role=\"separator\" {...props}>\n      <Dot />\n    </div>\n  ),\n);\nInputOTPSeparator.displayName = \"InputOTPSeparator\";\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/input.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier 'React' has already been declared","line":5,"column":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/label.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":3,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst labelVariants = cva(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\");\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/menubar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":18,"column":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst MenubarMenu = MenubarPrimitive.Menu;\n\nconst MenubarGroup = MenubarPrimitive.Group;\n\nconst MenubarPortal = MenubarPrimitive.Portal;\n\nconst MenubarSub = MenubarPrimitive.Sub;\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup;\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\", className)}\n    {...props}\n  />\n));\nMenubar.displayName = MenubarPrimitive.Root.displayName;\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n));\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(({ className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props }, ref) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </MenubarPrimitive.Portal>\n));\nMenubarContent.displayName = MenubarPrimitive.Content.displayName;\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nMenubarItem.displayName = MenubarPrimitive.Item.displayName;\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n));\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n));\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props}\n  />\n));\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName;\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n));\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;\n\nconst MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nMenubarShortcut.displayname = \"MenubarShortcut\";\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":9,"column":56}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\"relative z-10 flex max-w-max flex-1 items-center justify-center\", className)}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\"group flex flex-1 list-none items-center justify-center space-x-1\", className)}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/pagination.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":7,"column":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\";\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n);\nPagination.displayName = \"Pagination\";\n\nconst PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(\n  ({ className, ...props }, ref) => (\n    <ul ref={ref} className={cn(\"flex flex-row items-center gap-1\", className)} {...props} />\n  ),\n);\nPaginationContent.displayName = \"PaginationContent\";\n\nconst PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n));\nPaginationItem.displayName = \"PaginationItem\";\n\ntype PaginationLinkProps = {\n  isActive?: boolean;\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">;\n\nconst PaginationLink = ({ className, isActive, size = \"icon\", ...props }: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className,\n    )}\n    {...props}\n  />\n);\nPaginationLink.displayName = \"PaginationLink\";\n\nconst PaginationPrevious = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to previous page\" size=\"default\" className={cn(\"gap-1 pl-2.5\", className)} {...props}>\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n);\nPaginationPrevious.displayName = \"PaginationPrevious\";\n\nconst PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to next page\" size=\"default\" className={cn(\"gap-1 pr-2.5\", className)} {...props}>\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n);\nPaginationNext.displayName = \"PaginationNext\";\n\nconst PaginationEllipsis = ({ className, ...props }: React.ComponentProps<\"span\">) => (\n  <span aria-hidden className={cn(\"flex h-9 w-9 items-center justify-center\", className)} {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n);\nPaginationEllipsis.displayName = \"PaginationEllipsis\";\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/popover.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":11,"column":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/progress.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":7,"column":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\"relative h-4 w-full overflow-hidden rounded-full bg-secondary\", className)}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n));\nProgress.displayName = ProgressPrimitive.Root.displayName;\n\nexport { Progress };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/radio-group.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":8,"column":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return <RadioGroupPrimitive.Root className={cn(\"grid gap-2\", className)} {...props} ref={ref} />;\n});\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName;\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n});\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;\n\nexport { RadioGroup, RadioGroupItem };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/resizable.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":6,"column":53}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GripVertical } from \"lucide-react\";\nimport * as ResizablePrimitive from \"react-resizable-panels\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ResizablePanelGroup = ({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\", className)}\n    {...props}\n  />\n);\n\nconst ResizablePanel = ResizablePrimitive.Panel;\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean;\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className,\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n);\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/scroll-area.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":7,"column":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root ref={ref} className={cn(\"relative overflow-hidden\", className)} {...props}>\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">{children}</ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" && \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" && \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/select.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":14,"column":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props} />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/separator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":7,"column":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(({ className, orientation = \"horizontal\", decorative = true, ...props }, ref) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\"shrink-0 bg-border\", orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\", className)}\n    {...props}\n  />\n));\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/sheet.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":2,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Sheet = SheetPrimitive.Root;\n\nconst SheetTrigger = SheetPrimitive.Trigger;\n\nconst SheetClose = SheetPrimitive.Close;\n\nconst SheetPortal = SheetPrimitive.Portal;\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  },\n);\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps>(\n  ({ side = \"right\", className, children, ...props }, ref) => (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>\n        {children}\n        <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-secondary hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  ),\n);\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)} {...props} />\n);\nSheetHeader.displayName = \"SheetHeader\";\n\nconst SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\nSheetFooter.displayName = \"SheetFooter\";\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold text-foreground\", className)} {...props} />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetOverlay,\n  SheetPortal,\n  SheetTitle,\n  SheetTrigger,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/sidebar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token SidebarContext","line":22,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {\n  const isMobile = useIsMobile();\n  const [openMobile, setOpenMobile] = React.useState(false);\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen);\n  const open = openProp ?? _open;\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value;\n      if (setOpenProp) {\n        setOpenProp(openState);\n      } else {\n        _setOpen(openState);\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n    },\n    [setOpenProp, open],\n  );\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile]);\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault();\n        toggleSidebar();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar]);\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\";\n\n  const contextValue = React.useMemo<SidebarContext>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  );\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\", className)}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n});\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(({ side = \"left\", variant = \"sidebar\", collapsible = \"offcanvas\", className, children, ...props }, ref) => {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        className={cn(\"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\", className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"group peer hidden text-sidebar-foreground md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cn(\n          \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n        )}\n      />\n      <div\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n});\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(\n  ({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <Button\n        ref={ref}\n        data-sidebar=\"trigger\"\n        variant=\"ghost\"\n        size=\"icon\"\n        className={cn(\"h-7 w-7\", className)}\n        onClick={(event) => {\n          onClick?.(event);\n          toggleSidebar();\n        }}\n        {...props}\n      >\n        <PanelLeft />\n        <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n    );\n  },\n);\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\">>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex\",\n          \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n          \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n          \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n          \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n          \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<\"main\">>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        data-sidebar=\"input\"\n        className={cn(\n          \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"header\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"footer\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Separator\n        ref={ref}\n        data-sidebar=\"separator\"\n        className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"div\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-label\"\n        className={cn(\n          \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-action\"\n        className={cn(\n          \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          // Increases the hit area of the button on mobile.\n          \"after:absolute after:-inset-2 after:md:hidden\",\n          \"group-data-[collapsible=icon]:hidden\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} data-sidebar=\"group-content\" className={cn(\"w-full text-sm\", className)} {...props} />\n  ),\n);\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(({ className, ...props }, ref) => (\n  <ul ref={ref} data-sidebar=\"menu\" className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)} {...props} />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ className, ...props }, ref) => (\n  <li ref={ref} data-sidebar=\"menu-item\" className={cn(\"group/menu-item relative\", className)} {...props} />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(({ asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n  const { isMobile, state } = useSidebar();\n\n  const button = (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    };\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent side=\"right\" align=\"center\" hidden={state !== \"collapsed\" || isMobile} {...tooltip} />\n    </Tooltip>\n  );\n});\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ ...props }, ref) => (\n  <li ref={ref} {...props} />\n));\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/skeleton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":3,"column":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn(\"animate-pulse rounded-md bg-muted\", className)} {...props} />;\n}\n\nexport { Skeleton };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/slider.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":7,"column":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex w-full touch-none select-none items-center\", className)}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n));\nSlider.displayName = SliderPrimitive.Root.displayName;\n\nexport { Slider };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/sonner.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ToasterProps","line":4,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\";\nimport { Toaster as Sonner, toast } from \"sonner\";\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>;\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton: \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton: \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { Toaster, toast };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/switch.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":7,"column":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/table.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier 'React' has already been declared","line":5,"column":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table ref={ref} className={cn(\"w-full caption-bottom text-sm\", className)} {...props} />\n    </div>\n  ),\n);\nTable.displayName = \"Table\";\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />,\n);\nTableHeader.displayName = \"TableHeader\";\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody ref={ref} className={cn(\"[&_tr:last-child]:border-0\", className)} {...props} />\n  ),\n);\nTableBody.displayName = \"TableBody\";\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot ref={ref} className={cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className)} {...props} />\n  ),\n);\nTableFooter.displayName = \"TableFooter\";\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn(\"border-b transition-colors data-[state=selected]:bg-muted hover:bg-muted/50\", className)}\n      {...props}\n    />\n  ),\n);\nTableRow.displayName = \"TableRow\";\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nTableHead.displayName = \"TableHead\";\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td ref={ref} className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)} {...props} />\n  ),\n);\nTableCell.displayName = \"TableCell\";\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption ref={ref} className={cn(\"mt-4 text-sm text-muted-foreground\", className)} {...props} />\n  ),\n);\nTableCaption.displayName = \"TableCaption\";\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/tabs.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":9,"column":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/textarea.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":5,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  // Additional props can be added here\n}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/toast.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":3,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive: \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />;\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors group-[.destructive]:border-muted/40 hover:bg-secondary group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 group-[.destructive]:focus:ring-destructive disabled:pointer-events-none disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity group-hover:opacity-100 group-[.destructive]:text-red-300 hover:text-foreground group-[.destructive]:hover:text-red-50 focus:opacity-100 focus:outline-none focus:ring-2 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title ref={ref} className={cn(\"text-sm font-semibold\", className)} {...props} />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props} />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/toaster.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":8,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useToast } from \"@/hooks/use-toast\";\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from \"@/components/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && <ToastDescription>{description}</ToastDescription>}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/toggle-group.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":3,"column":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport { type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { toggleVariants } from \"@/components/ui/toggle\";\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: \"default\",\n  variant: \"default\",\n});\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root ref={ref} className={cn(\"flex items-center justify-center gap-1\", className)} {...props}>\n    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n));\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> & VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext);\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n});\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;\n\nexport { ToggleGroup, ToggleGroupItem };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/toggle.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token VariantProps","line":3,"column":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/tooltip.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ,","line":13,"column":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/contexts/GlobalAudioContext.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":3,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface GlobalAudioContextType {\n  isMuted: boolean;\n  toggleMute: () => void;\n  setMuted: (muted: boolean) => void;\n}\n\nconst GlobalAudioContext = createContext<GlobalAudioContextType | undefined>(undefined);\n\nexport const useGlobalAudio = () => {\n  const context = useContext(GlobalAudioContext);\n  if (!context) {\n    throw new Error('useGlobalAudio must be used within a GlobalAudioProvider');\n  }\n  return context;\n};\n\ninterface GlobalAudioProviderProps {\n  children: ReactNode;\n}\n\nexport const GlobalAudioProvider = ({ children }: GlobalAudioProviderProps) => {\n  const [isMuted, setIsMuted] = useState(false);\n\n  const toggleMute = () => {\n    setIsMuted(prev => !prev);\n  };\n\n  const setMuted = (muted: boolean) => {\n    setIsMuted(muted);\n  };\n\n  return (\n    <GlobalAudioContext.Provider value={{ isMuted, toggleMute, setMuted }}>\n      {children}\n    </GlobalAudioContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/contexts/LanguageContext.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token type","line":3,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\nexport type Language = \"sv\" | \"en\" | \"de\" | \"fr\" | \"es\" | \"it\" | \"pt\" | \"nl\" | \"da\" | \"no\";\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nconst translations: Record<Language, Record<string, string>> = {\n  sv: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Tryck på ackord och spela på strängarna\",\n    \"app.loading\": \"Laddar ljud...\",\n    \n    // Settings\n    \"settings.title\": \"Inställningar\",\n    \"settings.chords\": \"Ackordinställningar\",\n    \"settings.language\": \"Språk\",\n    \"settings.language.select\": \"Välj språk\",\n    \"settings.showSongText\": \"Visa låttext\",\n    \"settings.showSongTextDescription\": \"Visa låttext och ackord ovanför gitarren\",\n    \"settings.display\": \"Visning\",\n    \"settings.presets\": \"Förinställningar\",\n    \"settings.builder\": \"Byggare\",\n    \"settings.showAutoPlayer\": \"Visa auto-spelare\",\n    \"settings.showMetronome\": \"Visa metronom\",\n    \"settings.autoPlayChords\": \"Spela ackord automatiskt\",\n    \"settings.metronomeSettings\": \"Metronom inställningar\",\n    \"settings.autoPlayer\": \"Auto-spelare\",\n    \"settings.chordChangesEvery\": \"Ackordbyten sker var\",\n    \"settings.secondsBasedOnBPM\": \"sekund (baserat på BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Slag per minut)\",\n    \"settings.quickSelectBPM\": \"Snabbval BPM\",\n    \"settings.instrument\": \"Instrument\",\n    \"settings.instruments\": \"Instrument\",\n    \"settings.instrument.guitar\": \"Gitarr (Standardstämning)\",\n    \"settings.instrument.guitar-dropd\": \"Gitarr (Drop D-stämning)\",\n    \"settings.instrument.guitar-openg\": \"Gitarr (Öppen G-stämning)\",\n    \"settings.instrument.guitar-opend\": \"Gitarr (Öppen D-stämning)\",\n    \"settings.instrument.guitar-dadgad\": \"Gitarr (DADGAD-stämning)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Gitarr (Halvton lägre)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Gitarr (Helton lägre)\",\n    \"settings.instrument.bass\": \"Bas\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandolin\",\n    \"settings.instrument.octavemandolin\": \"Oktav-mandolin\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 strängar)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 strängar)\",\n    \"settings.primary\": \"Huvudinstrument\",\n    \"settings.setPrimary\": \"Gör till huvudinstrument\",\n     \n    // Transposition\n    \"transpose.label\": \"Transponering\",\n    \n    // 404 Page\n    \"notfound.message\": \"Hoppsan! Sidan kunde inte hittas\",\n    \"notfound.home\": \"Tillbaka till startsidan\",\n    \n    // Presets\n    \"presets.title\": \"Musikstil Presets\",\n    \"presets.more\": \"mer\",\n    \"presets.pop.name\": \"Pop/Rock Basic\",\n    \"presets.pop.description\": \"Klassiska pop- och rockackord\",\n    \"presets.blues.name\": \"Blues Progression\",\n    \"presets.blues.description\": \"12-bar blues och relaterade ackord\",\n    \"presets.jazz.name\": \"Jazz Standards\",\n    \"presets.jazz.description\": \"Jazzackord med utvidgade harmonier\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Country och folk-stilens ackord\",\n    \"presets.indie.name\": \"Indie/Alternative\",\n    \"presets.indie.description\": \"Moderna indie- och alternativackord\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Kraftfulla rockackord och powerchords\",\n    \n    // Chord tabs\n    \"chords.presets\": \"Presets\",\n    \"chords.library\": \"Bibliotek\",\n    \"chords.builder\": \"Skapa Ackord\",\n    \"chords.guide\": \"Guide\",\n    \n    // Chord builder\n    \"builder.theory\": \"Musikteori\",\n    \"builder.manual\": \"Manuell\",\n    \"builder.root\": \"Grundton\",\n    \"builder.type\": \"Ackordtyp\",\n    \"builder.generate\": \"Generera Ackord\",\n    \"builder.name\": \"Ackordnamn\",\n    \"builder.name.placeholder\": \"t.ex. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Bandposition (0 = öppen sträng)\",\n    \"builder.create\": \"Skapa Ackord\",\n    \"builder.error.name\": \"Ange ett namn för ackordet\",\n    \"builder.success\": \"Ackord skapat!\",\n    \"builder.success.desc\": \"har lagts till i biblioteket\",\n    \n    // Chord library\n    \"library.search\": \"Sök ackord\",\n    \"library.search.placeholder\": \"Skriv ackordnamn...\",\n    \"library.left\": \"Vänster sida\",\n    \"library.right\": \"Höger sida\",\n    \"library.available\": \"Tillgängliga Ackord\",\n    \"library.custom\": \"Anpassad\",\n    \"library.exists\": \"Ackord finns redan\",\n    \"library.exists.left\": \"finns redan på vänster sida\",\n    \"library.exists.right\": \"finns redan på höger sida\",\n    \"library.added\": \"Ackord tillagt\",\n    \"library.added.left\": \"har lagts till på vänster sida\",\n    \"library.added.right\": \"har lagts till på höger sida\",\n    \n    // Guide\n    \"guide.title\": \"Ackordguide\",\n    \"guide.subtitle\": \"Lär dig bygga ackord med olika färgningar och variationer\",\n    \"guide.basics\": \"Grunder\",\n    \"guide.extensions\": \"Färgningar\",\n    \"guide.alterations\": \"Alterationer\",\n    \"guide.examples\": \"Exempel\",\n    \n    // Chord types\n    \"chord.major\": \"Dur (Major)\",\n    \"chord.minor\": \"Moll (Minor)\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominant)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Dra på strängarna\",\n    \"guitar.chord.selected\": \"Valt ackord\",\n    \"guitar.chord.select\": \"Välj ett ackord\",\n    \"guitar.chord.play\": \"Klicka på strängarna för att spela\",\n    \n    // String names\n    \"string.e.high\": \"E (hög)\",\n    \"string.b\": \"B\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\", \n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (låg)\",\n    \n    // Songs\n    \"songs.genre\": \"Genre\",\n    \"songs.difficulty\": \"Svårighetsgrad\",\n    \"songs.all.genres\": \"Alla genrer\",\n    \"songs.all.levels\": \"Alla nivåer\",\n    \"songs.no.results\": \"Inga låtar hittades med de valda filtren.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Grundläggande Ackordtyper\",\n    \"guide.major\": \"Dur (Major)\",\n    \"guide.major.desc\": \"Glad, ljus\",\n    \"guide.minor\": \"Moll (Minor)\",\n    \"guide.minor.desc\": \"Sorglig, mörk\",\n    \"guide.sus2.desc\": \"Öppen, svävande\",\n    \"guide.sus4.desc\": \"Spänning, vill lösas\",\n    \"guide.extensions.title\": \"Färgningar (Extensions)\",\n    \"guide.sixth.desc\": \"Varm, jazzig\",\n    \"guide.seventh.desc\": \"Blues, dominant\",\n    \"guide.maj7.desc\": \"Sofistikerad, milt\",\n    \"guide.ninth.desc\": \"Rikt, komplext\",\n    \"guide.add9.desc\": \"Modern, luftig\",\n    \"guide.alterations.title\": \"Alterationer\",\n    \"guide.flat5.desc\": \"Mörk, instabil\",\n    \"guide.sharp5.desc\": \"Spänning, mystisk\",\n    \"guide.flat9.desc\": \"Dissonant, jazzigt\",\n    \"guide.sharp11.desc\": \"Lydisk, öppen\",\n    \"guide.popular.chords\": \"Populära Ackord\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Populär progression\",\n    \"guide.chord.building.tips\": \"Tips för Ackordbyggning\",\n    \"guide.tip1\": \"Börja med grundackorden (dur/moll) innan du lägger till färgningar\",\n    \"guide.tip2\": \"Använd sus-ackord för att skapa spänning som löses till dur/moll\",\n    \"guide.tip3\": \"Färgningar (6, 7, 9) gör ackorden mer intressanta\",\n    \"guide.tip4\": \"Experimentera med olika inversioner för smidigare progressioner\",\n    \"guide.tip5\": \"Lyssna på hur ackorden låter tillsammans, inte bara enskilt\",\n    \"guide.diminished.fifth\": \"Förminskad kvint\",\n    \"guide.augmented.fifth\": \"Förhöjd kvint\", \n    \"guide.diminished.ninth\": \"Förminskad nona\",\n    \"guide.augmented.eleventh\": \"Förhöjd undecima\",\n    \n    // Song text\n    \"song.restart\": \"Börja om\",\n  },\n  \n  en: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Press chords and play on strings\",\n    \"app.loading\": \"Loading sounds...\",\n    \n    // Settings\n    \"settings.title\": \"Settings\",\n    \"settings.chords\": \"Chord Settings\",\n    \"settings.language\": \"Language\",\n    \"settings.language.select\": \"Select Language\",\n    \"settings.showSongText\": \"Show Song Text\",\n    \"settings.showSongTextDescription\": \"Display song lyrics and chords above guitar\",\n    \"settings.display\": \"Display\",\n    \"settings.presets\": \"Presets\",\n    \"settings.builder\": \"Builder\",\n    \"settings.showAutoPlayer\": \"Show Auto Player\",\n    \"settings.showMetronome\": \"Show Metronome\",\n    \"settings.autoPlayChords\": \"Auto-play chords\",\n    \"settings.metronomeSettings\": \"Metronome Settings\",\n    \"settings.autoPlayer\": \"Auto Player\",\n    \"settings.chordChangesEvery\": \"Chord changes every\",\n    \"settings.secondsBasedOnBPM\": \"seconds (based on BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Beats per minute)\",\n    \"settings.quickSelectBPM\": \"Quick Select BPM\",\n    \"settings.instrument\": \"Instrument\",\n    \"settings.instruments\": \"Instruments\",\n    \"settings.instrument.guitar\": \"Guitar (Standard Tuning)\",\n    \"settings.instrument.guitar-dropd\": \"Guitar (Drop D Tuning)\",\n    \"settings.instrument.guitar-openg\": \"Guitar (Open G Tuning)\",\n    \"settings.instrument.guitar-opend\": \"Guitar (Open D Tuning)\",\n    \"settings.instrument.guitar-dadgad\": \"Guitar (DADGAD Tuning)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Guitar (Half Step Down)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Guitar (Whole Step Down)\",\n    \"settings.instrument.bass\": \"Bass\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandolin\",\n    \"settings.instrument.octavemandolin\": \"Octave Mandolin\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 strings)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 strings)\",\n    \"settings.primary\": \"Primary\",\n    \"settings.setPrimary\": \"Set as primary\",\n    \n    // 404 Page\n    \"notfound.message\": \"Oops! Page not found\",\n    \"notfound.home\": \"Return to Home\",\n    \n    // Presets\n    \"presets.title\": \"Music Style Presets\",\n    \"presets.more\": \"more\",\n    \"presets.pop.name\": \"Pop/Rock Basic\",\n    \"presets.pop.description\": \"Classic pop and rock chords\",\n    \"presets.blues.name\": \"Blues Progression\",\n    \"presets.blues.description\": \"12-bar blues and related chords\",\n    \"presets.jazz.name\": \"Jazz Standards\",\n    \"presets.jazz.description\": \"Jazz chords with extended harmonies\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Country and folk style chords\",\n    \"presets.indie.name\": \"Indie/Alternative\",\n    \"presets.indie.description\": \"Modern indie and alternative chords\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Powerful rock chords and powerchords\",\n    \n    // Chord tabs\n    \"chords.library\": \"Library\",\n    \"chords.builder\": \"Create Chord\",\n    \"chords.build\": \"Build\",\n    \"chords.guide\": \"Guide\",\n    \n    // Chord builder\n    \"builder.theory\": \"Music Theory\",\n    \"builder.manual\": \"Manual\",\n    \"builder.root\": \"Root Note\",\n    \"builder.type\": \"Chord Type\",\n    \"builder.generate\": \"Generate Chord\",\n    \"builder.name\": \"Chord Name\",\n    \"builder.name.placeholder\": \"e.g. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Fret Position (0 = open string)\",\n    \"builder.create\": \"Create Chord\",\n    \"builder.error.name\": \"Enter a name for the chord\",\n    \"builder.success\": \"Chord created!\",\n    \"builder.success.desc\": \"has been added to library\",\n    \n    // Chord library\n    \"library.search\": \"Search chords\",\n    \"library.search.placeholder\": \"Type chord name...\",\n    \"library.left\": \"Left Side\",\n    \"library.right\": \"Right Side\",\n    \"library.available\": \"Available Chords\",\n    \"library.custom\": \"Custom\",\n    \"library.exists\": \"Chord already exists\",\n    \"library.exists.left\": \"already exists on left side\",\n    \"library.exists.right\": \"already exists on right side\",\n    \"library.added\": \"Chord added\",\n    \"library.added.left\": \"has been added to left side\",\n    \"library.added.right\": \"has been added to right side\",\n    \n    // Guide\n    \"guide.title\": \"Chord Guide\",\n    \"guide.subtitle\": \"Learn to build chords with different colorings and variations\",\n    \"guide.basics\": \"Basics\",\n    \"guide.extensions\": \"Extensions\",\n    \"guide.alterations\": \"Alterations\",\n    \"guide.examples\": \"Examples\",\n    \n    // Chord types\n    \"chord.major\": \"Major\",\n    \"chord.minor\": \"Minor\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominant)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Strum the strings\",\n    \"guitar.chord.selected\": \"Selected chord\",\n    \"guitar.chord.select\": \"Select a chord\",\n    \"guitar.chord.play\": \"Click strings to play\",\n    \n    // String names\n    \"string.e.high\": \"E (high)\",\n    \"string.b\": \"B\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\",\n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (low)\",\n    \n    // Songs\n    \"songs.genre\": \"Genre\",\n    \"songs.difficulty\": \"Difficulty\",\n    \"songs.all.genres\": \"All genres\",\n    \"songs.all.levels\": \"All levels\",\n    \"songs.no.results\": \"No songs found with selected filters.\",\n    \n    // Guide content  \n    \"guide.basic.chord.types\": \"Basic Chord Types\",\n    \"guide.major\": \"Major\",\n    \"guide.major.desc\": \"Happy, bright\",\n    \"guide.minor\": \"Minor\", \n    \"guide.minor.desc\": \"Sad, dark\",\n    \"guide.sus2.desc\": \"Open, floating\",\n    \"guide.sus4.desc\": \"Tension, wants to resolve\",\n    \"guide.extensions.title\": \"Extensions\",\n    \"guide.sixth.desc\": \"Warm, jazzy\",\n    \"guide.seventh.desc\": \"Blues, dominant\",\n    \"guide.maj7.desc\": \"Sophisticated, mellow\",\n    \"guide.ninth.desc\": \"Rich, complex\",\n    \"guide.add9.desc\": \"Modern, airy\",\n    \"guide.alterations.title\": \"Alterations\",\n    \"guide.flat5.desc\": \"Dark, unstable\",\n    \"guide.sharp5.desc\": \"Tension, mysterious\",\n    \"guide.flat9.desc\": \"Dissonant, jazzy\",\n    \"guide.sharp11.desc\": \"Lydian, open\",\n    \"guide.popular.chords\": \"Popular Chords\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Popular progression\",\n    \"guide.chord.building.tips\": \"Chord Building Tips\",\n    \"guide.tip1\": \"Start with basic chords (major/minor) before adding extensions\",\n    \"guide.tip2\": \"Use sus chords to create tension that resolves to major/minor\",\n    \"guide.tip3\": \"Extensions (6, 7, 9) make chords more interesting\",\n    \"guide.tip4\": \"Experiment with different inversions for smoother progressions\",\n    \"guide.tip5\": \"Listen to how chords sound together, not just individually\",\n    \"guide.diminished.fifth\": \"Diminished fifth\",\n    \"guide.augmented.fifth\": \"Augmented fifth\",\n    \"guide.diminished.ninth\": \"Diminished ninth\", \n    \"guide.augmented.eleventh\": \"Augmented eleventh\",\n    \n    // Song text\n    \"song.restart\": \"Restart\",\n  },\n  \n  de: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Akkorde drücken und Saiten spielen\",\n    \"app.loading\": \"Lade Sounds...\",\n    \n    // Settings\n    \"settings.title\": \"Einstellungen\",\n    \"settings.chords\": \"Akkord-Einstellungen\",\n    \"settings.language\": \"Sprache\",\n    \"settings.language.select\": \"Sprache wählen\",\n    \"settings.showSongText\": \"Liedtext anzeigen\",\n    \"settings.showSongTextDescription\": \"Liedtext und Akkorde über der Gitarre anzeigen\",\n    \"settings.display\": \"Anzeige\",\n    \"settings.presets\": \"Voreinstellungen\",\n    \"settings.builder\": \"Ersteller\",\n    \"settings.showAutoPlayer\": \"Auto-Player anzeigen\",\n    \"settings.showMetronome\": \"Metronom anzeigen\",\n    \"settings.metronomeSettings\": \"Metronom-Einstellungen\",\n    \"settings.autoPlayer\": \"Auto-Player\",\n    \"settings.chordChangesEvery\": \"Akkordwechsel alle\",\n    \"settings.secondsBasedOnBPM\": \"Sekunden (basierend auf BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Schläge pro Minute)\",\n    \"settings.quickSelectBPM\": \"Schnellwahl BPM\",\n    \"settings.instrument\": \"Instrument\",\n    \"settings.instrument.guitar\": \"Gitarre (Standard)\",\n    \"settings.instrument.guitar-dropd\": \"Gitarre (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Gitarre (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Gitarre (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Gitarre (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Gitarre (Halbton tiefer)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Gitarre (Ganzton tiefer)\",\n    \"settings.instrument.bass\": \"Bass\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandoline\",\n    \"settings.instrument.octavemandolin\": \"Oktav-Mandoline\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 Saiten)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 Saiten)\",\n    \n    // 404 Page\n    \"notfound.message\": \"Hoppla! Seite nicht gefunden\",\n    \"notfound.home\": \"Zurück zur Startseite\",\n    \n    // Presets\n    \"presets.title\": \"Musikstil Presets\",\n    \"presets.more\": \"mehr\",\n    \"presets.pop.name\": \"Pop/Rock Basic\",\n    \"presets.pop.description\": \"Klassische Pop- und Rock-Akkorde\",\n    \"presets.blues.name\": \"Blues Progression\",\n    \"presets.blues.description\": \"12-Takt-Blues und verwandte Akkorde\",\n    \"presets.jazz.name\": \"Jazz Standards\",\n    \"presets.jazz.description\": \"Jazz-Akkorde mit erweiterten Harmonien\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Country- und Folk-Stil Akkorde\",\n    \"presets.indie.name\": \"Indie/Alternative\",\n    \"presets.indie.description\": \"Moderne Indie- und Alternative-Akkorde\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Kraftvolle Rock-Akkorde und Powerchords\",\n    \n    // Chord tabs\n    \"chords.library\": \"Bibliothek\",\n    \"chords.builder\": \"Akkord erstellen\",\n    \"chords.build\": \"Erstellen\",\n    \"chords.guide\": \"Anleitung\",\n    \n    // Chord builder\n    \"builder.theory\": \"Musiktheorie\",\n    \"builder.manual\": \"Manuell\",\n    \"builder.root\": \"Grundton\",\n    \"builder.type\": \"Akkordtyp\",\n    \"builder.generate\": \"Akkord generieren\",\n    \"builder.name\": \"Akkordname\",\n    \"builder.name.placeholder\": \"z.B. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Bundposition (0 = leere Saite)\",\n    \"builder.create\": \"Akkord erstellen\",\n    \"builder.error.name\": \"Geben Sie einen Namen für den Akkord ein\",\n    \"builder.success\": \"Akkord erstellt!\",\n    \"builder.success.desc\": \"wurde zur Bibliothek hinzugefügt\",\n    \n    // Chord library\n    \"library.search\": \"Akkorde suchen\",\n    \"library.search.placeholder\": \"Akkordname eingeben...\",\n    \"library.left\": \"Linke Seite\",\n    \"library.right\": \"Rechte Seite\",\n    \"library.available\": \"Verfügbare Akkorde\",\n    \"library.custom\": \"Benutzerdefiniert\",\n    \"library.exists\": \"Akkord existiert bereits\",\n    \"library.exists.left\": \"existiert bereits auf der linken Seite\",\n    \"library.exists.right\": \"existiert bereits auf der rechten Seite\",\n    \"library.added\": \"Akkord hinzugefügt\",\n    \"library.added.left\": \"wurde zur linken Seite hinzugefügt\",\n    \"library.added.right\": \"wurde zur rechten Seite hinzugefügt\",\n    \n    // Guide\n    \"guide.title\": \"Akkord-Anleitung\",\n    \"guide.subtitle\": \"Lernen Sie Akkorde mit verschiedenen Färbungen und Variationen zu erstellen\",\n    \"guide.basics\": \"Grundlagen\",\n    \"guide.extensions\": \"Erweiterungen\",\n    \"guide.alterations\": \"Alterationen\",\n    \"guide.examples\": \"Beispiele\",\n    \n    // Chord types\n    \"chord.major\": \"Dur\",\n    \"chord.minor\": \"Moll\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominant)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Saiten zupfen\",\n    \"guitar.chord.selected\": \"Gewählter Akkord\",\n    \"guitar.chord.select\": \"Wählen Sie einen Akkord\",\n    \"guitar.chord.play\": \"Klicken Sie auf Saiten zum Spielen\",\n    \n    // String names\n    \"string.e.high\": \"E (hoch)\",\n    \"string.b\": \"H\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\",\n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (tief)\",\n    \n    // Songs\n    \"songs.genre\": \"Genre\",\n    \"songs.difficulty\": \"Schwierigkeit\",\n    \"songs.all.genres\": \"Alle Genres\",\n    \"songs.all.levels\": \"Alle Stufen\",\n    \"songs.no.results\": \"Keine Lieder mit den ausgewählten Filtern gefunden.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Grundlegende Akkordtypen\",\n    \"guide.major\": \"Dur\",\n    \"guide.major.desc\": \"Fröhlich, hell\",\n    \"guide.minor\": \"Moll\",\n    \"guide.minor.desc\": \"Traurig, dunkel\",\n    \"guide.sus2.desc\": \"Offen, schwebend\",\n    \"guide.sus4.desc\": \"Spannung, will sich auflösen\",\n    \"guide.extensions.title\": \"Erweiterungen\",\n    \"guide.sixth.desc\": \"Warm, jazzig\",\n    \"guide.seventh.desc\": \"Blues, dominant\",\n    \"guide.maj7.desc\": \"Raffiniert, weich\",\n    \"guide.ninth.desc\": \"Reich, komplex\",\n    \"guide.add9.desc\": \"Modern, luftig\",\n    \"guide.alterations.title\": \"Alterationen\",\n    \"guide.flat5.desc\": \"Dunkel, instabil\",\n    \"guide.sharp5.desc\": \"Spannung, mysteriös\",\n    \"guide.flat9.desc\": \"Dissonant, jazzig\",\n    \"guide.sharp11.desc\": \"Lydisch, offen\",\n    \"guide.popular.chords\": \"Beliebte Akkorde\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Beliebte Progression\",\n    \"guide.chord.building.tips\": \"Tipps zum Akkordaufbau\",\n    \"guide.tip1\": \"Beginnen Sie mit Grundakkorden (Dur/Moll) bevor Sie Erweiterungen hinzufügen\",\n    \"guide.tip2\": \"Verwenden Sie Sus-Akkorde um Spannung zu erzeugen, die sich zu Dur/Moll auflöst\",\n    \"guide.tip3\": \"Erweiterungen (6, 7, 9) machen Akkorde interessanter\",\n    \"guide.tip4\": \"Experimentieren Sie mit verschiedenen Umkehrungen für geschmeidigere Progressionen\",\n    \"guide.tip5\": \"Hören Sie, wie Akkorde zusammenklingen, nicht nur einzeln\",\n    \"guide.diminished.fifth\": \"Verminderte Quinte\",\n    \"guide.augmented.fifth\": \"Übermäßige Quinte\",\n    \"guide.diminished.ninth\": \"Verminderte None\",\n    \"guide.augmented.eleventh\": \"Übermäßige Undezime\",\n    \n    // Song text\n    \"song.restart\": \"Neustart\",\n  },\n  \n  fr: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Appuyez sur les accords et jouez sur les cordes\",\n    \"app.loading\": \"Chargement des sons...\",\n    \n    // Settings\n    \"settings.title\": \"Paramètres\",\n    \"settings.chords\": \"Paramètres d'accords\",\n    \"settings.language\": \"Langue\",\n    \"settings.language.select\": \"Sélectionner la langue\",\n    \"settings.showSongText\": \"Afficher le texte de la chanson\",\n    \"settings.showSongTextDescription\": \"Afficher les paroles et accords au-dessus de la guitare\",\n    \"settings.display\": \"Affichage\",\n    \"settings.presets\": \"Préréglages\",\n    \"settings.builder\": \"Constructeur\",\n    \"settings.showAutoPlayer\": \"Afficher le lecteur automatique\",\n    \"settings.showMetronome\": \"Afficher le métronome\",\n    \"settings.metronomeSettings\": \"Paramètres du métronome\",\n    \"settings.autoPlayer\": \"Lecteur automatique\",\n    \"settings.chordChangesEvery\": \"Les changements d'accords toutes les\",\n    \"settings.secondsBasedOnBPM\": \"secondes (basé sur BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Battements par minute)\",\n    \"settings.quickSelectBPM\": \"Sélection rapide BPM\",\n    \"settings.instrument\": \"Instrument\",\n    \"settings.instruments\": \"Instruments\",\n    \"settings.instrument.guitar\": \"Guitare (Standard)\",\n    \"settings.instrument.guitar-dropd\": \"Guitare (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Guitare (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Guitare (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Guitare (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Guitare (Demi-ton plus bas)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Guitare (Ton entier plus bas)\",\n    \"settings.instrument.bass\": \"Basse\", \n    \"settings.instrument.ukulele\": \"Ukulélé\",\n    \"settings.instrument.mandolin\": \"Mandoline\",\n    \"settings.instrument.octavemandolin\": \"Mandoline octave\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaïka\",\n    \"settings.instrument.banjo4\": \"Banjo (4 cordes)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 cordes)\",\n    \"settings.primary\": \"Principal\",\n    \"settings.setPrimary\": \"Définir comme principal\",\n    \n    // 404 Page\n    \"notfound.message\": \"Oups ! Page introuvable\",\n    \"notfound.home\": \"Retour à l'accueil\",\n    \n    // Presets\n    \"presets.title\": \"Presets de style musical\",\n    \"presets.more\": \"plus\",\n    \"presets.pop.name\": \"Pop/Rock Basic\",\n    \"presets.pop.description\": \"Accords pop et rock classiques\",\n    \"presets.blues.name\": \"Progression Blues\",\n    \"presets.blues.description\": \"Blues 12 mesures et accords associés\",\n    \"presets.jazz.name\": \"Standards Jazz\",\n    \"presets.jazz.description\": \"Accords jazz avec harmonies étendues\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Accords de style country et folk\",\n    \"presets.indie.name\": \"Indie/Alternative\",\n    \"presets.indie.description\": \"Accords indie et alternatifs modernes\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Accords rock puissants et powerchords\",\n    \n    // Chord tabs\n    \"chords.library\": \"Bibliothèque\",\n    \"chords.builder\": \"Créer un accord\",\n    \"chords.build\": \"Créer\",\n    \"chords.guide\": \"Guide\",\n    \n    // Chord builder\n    \"builder.theory\": \"Théorie musicale\",\n    \"builder.manual\": \"Manuel\",\n    \"builder.root\": \"Note fondamentale\",\n    \"builder.type\": \"Type d'accord\",\n    \"builder.generate\": \"Générer l'accord\",\n    \"builder.name\": \"Nom de l'accord\",\n    \"builder.name.placeholder\": \"ex. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Position de la frette (0 = corde à vide)\",\n    \"builder.create\": \"Créer l'accord\",\n    \"builder.error.name\": \"Entrez un nom pour l'accord\",\n    \"builder.success\": \"Accord créé !\",\n    \"builder.success.desc\": \"a été ajouté à la bibliothèque\",\n    \n    // Chord library\n    \"library.search\": \"Rechercher des accords\",\n    \"library.search.placeholder\": \"Tapez le nom de l'accord...\",\n    \"library.left\": \"Côté gauche\",\n    \"library.right\": \"Côté droit\",\n    \"library.available\": \"Accords disponibles\",\n    \"library.custom\": \"Personnalisé\",\n    \"library.exists\": \"L'accord existe déjà\",\n    \"library.exists.left\": \"existe déjà du côté gauche\",\n    \"library.exists.right\": \"existe déjà du côté droit\",\n    \"library.added\": \"Accord ajouté\",\n    \"library.added.left\": \"a été ajouté au côté gauche\",\n    \"library.added.right\": \"a été ajouté au côté droit\",\n    \n    // Guide\n    \"guide.title\": \"Guide des accords\",\n    \"guide.subtitle\": \"Apprenez à construire des accords avec différentes couleurs et variations\",\n    \"guide.basics\": \"Bases\",\n    \"guide.extensions\": \"Extensions\",\n    \"guide.alterations\": \"Altérations\",\n    \"guide.examples\": \"Exemples\",\n    \n    // Chord types\n    \"chord.major\": \"Majeur\",\n    \"chord.minor\": \"Mineur\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominant)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Grattez les cordes\",\n    \"guitar.chord.selected\": \"Accord sélectionné\",\n    \"guitar.chord.select\": \"Sélectionnez un accord\",\n    \"guitar.chord.play\": \"Cliquez sur les cordes pour jouer\",\n    \n    // String names\n    \"string.e.high\": \"Mi (aigu)\",\n    \"string.b\": \"Si\",\n    \"string.g\": \"Sol\",\n    \"string.d\": \"Ré\",\n    \"string.a\": \"La\",\n    \"string.e.low\": \"Mi (grave)\",\n    \n    // Songs\n    \"songs.genre\": \"Genre\",\n    \"songs.difficulty\": \"Difficulté\",\n    \"songs.all.genres\": \"Tous les genres\",\n    \"songs.all.levels\": \"Tous les niveaux\",\n    \"songs.no.results\": \"Aucune chanson trouvée avec les filtres sélectionnés.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Types d'accords de base\",\n    \"guide.major\": \"Majeur\",\n    \"guide.major.desc\": \"Joyeux, lumineux\",\n    \"guide.minor\": \"Mineur\",\n    \"guide.minor.desc\": \"Triste, sombre\",\n    \"guide.sus2.desc\": \"Ouvert, flottant\",\n    \"guide.sus4.desc\": \"Tension, veut se résoudre\",\n    \"guide.extensions.title\": \"Extensions\",\n    \"guide.sixth.desc\": \"Chaleureux, jazzy\",\n    \"guide.seventh.desc\": \"Blues, dominant\",\n    \"guide.maj7.desc\": \"Sophistiqué, doux\",\n    \"guide.ninth.desc\": \"Riche, complexe\",\n    \"guide.add9.desc\": \"Moderne, aéré\",\n    \"guide.alterations.title\": \"Altérations\",\n    \"guide.flat5.desc\": \"Sombre, instable\",\n    \"guide.sharp5.desc\": \"Tension, mystérieux\",\n    \"guide.flat9.desc\": \"Dissonant, jazzy\",\n    \"guide.sharp11.desc\": \"Lydien, ouvert\",\n    \"guide.popular.chords\": \"Accords populaires\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Progression populaire\",\n    \"guide.chord.building.tips\": \"Conseils pour construire des accords\",\n    \"guide.tip1\": \"Commencez par les accords de base (majeur/mineur) avant d'ajouter des extensions\",\n    \"guide.tip2\": \"Utilisez les accords sus pour créer une tension qui se résout en majeur/mineur\",\n    \"guide.tip3\": \"Les extensions (6, 7, 9) rendent les accords plus intéressants\",\n    \"guide.tip4\": \"Expérimentez avec différents renversements pour des progressions plus fluides\",\n    \"guide.tip5\": \"Écoutez comment les accords sonnent ensemble, pas seulement individuellement\",\n    \"guide.diminished.fifth\": \"Quinte diminuée\",\n    \"guide.augmented.fifth\": \"Quinte augmentée\",\n    \"guide.diminished.ninth\": \"Neuvième diminuée\",\n    \"guide.augmented.eleventh\": \"Onzième augmentée\",\n    \n    // Song text\n    \"song.restart\": \"Redémarrer\",\n  },\n  \n  es: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Presiona acordes y toca las cuerdas\",\n    \"app.loading\": \"Cargando sonidos...\",\n    \n    // Settings\n    \"settings.title\": \"Configuración\",\n    \"settings.chords\": \"Configuración de acordes\",\n    \"settings.language\": \"Idioma\",\n    \"settings.language.select\": \"Seleccionar idioma\",\n    \"settings.showSongText\": \"Mostrar texto de canción\",\n    \"settings.showSongTextDescription\": \"Mostrar letra y acordes sobre la guitarra\",\n    \"settings.display\": \"Visualización\",\n    \"settings.presets\": \"Preajustes\",\n    \"settings.builder\": \"Constructor\",\n    \"settings.showAutoPlayer\": \"Mostrar reproductor automático\",\n    \"settings.showMetronome\": \"Mostrar metrónomo\",\n    \"settings.metronomeSettings\": \"Configuración del metrónomo\",\n    \"settings.autoPlayer\": \"Reproductor automático\",\n    \"settings.chordChangesEvery\": \"Los cambios de acordes cada\",\n    \"settings.secondsBasedOnBPM\": \"segundos (basado en BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Pulsaciones por minuto)\",\n    \"settings.quickSelectBPM\": \"Selección rápida BPM\",\n    \"settings.instrument\": \"Instrumento\",\n    \"settings.instruments\": \"Instrumentos\",\n    \"settings.instrument.guitar\": \"Guitarra (Estándar)\",\n    \"settings.instrument.guitar-dropd\": \"Guitarra (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Guitarra (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Guitarra (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Guitarra (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Guitarra (Medio tono más bajo)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Guitarra (Tono completo más bajo)\",\n    \"settings.instrument.bass\": \"Bajo\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandolina\",\n    \"settings.instrument.octavemandolin\": \"Mandolina octava\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 cuerdas)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 cuerdas)\",\n    \"settings.primary\": \"Principal\",\n    \"settings.setPrimary\": \"Establecer como principal\",\n    \n    // 404 Page\n    \"notfound.message\": \"¡Ups! Página no encontrada\",\n    \"notfound.home\": \"Volver al inicio\",\n    \n    // Presets\n    \"presets.title\": \"Presets de estilo musical\",\n    \"presets.more\": \"más\",\n    \"presets.pop.name\": \"Pop/Rock Básico\",\n    \"presets.pop.description\": \"Acordes clásicos de pop y rock\",\n    \"presets.blues.name\": \"Progresión Blues\",\n    \"presets.blues.description\": \"Blues de 12 compases y acordes relacionados\",\n    \"presets.jazz.name\": \"Standards Jazz\",\n    \"presets.jazz.description\": \"Acordes de jazz con armonías extendidas\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Acordes de estilo country y folk\",\n    \"presets.indie.name\": \"Indie/Alternative\",\n    \"presets.indie.description\": \"Acordes indie y alternativos modernos\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Acordes rock potentes y powerchords\",\n    \n    // Chord tabs\n    \"chords.library\": \"Biblioteca\",\n    \"chords.builder\": \"Crear acorde\",\n    \"chords.build\": \"Crear\",\n    \"chords.guide\": \"Guía\",\n    \n    // Chord builder\n    \"builder.theory\": \"Teoría musical\",\n    \"builder.manual\": \"Manual\",\n    \"builder.root\": \"Nota fundamental\",\n    \"builder.type\": \"Tipo de acorde\",\n    \"builder.generate\": \"Generar acorde\",\n    \"builder.name\": \"Nombre del acorde\",\n    \"builder.name.placeholder\": \"ej. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Posición del traste (0 = cuerda al aire)\",\n    \"builder.create\": \"Crear acorde\",\n    \"builder.error.name\": \"Ingrese un nombre para el acorde\",\n    \"builder.success\": \"¡Acorde creado!\",\n    \"builder.success.desc\": \"ha sido añadido a la biblioteca\",\n    \n    // Chord library\n    \"library.search\": \"Buscar acordes\",\n    \"library.search.placeholder\": \"Escriba el nombre del acorde...\",\n    \"library.left\": \"Lado izquierdo\",\n    \"library.right\": \"Lado derecho\",\n    \"library.available\": \"Acordes disponibles\",\n    \"library.custom\": \"Personalizado\",\n    \"library.exists\": \"El acorde ya existe\",\n    \"library.exists.left\": \"ya existe en el lado izquierdo\",\n    \"library.exists.right\": \"ya existe en el lado derecho\",\n    \"library.added\": \"Acorde añadido\",\n    \"library.added.left\": \"ha sido añadido al lado izquierdo\",\n    \"library.added.right\": \"ha sido añadido al lado derecho\",\n    \n    // Guide\n    \"guide.title\": \"Guía de acordes\",\n    \"guide.subtitle\": \"Aprende a construir acordes con diferentes colores y variaciones\",\n    \"guide.basics\": \"Básicos\",\n    \"guide.extensions\": \"Extensiones\",\n    \"guide.alterations\": \"Alteraciones\",\n    \"guide.examples\": \"Ejemplos\",\n    \n    // Chord types\n    \"chord.major\": \"Mayor\",\n    \"chord.minor\": \"Menor\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominante)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Rasguea las cuerdas\",\n    \"guitar.chord.selected\": \"Acorde seleccionado\",\n    \"guitar.chord.select\": \"Selecciona un acorde\",\n    \"guitar.chord.play\": \"Haz clic en las cuerdas para tocar\",\n    \n    // String names\n    \"string.e.high\": \"Mi (agudo)\",\n    \"string.b\": \"Si\",\n    \"string.g\": \"Sol\",\n    \"string.d\": \"Re\",\n    \"string.a\": \"La\",\n    \"string.e.low\": \"Mi (grave)\",\n    \n    // Songs\n    \"songs.genre\": \"Género\",\n    \"songs.difficulty\": \"Dificultad\",\n    \"songs.all.genres\": \"Todos los géneros\",\n    \"songs.all.levels\": \"Todos los niveles\",\n    \"songs.no.results\": \"No se encontraron canciones con los filtros seleccionados.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Tipos de acordes básicos\",\n    \"guide.major\": \"Mayor\",\n    \"guide.major.desc\": \"Alegre, brillante\", \n    \"guide.minor\": \"Menor\",\n    \"guide.minor.desc\": \"Triste, oscuro\",\n    \"guide.sus2.desc\": \"Abierto, flotante\",\n    \"guide.sus4.desc\": \"Tensión, quiere resolverse\",\n    \"guide.extensions.title\": \"Extensiones\",\n    \"guide.sixth.desc\": \"Cálido, jazzy\",\n    \"guide.seventh.desc\": \"Blues, dominante\",\n    \"guide.maj7.desc\": \"Sofisticado, suave\",\n    \"guide.ninth.desc\": \"Rico, complejo\",\n    \"guide.add9.desc\": \"Moderno, aireado\",\n    \"guide.alterations.title\": \"Alteraciones\",\n    \"guide.flat5.desc\": \"Oscuro, inestable\",\n    \"guide.sharp5.desc\": \"Tensión, misterioso\",\n    \"guide.flat9.desc\": \"Disonante, jazzy\",\n    \"guide.sharp11.desc\": \"Lidio, abierto\",\n    \"guide.popular.chords\": \"Acordes populares\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Progresión popular\",\n    \"guide.chord.building.tips\": \"Consejos para construir acordes\",\n    \"guide.tip1\": \"Comience con acordes básicos (mayor/menor) antes de agregar extensiones\",\n    \"guide.tip2\": \"Use acordes sus para crear tensión que se resuelve a mayor/menor\",\n    \"guide.tip3\": \"Las extensiones (6, 7, 9) hacen los acordes más interesantes\",\n    \"guide.tip4\": \"Experimente con diferentes inversiones para progresiones más suaves\",\n    \"guide.tip5\": \"Escuche cómo suenan los acordes juntos, no solo individualmente\",\n    \"guide.diminished.fifth\": \"Quinta disminuida\",\n    \"guide.augmented.fifth\": \"Quinta aumentada\", \n    \"guide.diminished.ninth\": \"Novena disminuida\",\n    \"guide.augmented.eleventh\": \"Undécima aumentada\",\n    \n    // Song text\n    \"song.restart\": \"Reiniciar\",\n  },\n\n  // ITALIAN\n  it: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Premi gli accordi e suona le corde\",\n    \"app.loading\": \"Caricamento suoni...\",\n    \n    // Settings\n    \"settings.title\": \"Impostazioni\",\n    \"settings.chords\": \"Impostazioni Accordi\",\n    \"settings.language\": \"Lingua\",\n    \"settings.language.select\": \"Seleziona Lingua\",\n    \"settings.showSongText\": \"Mostra Testo Canzone\",\n    \"settings.showSongTextDescription\": \"Mostra testo e accordi sopra la chitarra\",\n    \"settings.display\": \"Visualizzazione\",\n    \"settings.presets\": \"Preset\",\n    \"settings.builder\": \"Costruttore\",\n    \"settings.showAutoPlayer\": \"Mostra riproduttore automatico\",\n    \"settings.showMetronome\": \"Mostra metronomo\",\n    \"settings.metronomeSettings\": \"Impostazioni metronomo\",\n    \"settings.autoPlayer\": \"Riproduttore automatico\",\n    \"settings.chordChangesEvery\": \"Cambi di accordo ogni\",\n    \"settings.secondsBasedOnBPM\": \"secondi (basato su BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Battiti per minuto)\",\n    \"settings.quickSelectBPM\": \"Selezione rapida BPM\",\n    \"settings.instrument\": \"Strumento\",\n    \"settings.instruments\": \"Strumenti\",\n    \"settings.instrument.guitar\": \"Chitarra (Standard)\",\n    \"settings.instrument.guitar-dropd\": \"Chitarra (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Chitarra (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Chitarra (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Chitarra (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Chitarra (Mezzo tono più basso)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Chitarra (Tono intero più basso)\",\n    \"settings.instrument.bass\": \"Basso\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandolino\",\n    \"settings.instrument.octavemandolin\": \"Mandolino ottava\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 corde)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 corde)\",\n    \"settings.primary\": \"Primario\",\n    \"settings.setPrimary\": \"Imposta come primario\",\n     \n    // Transposition\n    \"transpose.label\": \"Trasposizione\",\n    \n    // 404 Page\n    \"notfound.message\": \"Ops! Pagina non trovata\",\n    \"notfound.home\": \"Torna alla Home\",\n    \n    // Presets\n    \"presets.title\": \"Preset Stili Musicali\",\n    \"presets.more\": \"altro\",\n    \"presets.pop.name\": \"Pop/Rock Base\",\n    \"presets.pop.description\": \"Accordi classici pop e rock\",\n    \"presets.blues.name\": \"Progressione Blues\",\n    \"presets.blues.description\": \"Blues a 12 battute e accordi correlati\",\n    \"presets.jazz.name\": \"Standard Jazz\",\n    \"presets.jazz.description\": \"Accordi jazz con armonie estese\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Accordi in stile country e folk\",\n    \"presets.indie.name\": \"Indie/Alternative\",\n    \"presets.indie.description\": \"Accordi indie e alternativi moderni\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Potenti accordi rock e powerchord\",\n    \n    // Chord tabs\n    \"chords.presets\": \"Preset\",\n    \"chords.library\": \"Libreria\",\n    \"chords.builder\": \"Crea Accordo\",\n    \"chords.guide\": \"Guida\",\n    \n    // Chord builder\n    \"builder.theory\": \"Teoria Musicale\",\n    \"builder.manual\": \"Manuale\",\n    \"builder.root\": \"Nota Fondamentale\",\n    \"builder.type\": \"Tipo di Accordo\",\n    \"builder.generate\": \"Genera Accordo\",\n    \"builder.name\": \"Nome Accordo\",\n    \"builder.name.placeholder\": \"es. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Posizione Tasto (0 = corda aperta)\",\n    \"builder.create\": \"Crea Accordo\",\n    \"builder.error.name\": \"Inserisci un nome per l'accordo\",\n    \"builder.success\": \"Accordo creato!\",\n    \"builder.success.desc\": \"è stato aggiunto alla libreria\",\n    \n    // Chord library\n    \"library.search\": \"Cerca accordi\",\n    \"library.search.placeholder\": \"Scrivi nome accordo...\",\n    \"library.left\": \"Lato Sinistro\",\n    \"library.right\": \"Lato Destro\",\n    \"library.available\": \"Accordi Disponibili\",\n    \"library.custom\": \"Personalizzato\",\n    \"library.exists\": \"L'accordo esiste già\",\n    \"library.exists.left\": \"esiste già sul lato sinistro\",\n    \"library.exists.right\": \"esiste già sul lato destro\",\n    \"library.added\": \"Accordo aggiunto\",\n    \"library.added.left\": \"è stato aggiunto al lato sinistro\",\n    \"library.added.right\": \"è stato aggiunto al lato destro\",\n    \n    // Guide\n    \"guide.title\": \"Guida agli Accordi\",\n    \"guide.subtitle\": \"Impara a costruire accordi con diverse colorazioni e variazioni\",\n    \"guide.basics\": \"Base\",\n    \"guide.extensions\": \"Estensioni\",\n    \"guide.alterations\": \"Alterazioni\",\n    \"guide.examples\": \"Esempi\",\n    \n    // Chord types\n    \"chord.major\": \"Maggiore\",\n    \"chord.minor\": \"Minore\",\n    \"chord.dim\": \"Dim\",\n    \"chord.aug\": \"Aug\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominante)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Trascina sulle corde\",\n    \"guitar.chord.selected\": \"Accordo selezionato\",\n    \"guitar.chord.select\": \"Seleziona un accordo\",\n    \"guitar.chord.play\": \"Clicca sulle corde per suonare\",\n    \n    // String names\n    \"string.e.high\": \"E (acuto)\",\n    \"string.b\": \"B\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\", \n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (grave)\",\n    \n    // Songs\n    \"songs.genre\": \"Genere\",\n    \"songs.difficulty\": \"Difficoltà\",\n    \"songs.all.genres\": \"Tutti i generi\",\n    \"songs.all.levels\": \"Tutti i livelli\",\n    \"songs.no.results\": \"Nessuna canzone trovata con i filtri selezionati.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Tipi di Accordi Base\",\n    \"guide.major\": \"Maggiore\",\n    \"guide.major.desc\": \"Allegro, luminoso\",\n    \"guide.minor\": \"Minore\",\n    \"guide.minor.desc\": \"Triste, scuro\",\n    \"guide.sus2.desc\": \"Aperto, fluttuante\",\n    \"guide.sus4.desc\": \"Tensione, vuole risolversi\",\n    \"guide.extensions.title\": \"Estensioni\",\n    \"guide.sixth.desc\": \"Caldo, jazz\",\n    \"guide.seventh.desc\": \"Blues, dominante\",\n    \"guide.maj7.desc\": \"Sofisticato, dolce\",\n    \"guide.ninth.desc\": \"Ricco, complesso\",\n    \"guide.add9.desc\": \"Moderno, arioso\",\n    \"guide.alterations.title\": \"Alterazioni\",\n    \"guide.flat5.desc\": \"Scuro, instabile\",\n    \"guide.sharp5.desc\": \"Tensione, misterioso\",\n    \"guide.flat9.desc\": \"Dissonante, jazz\",\n    \"guide.sharp11.desc\": \"Lidio, aperto\",\n    \"guide.popular.chords\": \"Accordi Popolari\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Progressione popolare\",\n    \"guide.chord.building.tips\": \"Consigli per Costruire Accordi\",\n    \"guide.tip1\": \"Inizia con accordi base (maggiore/minore) prima di aggiungere estensioni\",\n    \"guide.tip2\": \"Usa accordi sus per creare tensione che si risolve in maggiore/minore\",\n    \"guide.tip3\": \"Le estensioni (6, 7, 9) rendono gli accordi più interessanti\",\n    \"guide.tip4\": \"Sperimenta con diverse inversioni per progressioni più fluide\",\n    \"guide.tip5\": \"Ascolta come suonano gli accordi insieme, non solo individualmente\",\n    \"guide.diminished.fifth\": \"Quinta diminuita\",\n    \"guide.augmented.fifth\": \"Quinta aumentata\",\n    \"guide.diminished.ninth\": \"Nona diminuita\",\n    \"guide.augmented.eleventh\": \"Undicesima aumentata\",\n    \n    // Song text\n    \"song.restart\": \"Ricomincia\",\n  },\n\n  // PORTUGUESE  \n  pt: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Pressione acordes e toque nas cordas\",\n    \"app.loading\": \"Carregando sons...\",\n    \n    // Settings\n    \"settings.title\": \"Configurações\",\n    \"settings.chords\": \"Configurações de Acordes\",\n    \"settings.language\": \"Idioma\",\n    \"settings.language.select\": \"Selecionar Idioma\",\n    \"settings.showSongText\": \"Mostrar Texto da Música\",\n    \"settings.showSongTextDescription\": \"Mostrar letra e acordes acima da guitarra\",\n    \"settings.display\": \"Exibição\",\n    \"settings.presets\": \"Predefinições\",\n    \"settings.builder\": \"Construtor\",\n    \"settings.showAutoPlayer\": \"Mostrar reprodutor automático\",\n    \"settings.showMetronome\": \"Mostrar metrônomo\",\n    \"settings.metronomeSettings\": \"Configurações do metrônomo\",\n    \"settings.autoPlayer\": \"Reprodutor automático\",\n    \"settings.chordChangesEvery\": \"Mudanças de acorde a cada\",\n    \"settings.secondsBasedOnBPM\": \"segundos (baseado em BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Batidas por minuto)\",\n    \"settings.quickSelectBPM\": \"Seleção rápida BPM\",\n    \"settings.instrument\": \"Instrumento\",\n    \"settings.instruments\": \"Instrumentos\",\n    \"settings.instrument.guitar\": \"Guitarra (Padrão)\",\n    \"settings.instrument.guitar-dropd\": \"Guitarra (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Guitarra (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Guitarra (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Guitarra (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Guitarra (Meio tom abaixo)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Guitarra (Tom inteiro abaixo)\",\n    \"settings.instrument.bass\": \"Baixo\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Bandolim\",\n    \"settings.instrument.octavemandolin\": \"Bandolim oitava\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 cordas)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 cordas)\",\n    \"settings.primary\": \"Principal\",\n    \"settings.setPrimary\": \"Definir como principal\",\n     \n    // Transposition\n    \"transpose.label\": \"Transposição\",\n    \n    // 404 Page\n    \"notfound.message\": \"Ops! Página não encontrada\",\n    \"notfound.home\": \"Voltar ao Início\",\n    \n    // Presets\n    \"presets.title\": \"Presets de Estilo Musical\",\n    \"presets.more\": \"mais\",\n    \"presets.pop.name\": \"Pop/Rock Básico\",\n    \"presets.pop.description\": \"Acordes clássicos de pop e rock\",\n    \"presets.blues.name\": \"Progressão Blues\",\n    \"presets.blues.description\": \"Blues de 12 compassos e acordes relacionados\",\n    \"presets.jazz.name\": \"Standards Jazz\",\n    \"presets.jazz.description\": \"Acordes jazz com harmonias estendidas\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Acordes de estilo country e folk\",\n    \"presets.indie.name\": \"Indie/Alternativo\",\n    \"presets.indie.description\": \"Acordes indie e alternativos modernos\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Acordes rock poderosos e powerchords\",\n    \n    // Chord tabs\n    \"chords.presets\": \"Presets\",\n    \"chords.library\": \"Biblioteca\",\n    \"chords.builder\": \"Criar Acorde\",\n    \"chords.guide\": \"Guia\",\n    \n    // Chord builder\n    \"builder.theory\": \"Teoria Musical\",\n    \"builder.manual\": \"Manual\",\n    \"builder.root\": \"Nota Fundamental\",\n    \"builder.type\": \"Tipo de Acorde\",\n    \"builder.generate\": \"Gerar Acorde\",\n    \"builder.name\": \"Nome do Acorde\",\n    \"builder.name.placeholder\": \"ex. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Posição do Traste (0 = corda solta)\",\n    \"builder.create\": \"Criar Acorde\",\n    \"builder.error.name\": \"Digite um nome para o acorde\",\n    \"builder.success\": \"Acorde criado!\",\n    \"builder.success.desc\": \"foi adicionado à biblioteca\",\n    \n    // Chord library\n    \"library.search\": \"Buscar acordes\",\n    \"library.search.placeholder\": \"Digite nome do acorde...\",\n    \"library.left\": \"Lado Esquerdo\",\n    \"library.right\": \"Lado Direito\",\n    \"library.available\": \"Acordes Disponíveis\",\n    \"library.custom\": \"Personalizado\",\n    \"library.exists\": \"Acorde já existe\",\n    \"library.exists.left\": \"já existe no lado esquerdo\",\n    \"library.exists.right\": \"já existe no lado direito\",\n    \"library.added\": \"Acorde adicionado\",\n    \"library.added.left\": \"foi adicionado ao lado esquerdo\",\n    \"library.added.right\": \"foi adicionado ao lado direito\",\n    \n    // Guide\n    \"guide.title\": \"Guia de Acordes\",\n    \"guide.subtitle\": \"Aprenda a construir acordes com diferentes colorações e variações\",\n    \"guide.basics\": \"Básico\",\n    \"guide.extensions\": \"Extensões\",\n    \"guide.alterations\": \"Alterações\",\n    \"guide.examples\": \"Exemplos\",\n    \n    // Chord types\n    \"chord.major\": \"Maior\",\n    \"chord.minor\": \"Menor\",\n    \"chord.dim\": \"Dim\",\n    \"chord.aug\": \"Aug\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominante)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Arraste nas cordas\",\n    \"guitar.chord.selected\": \"Acorde selecionado\",\n    \"guitar.chord.select\": \"Selecione um acorde\",\n    \"guitar.chord.play\": \"Clique nas cordas para tocar\",\n    \n    // String names\n    \"string.e.high\": \"E (agudo)\",\n    \"string.b\": \"B\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\", \n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (grave)\",\n    \n    // Songs\n    \"songs.genre\": \"Gênero\",\n    \"songs.difficulty\": \"Dificuldade\",\n    \"songs.all.genres\": \"Todos os gêneros\",\n    \"songs.all.levels\": \"Todos os níveis\",\n    \"songs.no.results\": \"Nenhuma música encontrada com os filtros selecionados.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Tipos de Acordes Básicos\",\n    \"guide.major\": \"Maior\",\n    \"guide.major.desc\": \"Alegre, brilhante\",\n    \"guide.minor\": \"Menor\",\n    \"guide.minor.desc\": \"Triste, escuro\",\n    \"guide.sus2.desc\": \"Aberto, flutuante\",\n    \"guide.sus4.desc\": \"Tensão, quer resolver\",\n    \"guide.extensions.title\": \"Extensões\",\n    \"guide.sixth.desc\": \"Quente, jazz\",\n    \"guide.seventh.desc\": \"Blues, dominante\",\n    \"guide.maj7.desc\": \"Sofisticado, suave\",\n    \"guide.ninth.desc\": \"Rico, complexo\",\n    \"guide.add9.desc\": \"Moderno, arejado\",\n    \"guide.alterations.title\": \"Alterações\",\n    \"guide.flat5.desc\": \"Escuro, instável\",\n    \"guide.sharp5.desc\": \"Tensão, misterioso\",\n    \"guide.flat9.desc\": \"Dissonante, jazz\",\n    \"guide.sharp11.desc\": \"Lídio, aberto\",\n    \"guide.popular.chords\": \"Acordes Populares\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Progressão popular\",\n    \"guide.chord.building.tips\": \"Dicas para Construir Acordes\",\n    \"guide.tip1\": \"Comece com acordes básicos (maior/menor) antes de adicionar extensões\",\n    \"guide.tip2\": \"Use acordes sus para criar tensão que resolve em maior/menor\",\n    \"guide.tip3\": \"Extensões (6, 7, 9) tornam os acordes mais interessantes\",\n    \"guide.tip4\": \"Experimente com diferentes inversões para progressões mais suaves\",\n    \"guide.tip5\": \"Ouça como os acordes soam juntos, não apenas individualmente\",\n    \"guide.diminished.fifth\": \"Quinta diminuta\",\n    \"guide.augmented.fifth\": \"Quinta aumentada\",\n    \"guide.diminished.ninth\": \"Nona diminuta\",\n    \"guide.augmented.eleventh\": \"Décima primeira aumentada\",\n    \n    // Song text\n    \"song.restart\": \"Recomeçar\",\n  },\n\n  // DUTCH\n  nl: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Druk op akkoorden en speel op snaren\",\n    \"app.loading\": \"Geluiden laden...\",\n    \n    // Settings\n    \"settings.title\": \"Instellingen\",\n    \"settings.chords\": \"Akkoord Instellingen\",\n    \"settings.language\": \"Taal\",\n    \"settings.language.select\": \"Selecteer Taal\",\n    \"settings.showSongText\": \"Toon Liedtekst\",\n    \"settings.showSongTextDescription\": \"Toon tekst en akkoorden boven de gitaar\",\n    \"settings.display\": \"Weergave\",\n    \"settings.presets\": \"Voorinstellingen\",\n    \"settings.builder\": \"Bouwer\",\n    \"settings.showAutoPlayer\": \"Toon auto-speler\",\n    \"settings.showMetronome\": \"Toon metronoom\",\n    \"settings.metronomeSettings\": \"Metronoom instellingen\",\n    \"settings.autoPlayer\": \"Auto-speler\",\n    \"settings.chordChangesEvery\": \"Akkoordwisselingen elke\",\n    \"settings.secondsBasedOnBPM\": \"seconden (gebaseerd op BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Slagen per minuut)\",\n    \"settings.quickSelectBPM\": \"Snelle BPM Selectie\",\n    \"settings.instrument\": \"Instrument\",\n    \"settings.instruments\": \"Instrumenten\",\n    \"settings.instrument.guitar\": \"Gitaar (Standaard)\",\n    \"settings.instrument.guitar-dropd\": \"Gitaar (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Gitaar (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Gitaar (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Gitaar (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Gitaar (Halve toon lager)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Gitaar (Hele toon lager)\",\n    \"settings.instrument.bass\": \"Bas\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandoline\",\n    \"settings.instrument.octavemandolin\": \"Octaaf mandoline\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 snaren)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 snaren)\",\n    \"settings.primary\": \"Primair\",\n    \"settings.setPrimary\": \"Instellen als primair\",\n     \n    \n    // Transposition\n    \"transpose.label\": \"Transpositie\",\n    \n    // 404 Page\n    \"notfound.message\": \"Oeps! Pagina niet gevonden\",\n    \"notfound.home\": \"Terug naar Home\",\n    \n    // Presets\n    \"presets.title\": \"Muziekstijl Presets\",\n    \"presets.more\": \"meer\",\n    \"presets.pop.name\": \"Pop/Rock Basis\",\n    \"presets.pop.description\": \"Klassieke pop- en rockakkoorden\",\n    \"presets.blues.name\": \"Blues Progressie\",\n    \"presets.blues.description\": \"12-maat blues en gerelateerde akkoorden\",\n    \"presets.jazz.name\": \"Jazz Standards\",\n    \"presets.jazz.description\": \"Jazzakkoorden met uitgebreide harmonieën\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Country en folk stijlakkoorden\",\n    \"presets.indie.name\": \"Indie/Alternatief\",\n    \"presets.indie.description\": \"Moderne indie en alternatieve akkoorden\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Krachtige rockakkoorden en powerchords\",\n    \n    // Chord tabs\n    \"chords.presets\": \"Presets\",\n    \"chords.library\": \"Bibliotheek\",\n    \"chords.builder\": \"Maak Akkoord\",\n    \"chords.guide\": \"Gids\",\n    \n    // Chord builder\n    \"builder.theory\": \"Muziektheorie\",\n    \"builder.manual\": \"Handmatig\",\n    \"builder.root\": \"Grondtoon\",\n    \"builder.type\": \"Akkoordtype\",\n    \"builder.generate\": \"Genereer Akkoord\",\n    \"builder.name\": \"Akkoorднaam\",\n    \"builder.name.placeholder\": \"bijv. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Fretpositie (0 = open snaar)\",\n    \"builder.create\": \"Maak Akkoord\",\n    \"builder.error.name\": \"Voer een naam in voor het akkoord\",\n    \"builder.success\": \"Akkoord gemaakt!\",\n    \"builder.success.desc\": \"is toegevoegd aan de bibliotheek\",\n    \n    // Chord library\n    \"library.search\": \"Zoek akkoorden\",\n    \"library.search.placeholder\": \"Type akkoardnaam...\",\n    \"library.left\": \"Linkerkant\",\n    \"library.right\": \"Rechterkant\",\n    \"library.available\": \"Beschikbare Akkoorden\",\n    \"library.custom\": \"Aangepast\",\n    \"library.exists\": \"Akkoord bestaat al\",\n    \"library.exists.left\": \"bestaat al aan de linkerkant\",\n    \"library.exists.right\": \"bestaat al aan de rechterkant\",\n    \"library.added\": \"Akkoord toegevoegd\",\n    \"library.added.left\": \"is toegevoegd aan de linkerkant\",\n    \"library.added.right\": \"is toegevoegd aan de rechterkant\",\n    \n    // Guide\n    \"guide.title\": \"Akkoardgids\",\n    \"guide.subtitle\": \"Leer akkoorden bouwen met verschillende kleuringen en variaties\",\n    \"guide.basics\": \"Basis\",\n    \"guide.extensions\": \"Uitbreidingen\",\n    \"guide.alterations\": \"Alteraties\",\n    \"guide.examples\": \"Voorbeelden\",\n    \n    // Chord types\n    \"chord.major\": \"Majeur\",\n    \"chord.minor\": \"Mineur\",\n    \"chord.dim\": \"Dim\",\n    \"chord.aug\": \"Aug\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominant)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Sleep over de snaren\",\n    \"guitar.chord.selected\": \"Geselecteerd akkoord\",\n    \"guitar.chord.select\": \"Selecteer een akkoord\",\n    \"guitar.chord.play\": \"Klik op snaren om te spelen\",\n    \n    // String names\n    \"string.e.high\": \"E (hoog)\",\n    \"string.b\": \"B\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\", \n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (laag)\",\n    \n    // Songs\n    \"songs.genre\": \"Genre\",\n    \"songs.difficulty\": \"Moeilijkheid\",\n    \"songs.all.genres\": \"Alle genres\",\n    \"songs.all.levels\": \"Alle niveaus\",\n    \"songs.no.results\": \"Geen liedjes gevonden met de geselecteerde filters.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Basis Akkoordtypen\",\n    \"guide.major\": \"Majeur\",\n    \"guide.major.desc\": \"Vrolijk, helder\",\n    \"guide.minor\": \"Mineur\",\n    \"guide.minor.desc\": \"Verdrietig, donker\",\n    \"guide.sus2.desc\": \"Open, zwevend\",\n    \"guide.sus4.desc\": \"Spanning, wil oplossen\",\n    \"guide.extensions.title\": \"Uitbreidingen\",\n    \"guide.sixth.desc\": \"Warm, jazzy\",\n    \"guide.seventh.desc\": \"Blues, dominant\",\n    \"guide.maj7.desc\": \"Verfijnd, zacht\",\n    \"guide.ninth.desc\": \"Rijk, complex\",\n    \"guide.add9.desc\": \"Modern, luchtig\",\n    \"guide.alterations.title\": \"Alteraties\",\n    \"guide.flat5.desc\": \"Donker, onstabiel\",\n    \"guide.sharp5.desc\": \"Spanning, mysterieus\",\n    \"guide.flat9.desc\": \"Dissonant, jazzy\",\n    \"guide.sharp11.desc\": \"Lydisch, open\",\n    \"guide.popular.chords\": \"Populaire Akkoorden\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Populaire progressie\",\n    \"guide.chord.building.tips\": \"Tips voor Akkoorden Bouwen\",\n    \"guide.tip1\": \"Begin met basisakkoorden (majeur/mineur) voordat je uitbreidingen toevoegt\",\n    \"guide.tip2\": \"Gebruik sus-akkoorden om spanning te creëren die oplost naar majeur/mineur\",\n    \"guide.tip3\": \"Uitbreidingen (6, 7, 9) maken akkoorden interessanter\",\n    \"guide.tip4\": \"Experimenteer met verschillende omkering voor vloeiende progressies\",\n    \"guide.tip5\": \"Luister hoe akkoorden samen klinken, niet alleen individueel\",\n    \"guide.diminished.fifth\": \"Verminderde kwint\",\n    \"guide.augmented.fifth\": \"Vergrote kwint\",\n    \"guide.diminished.ninth\": \"Verminderde nona\",\n    \"guide.augmented.eleventh\": \"Vergrote undeciem\",\n    \n    // Song text\n    \"song.restart\": \"Opnieuw beginnen\",\n  },\n\n  // DANISH\n  da: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Tryk på akkorder og spil på strenge\",\n    \"app.loading\": \"Indlæser lyde...\",\n    \n    // Settings\n    \"settings.title\": \"Indstillinger\",\n    \"settings.chords\": \"Akkord Indstillinger\",\n    \"settings.language\": \"Sprog\",\n    \"settings.language.select\": \"Vælg Sprog\",\n    \"settings.showSongText\": \"Vis Sangtekst\",\n    \"settings.showSongTextDescription\": \"Vis tekst og akkorder over guitaren\",\n    \"settings.display\": \"Visning\",\n    \"settings.presets\": \"Forudindstillinger\",\n    \"settings.builder\": \"Bygger\",\n    \"settings.showAutoPlayer\": \"Vis auto-afspiller\",\n    \"settings.showMetronome\": \"Vis metronom\",\n    \"settings.metronomeSettings\": \"Metronom indstillinger\",\n    \"settings.autoPlayer\": \"Auto-afspiller\",\n    \"settings.chordChangesEvery\": \"Akkordskift hver\",\n    \"settings.secondsBasedOnBPM\": \"sekund (baseret på BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Taktslag per minut)\",\n    \"settings.quickSelectBPM\": \"Hurtig BPM Valg\",\n    \"settings.instrument\": \"Instrument\",\n    \"settings.instruments\": \"Instrumenter\",\n    \"settings.instrument.guitar\": \"Gitar (Standard)\",\n    \"settings.instrument.guitar-dropd\": \"Gitar (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Gitar (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Gitar (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Gitar (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Gitar (Halv tone lavere)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Gitar (Hel tone lavere)\",\n    \"settings.instrument.bass\": \"Bass\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandolin\",\n    \"settings.instrument.octavemandolin\": \"Oktav mandolin\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 strenger)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 strenger)\",\n    \"settings.primary\": \"Primær\",\n    \"settings.setPrimary\": \"Sett som primær\",\n     \n    \n    // Transposition\n    \"transpose.label\": \"Transposition\",\n    \n    // 404 Page\n    \"notfound.message\": \"Ups! Siden blev ikke fundet\",\n    \"notfound.home\": \"Tilbage til Hjem\",\n    \n    // Presets\n    \"presets.title\": \"Musikstil Presets\",\n    \"presets.more\": \"mere\",\n    \"presets.pop.name\": \"Pop/Rock Basis\",\n    \"presets.pop.description\": \"Klassiske pop- og rockakkorder\",\n    \"presets.blues.name\": \"Blues Progression\",\n    \"presets.blues.description\": \"12-takt blues og relaterede akkorder\",\n    \"presets.jazz.name\": \"Jazz Standards\",\n    \"presets.jazz.description\": \"Jazzakkorder med udvidede harmonier\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Country og folk stil akkorder\",\n    \"presets.indie.name\": \"Indie/Alternativ\",\n    \"presets.indie.description\": \"Moderne indie og alternative akkorder\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Kraftfulde rockakkorder og powerchords\",\n    \n    // Chord tabs\n    \"chords.presets\": \"Presets\",\n    \"chords.library\": \"Bibliotek\",\n    \"chords.builder\": \"Lav Akkord\",\n    \"chords.guide\": \"Guide\",\n    \n    // Chord builder\n    \"builder.theory\": \"Musikteori\",\n    \"builder.manual\": \"Manuel\",\n    \"builder.root\": \"Grundtone\",\n    \"builder.type\": \"Akkordtype\",\n    \"builder.generate\": \"Generer Akkord\",\n    \"builder.name\": \"Akkordnavn\",\n    \"builder.name.placeholder\": \"f.eks. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Båndposition (0 = åben streng)\",\n    \"builder.create\": \"Lav Akkord\",\n    \"builder.error.name\": \"Indtast et navn til akkorden\",\n    \"builder.success\": \"Akkord lavet!\",\n    \"builder.success.desc\": \"er blevet tilføjet til biblioteket\",\n    \n    // Chord library\n    \"library.search\": \"Søg akkorder\",\n    \"library.search.placeholder\": \"Skriv akkordnavn...\",\n    \"library.left\": \"Venstre Side\",\n    \"library.right\": \"Højre Side\",\n    \"library.available\": \"Tilgængelige Akkorder\",\n    \"library.custom\": \"Tilpasset\",\n    \"library.exists\": \"Akkord findes allerede\",\n    \"library.exists.left\": \"findes allerede på venstre side\",\n    \"library.exists.right\": \"findes allerede på højre side\",\n    \"library.added\": \"Akkord tilføjet\",\n    \"library.added.left\": \"er blevet tilføjet til venstre side\",\n    \"library.added.right\": \"er blevet tilføjet til højre side\",\n    \n    // Guide\n    \"guide.title\": \"Akkordguide\",\n    \"guide.subtitle\": \"Lær at bygge akkorder med forskellige farvninger og variationer\",\n    \"guide.basics\": \"Grundlag\",\n    \"guide.extensions\": \"Udvidelser\",\n    \"guide.alterations\": \"Alterationer\",\n    \"guide.examples\": \"Eksempler\",\n    \n    // Chord types\n    \"chord.major\": \"Dur\",\n    \"chord.minor\": \"Mol\",\n    \"chord.dim\": \"Dim\",\n    \"chord.aug\": \"Aug\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominant)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Træk på strengene\",\n    \"guitar.chord.selected\": \"Valgt akkord\",\n    \"guitar.chord.select\": \"Vælg en akkord\",\n    \"guitar.chord.play\": \"Klik på strenge for at spille\",\n    \n    // String names\n    \"string.e.high\": \"E (høj)\",\n    \"string.b\": \"B\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\", \n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (lav)\",\n    \n    // Songs\n    \"songs.genre\": \"Genre\",\n    \"songs.difficulty\": \"Sværhedsgrad\",\n    \"songs.all.genres\": \"Alle genrer\",\n    \"songs.all.levels\": \"Alle niveauer\",\n    \"songs.no.results\": \"Ingen sange fundet med de valgte filtre.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Grundlæggende Akkordtyper\",\n    \"guide.major\": \"Dur\",\n    \"guide.major.desc\": \"Glad, lys\",\n    \"guide.minor\": \"Mol\",\n    \"guide.minor.desc\": \"Trist, mørk\",\n    \"guide.sus2.desc\": \"Åben, svævende\",\n    \"guide.sus4.desc\": \"Spænding, vil løses\",\n    \"guide.extensions.title\": \"Udvidelser\",\n    \"guide.sixth.desc\": \"Varm, jazz\",\n    \"guide.seventh.desc\": \"Blues, dominant\",\n    \"guide.maj7.desc\": \"Sofistikeret, blød\",\n    \"guide.ninth.desc\": \"Rig, kompleks\",\n    \"guide.add9.desc\": \"Moderne, luftig\",\n    \"guide.alterations.title\": \"Alterationer\",\n    \"guide.flat5.desc\": \"Mørk, ustabil\",\n    \"guide.sharp5.desc\": \"Spænding, mystisk\",\n    \"guide.flat9.desc\": \"Dissonant, jazz\",\n    \"guide.sharp11.desc\": \"Lydisk, åben\",\n    \"guide.popular.chords\": \"Populære Akkorder\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Populær progression\",\n    \"guide.chord.building.tips\": \"Tips til Akkordopbygning\",\n    \"guide.tip1\": \"Start med basisakkorder (dur/mol) før du tilføjer udvidelser\",\n    \"guide.tip2\": \"Brug sus-akkorder til at skabe spænding der løser til dur/mol\",\n    \"guide.tip3\": \"Udvidelser (6, 7, 9) gør akkorder mere interessante\",\n    \"guide.tip4\": \"Eksperimenter med forskellige vendinger for glattere progressioner\",\n    \"guide.tip5\": \"Lyt til hvordan akkorder lyder sammen, ikke kun individuelt\",\n    \"guide.diminished.fifth\": \"Formindsket kvint\",\n    \"guide.augmented.fifth\": \"Forstørret kvint\",\n    \"guide.diminished.ninth\": \"Formindsket nona\",\n    \"guide.augmented.eleventh\": \"Forstørret undecim\",\n    \n    // Song text\n    \"song.restart\": \"Genstart\",\n  },\n\n  // NORWEGIAN\n  no: {\n    // Header\n    \"app.title\": \"Chord Buddy\",\n    \"app.subtitle\": \"Trykk på akkorder og spill på strenger\",\n    \"app.loading\": \"Laster lyder...\",\n    \n    // Settings\n    \"settings.title\": \"Innstillinger\",\n    \"settings.chords\": \"Akkord Innstillinger\",\n    \"settings.language\": \"Språk\",\n    \"settings.language.select\": \"Velg Språk\",\n    \"settings.showSongText\": \"Vis Sangtekst\",\n    \"settings.showSongTextDescription\": \"Vis tekst og akkorder over gitaren\",\n    \"settings.display\": \"Visning\",\n    \"settings.presets\": \"Forhåndsinnstillinger\",\n    \"settings.builder\": \"Bygger\",\n    \"settings.showAutoPlayer\": \"Vis auto-spiller\",\n    \"settings.showMetronome\": \"Vis metronom\",\n    \"settings.metronomeSettings\": \"Metronom innstillinger\",\n    \"settings.autoPlayer\": \"Auto-spiller\",\n    \"settings.chordChangesEvery\": \"Akkordbytte hver\",\n    \"settings.secondsBasedOnBPM\": \"sekund (basert på BPM × 2)\",\n    \"settings.bpmLabel\": \"BPM (Slag per minutt)\",\n    \"settings.quickSelectBPM\": \"Hurtigvalg BPM\",\n    \"settings.instrument\": \"Instrument\",\n    \"settings.instruments\": \"Instrumenter\",\n    \"settings.instrument.guitar\": \"Gitar (Standard)\",\n    \"settings.instrument.guitar-dropd\": \"Gitar (Drop D)\",\n    \"settings.instrument.guitar-openg\": \"Gitar (Open G)\",\n    \"settings.instrument.guitar-opend\": \"Gitar (Open D)\",\n    \"settings.instrument.guitar-dadgad\": \"Gitar (DADGAD)\",\n    \"settings.instrument.guitar-halfstepdown\": \"Gitar (Halv tone lavere)\",\n    \"settings.instrument.guitar-wholestepdown\": \"Gitar (Hel tone lavere)\",\n    \"settings.instrument.bass\": \"Bass\", \n    \"settings.instrument.ukulele\": \"Ukulele\",\n    \"settings.instrument.mandolin\": \"Mandolin\",\n    \"settings.instrument.octavemandolin\": \"Oktav-mandolin\",\n    \"settings.instrument.bouzouki\": \"Bouzouki\",\n    \"settings.instrument.balalaika\": \"Balalaika\",\n    \"settings.instrument.banjo4\": \"Banjo (4 strenger)\",\n    \"settings.instrument.banjo5\": \"Banjo (5 strenger)\",\n    \"settings.primary\": \"Primær\",\n    \"settings.setPrimary\": \"Sett som primær\",\n     \n    // Transposition\n    \"transpose.label\": \"Transposisjon\",\n    \n    // 404 Page\n    \"notfound.message\": \"Oops! Siden ble ikke funnet\",\n    \"notfound.home\": \"Tilbake til Hjem\",\n    \n    // Presets\n    \"presets.title\": \"Musikstil Presets\",\n    \"presets.more\": \"mer\",\n    \"presets.pop.name\": \"Pop/Rock Basis\",\n    \"presets.pop.description\": \"Klassiske pop- og rockakkorder\",\n    \"presets.blues.name\": \"Blues Progresjon\",\n    \"presets.blues.description\": \"12-takt blues og relaterte akkorder\",\n    \"presets.jazz.name\": \"Jazz Standards\",\n    \"presets.jazz.description\": \"Jazzakkorder med utvidede harmonier\",\n    \"presets.country.name\": \"Country/Folk\",\n    \"presets.country.description\": \"Country og folk stil akkorder\",\n    \"presets.indie.name\": \"Indie/Alternativ\",\n    \"presets.indie.description\": \"Moderne indie og alternative akkorder\",\n    \"presets.rock.name\": \"Rock Power\",\n    \"presets.rock.description\": \"Kraftige rockakkorder og powerchords\",\n    \n    // Chord tabs\n    \"chords.presets\": \"Presets\",\n    \"chords.library\": \"Bibliotek\",\n    \"chords.builder\": \"Lag Akkord\",\n    \"chords.guide\": \"Guide\",\n    \n    // Chord builder\n    \"builder.theory\": \"Musikteori\",\n    \"builder.manual\": \"Manuell\",\n    \"builder.root\": \"Grunntone\",\n    \"builder.type\": \"Akkordtype\",\n    \"builder.generate\": \"Generer Akkord\",\n    \"builder.name\": \"Akkordnavn\",\n    \"builder.name.placeholder\": \"f.eks. Cmaj7, Em9, Dsus4\",\n    \"builder.fret\": \"Båndposisjon (0 = åpen streng)\",\n    \"builder.create\": \"Lag Akkord\",\n    \"builder.error.name\": \"Skriv inn et navn for akkorden\",\n    \"builder.success\": \"Akkord opprettet!\",\n    \"builder.success.desc\": \"har blitt lagt til i biblioteket\",\n    \n    // Chord library\n    \"library.search\": \"Søk akkorder\",\n    \"library.search.placeholder\": \"Skriv akkordnavn...\",\n    \"library.left\": \"Venstre Side\",\n    \"library.right\": \"Høyre Side\",\n    \"library.available\": \"Tilgjengelige Akkorder\",\n    \"library.custom\": \"Tilpasset\",\n    \"library.exists\": \"Akkord finnes allerede\",\n    \"library.exists.left\": \"finnes allerede på venstre side\",\n    \"library.exists.right\": \"finnes allerede på høyre side\",\n    \"library.added\": \"Akkord lagt til\",\n    \"library.added.left\": \"har blitt lagt til på venstre side\",\n    \"library.added.right\": \"har blitt lagt til på høyre side\",\n    \n    // Guide\n    \"guide.title\": \"Akkordguide\",\n    \"guide.subtitle\": \"Lær å bygge akkorder med ulike farginger og variasjoner\",\n    \"guide.basics\": \"Grunnlag\",\n    \"guide.extensions\": \"Utvidelser\",\n    \"guide.alterations\": \"Alterasjoner\",\n    \"guide.examples\": \"Eksempler\",\n    \n    // Chord types\n    \"chord.major\": \"Dur\",\n    \"chord.minor\": \"Moll\",\n    \"chord.dim\": \"Dim\",\n    \"chord.aug\": \"Aug\",\n    \"chord.sus2\": \"Sus2\",\n    \"chord.sus4\": \"Sus4\",\n    \"chord.maj7\": \"Maj7\",\n    \"chord.min7\": \"Min7\",\n    \"chord.dom7\": \"7 (Dominant)\",\n    \"chord.add9\": \"Add9\",\n    \"chord.maj9\": \"Maj9\",\n    \"chord.6\": \"6\",\n    \n    // Guitar interface\n    \"guitar.strings.instruction\": \"Dra på strengene\",\n    \"guitar.chord.selected\": \"Valgt akkord\",\n    \"guitar.chord.select\": \"Velg en akkord\",\n    \"guitar.chord.play\": \"Klikk på strenger for å spille\",\n    \n    // String names\n    \"string.e.high\": \"E (høy)\",\n    \"string.b\": \"B\",\n    \"string.g\": \"G\",\n    \"string.d\": \"D\", \n    \"string.a\": \"A\",\n    \"string.e.low\": \"E (lav)\",\n    \n    // Songs\n    \"songs.genre\": \"Sjanger\",\n    \"songs.difficulty\": \"Vanskelighetsgrad\",\n    \"songs.all.genres\": \"Alle sjangre\",\n    \"songs.all.levels\": \"Alle nivåer\",\n    \"songs.no.results\": \"Ingen sanger funnet med de valgte filtrene.\",\n    \n    // Guide content\n    \"guide.basic.chord.types\": \"Grunnleggende Akkordtyper\",\n    \"guide.major\": \"Dur\",\n    \"guide.major.desc\": \"Glad, lys\",\n    \"guide.minor\": \"Moll\",\n    \"guide.minor.desc\": \"Trist, mørk\",\n    \"guide.sus2.desc\": \"Åpen, svevende\",\n    \"guide.sus4.desc\": \"Spenning, vil løses\",\n    \"guide.extensions.title\": \"Utvidelser\",\n    \"guide.sixth.desc\": \"Varm, jazz\",\n    \"guide.seventh.desc\": \"Blues, dominant\",\n    \"guide.maj7.desc\": \"Sofistikert, myk\",\n    \"guide.ninth.desc\": \"Rik, kompleks\",\n    \"guide.add9.desc\": \"Moderne, luftig\",\n    \"guide.alterations.title\": \"Alterasjoner\",\n    \"guide.flat5.desc\": \"Mørk, ustabil\",\n    \"guide.sharp5.desc\": \"Spenning, mystisk\",\n    \"guide.flat9.desc\": \"Dissonant, jazz\",\n    \"guide.sharp11.desc\": \"Lydisk, åpen\",\n    \"guide.popular.chords\": \"Populære Akkorder\",\n    \"guide.rock.pop\": \"Rock/Pop\",\n    \"guide.jazz\": \"Jazz\",\n    \"guide.popular.progression\": \"Populær progresjon\",\n    \"guide.chord.building.tips\": \"Tips for Akkordbygging\",\n    \"guide.tip1\": \"Start med grunnakkorder (dur/moll) før du legger til utvidelser\",\n    \"guide.tip2\": \"Bruk sus-akkorder for å skape spenning som løser til dur/moll\",\n    \"guide.tip3\": \"Utvidelser (6, 7, 9) gjør akkorder mer interessante\",\n    \"guide.tip4\": \"Eksperimenter med ulike vendinger for glattere progresjoner\",\n    \"guide.tip5\": \"Lytt til hvordan akkorder høres ut sammen, ikke bare individuelt\",\n    \"guide.diminished.fifth\": \"Forminsket kvint\",\n    \"guide.augmented.fifth\": \"Forstørret kvint\",\n    \"guide.diminished.ninth\": \"Forminsket nona\",\n    \"guide.augmented.eleventh\": \"Forstørret undecim\",\n    \n    // Song text\n    \"song.restart\": \"Start på nytt\",\n  }\n};\n\nconst detectBrowserLanguage = (): Language => {\n  // Always return English as default language\n  return 'en';\n};\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport const LanguageProvider = ({ children }: LanguageProviderProps) => {\n  const [language, setLanguage] = useState<Language>(() => {\n    const saved = localStorage.getItem('smart-guitar-language');\n    if (saved && Object.keys(translations).includes(saved)) {\n      return saved as Language;\n    }\n    return detectBrowserLanguage();\n  });\n\n  useEffect(() => {\n    localStorage.setItem('smart-guitar-language', language);\n  }, [language]);\n\n  const t = (key: string): string => {\n    return translations[language]?.[key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/data/chordLibrary.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":4,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Guitar Chord Library - Complete database with all chords used in songs\n// Contains fingerpositions for all chords found in the song collection\n\nexport interface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\n// Complete chord library with all chords used in songs\nexport const CHORD_LIBRARY: { [key: string]: Chord } = {\n  // Major Chords\n  'C': { name: 'C', fingers: [-1, 3, 2, 0, 1, 0], isCustom: false },\n  'D': { name: 'D', fingers: [-1, -1, 0, 2, 3, 2], isCustom: false },\n  'E': { name: 'E', fingers: [0, 2, 2, 1, 0, 0], isCustom: false },\n  'F': { name: 'F', fingers: [1, 3, 3, 2, 1, 1], isCustom: false },\n  'G': { name: 'G', fingers: [3, 2, 0, 0, 3, 3], isCustom: false },\n  'A': { name: 'A', fingers: [-1, 0, 2, 2, 2, 0], isCustom: false },\n  'B': { name: 'B', fingers: [-1, 2, 4, 4, 4, 2], isCustom: false },\n  'Bb': { name: 'Bb', fingers: [-1, 1, 3, 3, 3, 1], isCustom: false },\n  'Eb': { name: 'Eb', fingers: [-1, -1, 1, 3, 4, 3], isCustom: false },\n  'F#': { name: 'F#', fingers: [2, 4, 4, 3, 2, 2], isCustom: false },\n  \n  // Minor Chords\n  'Am': { name: 'Am', fingers: [-1, 0, 2, 2, 1, 0], isCustom: false },\n  'Dm': { name: 'Dm', fingers: [-1, -1, 0, 2, 3, 1], isCustom: false },\n  'Em': { name: 'Em', fingers: [0, 2, 2, 0, 0, 0], isCustom: false },\n  'Fm': { name: 'Fm', fingers: [1, 3, 3, 1, 1, 1], isCustom: false },\n  'Gm': { name: 'Gm', fingers: [3, 5, 5, 3, 3, 3], isCustom: false },\n  'Bm': { name: 'Bm', fingers: [-1, 2, 4, 4, 3, 2], isCustom: false },\n  'Cm': { name: 'Cm', fingers: [-1, 3, 5, 5, 4, 3], isCustom: false },\n  'F#m': { name: 'F#m', fingers: [2, 4, 4, 2, 2, 2], isCustom: false },\n  \n  // 7th Chords\n  'C7': { name: 'C7', fingers: [-1, 3, 2, 3, 1, 0], isCustom: false },\n  'D7': { name: 'D7', fingers: [-1, -1, 0, 2, 1, 2], isCustom: false },\n  'E7': { name: 'E7', fingers: [0, 2, 0, 1, 0, 0], isCustom: false },\n  'F7': { name: 'F7', fingers: [1, 3, 1, 2, 1, 1], isCustom: false },\n  'G7': { name: 'G7', fingers: [3, 2, 0, 0, 0, 1], isCustom: false },\n  'A7': { name: 'A7', fingers: [-1, 0, 2, 0, 2, 0], isCustom: false },\n  'B7': { name: 'B7', fingers: [-1, 2, 1, 2, 0, 2], isCustom: false },\n  'Bb7': { name: 'Bb7', fingers: [-1, 1, 3, 1, 3, 1], isCustom: false },\n  'Eb7': { name: 'Eb7', fingers: [-1, -1, 1, 3, 2, 3], isCustom: false },\n  'F#7': { name: 'F#7', fingers: [2, 4, 2, 3, 2, 2], isCustom: false },\n  \n  // Major 7th Chords\n  'Cmaj7': { name: 'Cmaj7', fingers: [-1, 3, 2, 0, 0, 0], isCustom: false },\n  'Dmaj7': { name: 'Dmaj7', fingers: [-1, -1, 0, 2, 2, 2], isCustom: false },\n  'Emaj7': { name: 'Emaj7', fingers: [0, 2, 1, 1, 0, 0], isCustom: false },\n  'Fmaj7': { name: 'Fmaj7', fingers: [1, 3, 3, 2, 1, 0], isCustom: false },\n  'Gmaj7': { name: 'Gmaj7', fingers: [3, 2, 0, 0, 0, 2], isCustom: false },\n  'Amaj7': { name: 'Amaj7', fingers: [-1, 0, 2, 1, 2, 0], isCustom: false },\n  \n  // Add9 and Sus chords\n  'Cadd9': { name: 'Cadd9', fingers: [-1, 3, 2, 0, 3, 0], isCustom: false },\n  'Dsus2': { name: 'Dsus2', fingers: [-1, -1, 0, 2, 3, 0], isCustom: false },\n  'Dsus4': { name: 'Dsus4', fingers: [-1, -1, 0, 2, 3, 3], isCustom: false },\n  'Gsus4': { name: 'Gsus4', fingers: [3, 3, 0, 0, 3, 3], isCustom: false },\n  'Asus2': { name: 'Asus2', fingers: [-1, 0, 2, 2, 0, 0], isCustom: false },\n  'Asus4': { name: 'Asus4', fingers: [-1, 0, 2, 2, 3, 0], isCustom: false },\n  \n  // Minor 7th Chords\n  'Am7': { name: 'Am7', fingers: [-1, 0, 2, 0, 1, 0], isCustom: false },\n  'Dm7': { name: 'Dm7', fingers: [-1, -1, 0, 2, 1, 1], isCustom: false },\n  'Em7': { name: 'Em7', fingers: [0, 2, 0, 0, 0, 0], isCustom: false },\n  'Gm7': { name: 'Gm7', fingers: [3, 5, 3, 3, 3, 3], isCustom: false },\n  \n  // Other special chords\n  'Csus2': { name: 'Csus2', fingers: [-1, 3, 0, 0, 3, 0], isCustom: false },\n  'Fsus2': { name: 'Fsus2', fingers: [1, 3, 1, 1, 1, 1], isCustom: false },\n  'Gsus2': { name: 'Gsus2', fingers: [3, 0, 0, 0, 3, 3], isCustom: false },\n  \n  // Power chords \n  'C5': { name: 'C5', fingers: [-1, 3, 5, 5, -1, -1], isCustom: false },\n  'D5': { name: 'D5', fingers: [-1, -1, 0, 2, 3, -1], isCustom: false },\n  'E5': { name: 'E5', fingers: [0, 2, 2, -1, -1, -1], isCustom: false },\n  'F5': { name: 'F5', fingers: [1, 3, 3, -1, -1, -1], isCustom: false },\n  'G5': { name: 'G5', fingers: [3, 5, 5, -1, -1, -1], isCustom: false },\n  'A5': { name: 'A5', fingers: [-1, 0, 2, 2, -1, -1], isCustom: false },\n  'B5': { name: 'B5', fingers: [-1, 2, 4, 4, -1, -1], isCustom: false },\n};\n\n// Helper function to get chord by name\nexport const getChord = (name: string): Chord | null => {\n  return CHORD_LIBRARY[name] || null;\n};\n\n// Get all chords for a specific category\nexport const getMajorChords = (): Chord[] => {\n  return Object.values(CHORD_LIBRARY).filter(chord => \n    !chord.name.includes('m') && !chord.name.includes('7') && \n    !chord.name.includes('sus') && !chord.name.includes('add') &&\n    !chord.name.includes('5') && !chord.name.includes('dim') &&\n    !chord.name.includes('aug')\n  );\n};\n\nexport const getMinorChords = (): Chord[] => {\n  return Object.values(CHORD_LIBRARY).filter(chord => \n    chord.name.includes('m') && !chord.name.includes('7') &&\n    !chord.name.includes('maj') && !chord.name.includes('dim')\n  );\n};\n\nexport const getSeventhChords = (): Chord[] => {\n  return Object.values(CHORD_LIBRARY).filter(chord => \n    chord.name.includes('7')\n  );\n};\n\nexport const getSuspendedChords = (): Chord[] => {\n  return Object.values(CHORD_LIBRARY).filter(chord => \n    chord.name.includes('sus')\n  );\n};\n\nexport const getPowerChords = (): Chord[] => {\n  return Object.values(CHORD_LIBRARY).filter(chord => \n    chord.name.includes('5') && !chord.name.includes('sus')\n  );\n};\n\nexport const getDiminishedChords = (): Chord[] => {\n  return Object.values(CHORD_LIBRARY).filter(chord => \n    chord.name.includes('dim')\n  );\n};\n\nexport const getAugmentedChords = (): Chord[] => {\n  return Object.values(CHORD_LIBRARY).filter(chord => \n    chord.name.includes('aug')\n  );\n};\n\n// Default chord sets for the app\nexport const getDefaultLeftChords = (): Chord[] => {\n  const chordNames = ['C', 'F', 'Am', 'Dm', 'E', 'G', 'Em', 'A', 'D', 'Gm'];\n  return chordNames.map(name => CHORD_LIBRARY[name]).filter(Boolean);\n};\n\nexport const getDefaultRightChords = (): Chord[] => {\n  const chordNames = ['G', 'Em', 'D', 'A', 'C', 'F', 'B', 'Bb', 'Bm', 'Gm'];\n  return chordNames.map(name => CHORD_LIBRARY[name]).filter(Boolean);\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/data/readonly/chordDatabase.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":26,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * READONLY CHORD DATABASE\n * \n * This file provides access to comprehensive chord databases for multiple string instruments.\n * The data is loaded from external JSON files containing thousands of chord fingerings.\n * \n * IMPORTANT: This data is considered immutable and should NOT be modified after loading.\n */\n\nimport guitarChordsData from './guitar-chords.json';\nimport guitarDropDChordsData from './guitar-dropd-chords.json';\nimport guitarOpenGChordsData from './guitar-openg-chords.json';\nimport guitarOpenDChordsData from './guitar-opend-chords.json';\nimport guitarDADGADChordsData from './guitar-dadgad-chords.json';\nimport guitarHalfStepDownChordsData from './guitar-halfstepdown-chords.json';\nimport guitarWholeStepDownChordsData from './guitar-wholestepdown-chords.json';\nimport ukuleleChordsData from './ukulele-chords.json';\nimport bassChordsData from './bass-chords.json';\nimport mandolinChordsData from './mandolin-chords.json';\nimport octavemandolinChordsData from './octavemandolin-chords.json';\nimport bouzoukiChordsData from './bouzouki-chords.json';\nimport balalaikaChordsData from './balalaika-chords.json';\nimport banjo4ChordsData from './banjo4-chords.json';\nimport banjo5ChordsData from './banjo5-chords.json';\n\nexport interface ReadonlyFingeringPosition {\n  readonly stringIndex: number;\n  readonly fret: number; // -1 for muted, 0 for open, >0 for fretted\n  readonly note: string;\n  readonly isRoot: boolean;\n  readonly interval?: string; // Optional: musical interval from root\n}\n\nexport interface ReadonlyChordFingering {\n  readonly chord: string;\n  readonly suffix: string; // \"\", \"m\", \"7\", \"maj7\", \"sus4\", etc.\n  readonly positions: readonly ReadonlyFingeringPosition[];\n  readonly difficulty: 1 | 2 | 3 | 4 | 5; // 1 = beginner, 5 = advanced\n  readonly barreChord: boolean;\n}\n\nexport interface ReadonlyInstrumentChords {\n  readonly instrument: string;\n  readonly tuning: readonly string[];\n  readonly chords: { readonly [key: string]: readonly ReadonlyChordFingering[] };\n}\n\n// Convert external guitar chord data to our format\nconst convertGuitarChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  \n  // Access the chords from the JSON structure\n  const chords = (guitarChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    \n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      // Convert fret positions to our format\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0]; // Take the first position\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n            \n            // Calculate note for guitar\n            const guitarStrings = [\"E\", \"A\", \"D\", \"G\", \"B\", \"e\"];\n            const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            let calculatedNote = \"\";\n            \n            if (adjustedFret === -1) {\n              calculatedNote = \"\"; // Muted string\n            } else {\n              const openNote = guitarStrings[stringIndex];\n              const baseNote = openNote.replace(/[0-9]/g, \"\"); // Remove octave\n              const openNoteIndex = noteSequence.indexOf(baseNote);\n              const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n              calculatedNote = noteSequence[targetNoteIndex];\n            }\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: stringIndex === 0, // Simplified - first occurrence is root\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey, // Use the chordKey from the JSON structure\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"guitar\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"e\"],\n    chords: convertedChords\n  };\n};\n\n// Convert Guitar Drop D chord data\nfunction convertGuitarDropDChordData(): ReadonlyInstrumentChords {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (guitarDropDChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n            const dropDStrings = [\"D\", \"A\", \"D\", \"G\", \"B\", \"e\"];\n            const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            let calculatedNote = \"\";\n            \n            if (adjustedFret === -1) {\n              calculatedNote = \"\";\n            } else {\n              const openNote = dropDStrings[stringIndex];\n              const baseNote = openNote.replace(/[0-9]/g, \"\");\n              const openNoteIndex = noteSequence.indexOf(baseNote);\n              const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n              calculatedNote = noteSequence[targetNoteIndex];\n            }\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: stringIndex === 0,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"guitar-dropd\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"B\", \"e\"],\n    chords: convertedChords\n  };\n}\n\n// Convert Guitar Open G chord data  \nfunction convertGuitarOpenGChordData(): ReadonlyInstrumentChords {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (guitarOpenGChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n            const openGStrings = [\"D\", \"G\", \"D\", \"G\", \"B\", \"D\"];\n            const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            let calculatedNote = \"\";\n            \n            if (adjustedFret === -1) {\n              calculatedNote = \"\";\n            } else {\n              const openNote = openGStrings[stringIndex];\n              const baseNote = openNote.replace(/[0-9]/g, \"\");\n              const openNoteIndex = noteSequence.indexOf(baseNote);\n              const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n              calculatedNote = noteSequence[targetNoteIndex];\n            }\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: stringIndex === 0,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"guitar-openg\",\n    tuning: [\"D\", \"G\", \"D\", \"G\", \"B\", \"D\"],\n    chords: convertedChords\n  };\n}\n\n// Convert Guitar Open D chord data\nfunction convertGuitarOpenDChordData(): ReadonlyInstrumentChords {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (guitarOpenDChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n            const openDStrings = [\"D\", \"A\", \"D\", \"F#\", \"A\", \"D\"];\n            const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            let calculatedNote = \"\";\n            \n            if (adjustedFret === -1) {\n              calculatedNote = \"\";\n            } else {\n              const openNote = openDStrings[stringIndex];\n              const baseNote = openNote.replace(/[0-9]/g, \"\");\n              const openNoteIndex = noteSequence.indexOf(baseNote);\n              const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n              calculatedNote = noteSequence[targetNoteIndex];\n            }\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: stringIndex === 0,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"guitar-opend\",\n    tuning: [\"D\", \"A\", \"D\", \"F#\", \"A\", \"D\"],\n    chords: convertedChords\n  };\n}\n\n// Convert Guitar DADGAD chord data\nfunction convertGuitarDADGADChordData(): ReadonlyInstrumentChords {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (guitarDADGADChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n            const dadgadStrings = [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"];\n            const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            let calculatedNote = \"\";\n            \n            if (adjustedFret === -1) {\n              calculatedNote = \"\";\n            } else {\n              const openNote = dadgadStrings[stringIndex];\n              const baseNote = openNote.replace(/[0-9]/g, \"\");\n              const openNoteIndex = noteSequence.indexOf(baseNote);\n              const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n              calculatedNote = noteSequence[targetNoteIndex];\n            }\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: stringIndex === 0,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"guitar-dadgad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"],\n    chords: convertedChords\n  };\n}\n\n// Convert Guitar Half-step Down chord data\nfunction convertGuitarHalfStepDownChordData(): ReadonlyInstrumentChords {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (guitarHalfStepDownChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n            const halfStepDownStrings = [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"];\n            const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            let calculatedNote = \"\";\n            \n            if (adjustedFret === -1) {\n              calculatedNote = \"\";\n            } else {\n              const openNote = halfStepDownStrings[stringIndex];\n              const baseNote = openNote.replace(/[0-9]/g, \"\");\n              const openNoteIndex = noteSequence.indexOf(baseNote);\n              const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n              calculatedNote = noteSequence[targetNoteIndex];\n            }\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: stringIndex === 0,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"guitar-halfstepdown\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"],\n    chords: convertedChords\n  };\n}\n\n// Convert Guitar Whole-step Down chord data\nfunction convertGuitarWholeStepDownChordData(): ReadonlyInstrumentChords {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (guitarWholeStepDownChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n            const wholeStepDownStrings = [\"D\", \"G\", \"C\", \"F\", \"A\", \"D\"];\n            const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            let calculatedNote = \"\";\n            \n            if (adjustedFret === -1) {\n              calculatedNote = \"\";\n            } else {\n              const openNote = wholeStepDownStrings[stringIndex];\n              const baseNote = openNote.replace(/[0-9]/g, \"\");\n              const openNoteIndex = noteSequence.indexOf(baseNote);\n              const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n              calculatedNote = noteSequence[targetNoteIndex];\n            }\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: stringIndex === 0,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"guitar-wholestepdown\",\n    tuning: [\"D\", \"G\", \"C\", \"F\", \"A\", \"D\"],\n    chords: convertedChords\n  };\n}\n\n// Convert external ukulele chord data to our format\nconst convertUkuleleChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  \n  // Access the chords from the JSON structure  \n  const chords = (ukuleleChordsData as any).chords;\n  \n  if (chords) {\n    Object.keys(chords).forEach(chordKey => {\n      const chordVariations = chords[chordKey];\n      \n      if (Array.isArray(chordVariations)) {\n        convertedChords[chordKey] = chordVariations.map((variation: any) => {\n          const positions: ReadonlyFingeringPosition[] = [];\n          \n          if (variation.positions && variation.positions.length > 0) {\n            const position = variation.positions[0];\n            const frets = position.frets || [];\n            const baseFret = position.baseFret || 1;\n            \n            frets.forEach((fret: number, stringIndex: number) => {\n              if (fret !== undefined) {\n                const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret + baseFret - 1);\n                \n                // Calculate note for ukulele\n                const ukuleleStrings = [\"G\", \"C\", \"E\", \"A\"];\n                const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n                let calculatedNote = \"\";\n                \n                if (adjustedFret === -1) {\n                  calculatedNote = \"\"; // Muted string\n                } else {\n                  const openNote = ukuleleStrings[stringIndex];\n                  const baseNote = openNote.replace(/[0-9]/g, \"\"); // Remove octave\n                  const openNoteIndex = noteSequence.indexOf(baseNote);\n                  const targetNoteIndex = (openNoteIndex + adjustedFret) % 12;\n                  calculatedNote = noteSequence[targetNoteIndex];\n                }\n                \n                positions.push({\n                  stringIndex,\n                  fret: adjustedFret,\n                  note: calculatedNote,\n                  isRoot: stringIndex === 0,\n                  interval: \"1\"\n                });\n              }\n            });\n          }\n          \n          return {\n            chord: chordKey, // Use the chordKey from the JSON structure\n            suffix: variation.suffix || \"major\",\n            positions,\n            difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n            barreChord: variation.barres ? variation.barres.length > 0 : false\n          };\n        });\n      }\n    });\n  }\n  \n  return {\n    instrument: \"ukulele\",\n    tuning: [\"G\", \"C\", \"E\", \"A\"],\n    chords: convertedChords\n  };\n};\n\n// Convert external bass chord data to our format\nconst convertBassChordsData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  \n  // Bass tuning for note calculation\n  const bassStrings = [\"E\", \"A\", \"D\", \"G\"];\n  const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  \n  // Helper function to calculate note from string and fret\n  const calculateNote = (stringIndex: number, fret: number): string => {\n    if (fret === -1) return \"\"; // Muted string\n    if (fret === 0) return bassStrings[stringIndex]; // Open string\n    \n    const openNote = bassStrings[stringIndex];\n    const openNoteIndex = noteSequence.indexOf(openNote);\n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    return noteSequence[targetNoteIndex];\n  };\n  \n  // Access the chords from the JSON structure\n  const chords = (bassChordsData as any).chords;\n  \n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    \n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      \n      // Convert fret positions to our format\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0]; // Take the first position\n        const frets = position.frets || [];\n        const baseFret = position.baseFret || 1;\n        \n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const adjustedFret = fret === -1 ? -1 : (fret === 0 ? 0 : fret);\n            const calculatedNote = calculateNote(stringIndex, adjustedFret);\n            \n            positions.push({\n              stringIndex,\n              fret: adjustedFret,\n              note: calculatedNote,\n              isRoot: calculatedNote === chordKey && fret !== -1, // Root is the chord's key note\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      \n      return {\n        chord: chordKey, // Use the chordKey from the JSON structure\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n  \n  return {\n    instrument: \"bass\",\n    tuning: [\"E\", \"A\", \"D\", \"G\"],\n    chords: convertedChords\n  };\n};\n\n// Convert mandolin chord data\nconst convertMandolinChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (mandolinChordsData as any).chords;\n  const mandolinStrings = [\"G\", \"D\", \"A\", \"E\"];\n  const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  const calculateNote = (stringIndex: number, fret: number): string => {\n    if (fret === -1) return \"\";\n    if (fret === 0) return mandolinStrings[stringIndex];\n    const openNote = mandolinStrings[stringIndex];\n    const openNoteIndex = noteSequence.indexOf(openNote);\n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    return noteSequence[targetNoteIndex];\n  };\n\n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const calculatedNote = calculateNote(stringIndex, fret);\n            positions.push({\n              stringIndex,\n              fret,\n              note: calculatedNote,\n              isRoot: calculatedNote === chordKey && fret !== -1,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n\n  return {\n    instrument: \"mandolin\",\n    tuning: [\"G\", \"D\", \"A\", \"E\"],\n    chords: convertedChords\n  };\n};\n\n// Convert octave mandolin chord data\nconst convertOctaveMandolinChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (octavemandolinChordsData as any).chords;\n  const strings = [\"G\", \"D\", \"A\", \"E\"];\n  const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  const calculateNote = (stringIndex: number, fret: number): string => {\n    if (fret === -1) return \"\";\n    if (fret === 0) return strings[stringIndex];\n    const openNote = strings[stringIndex];\n    const openNoteIndex = noteSequence.indexOf(openNote);\n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    return noteSequence[targetNoteIndex];\n  };\n\n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const calculatedNote = calculateNote(stringIndex, fret);\n            positions.push({\n              stringIndex,\n              fret,\n              note: calculatedNote,\n              isRoot: calculatedNote === chordKey && fret !== -1,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n\n  return {\n    instrument: \"octavemandolin\",\n    tuning: [\"G\", \"D\", \"A\", \"E\"],\n    chords: convertedChords\n  };\n};\n\n// Convert bouzouki chord data\nconst convertBouzoukiChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (bouzoukiChordsData as any).chords;\n  const strings = [\"C\", \"F\", \"A\", \"D\"];\n  const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  const calculateNote = (stringIndex: number, fret: number): string => {\n    if (fret === -1) return \"\";\n    if (fret === 0) return strings[stringIndex];\n    const openNote = strings[stringIndex];\n    const openNoteIndex = noteSequence.indexOf(openNote);\n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    return noteSequence[targetNoteIndex];\n  };\n\n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const calculatedNote = calculateNote(stringIndex, fret);\n            positions.push({\n              stringIndex,\n              fret,\n              note: calculatedNote,\n              isRoot: calculatedNote === chordKey && fret !== -1,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n\n  return {\n    instrument: \"bouzouki\",\n    tuning: [\"C\", \"F\", \"A\", \"D\"],\n    chords: convertedChords\n  };\n};\n\n// Convert balalaika chord data\nconst convertBalalaikaChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (balalaikaChordsData as any).chords;\n  const strings = [\"E\", \"E\", \"A\"];\n  const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  const calculateNote = (stringIndex: number, fret: number): string => {\n    if (fret === -1) return \"\";\n    if (fret === 0) return strings[stringIndex];\n    const openNote = strings[stringIndex];\n    const openNoteIndex = noteSequence.indexOf(openNote);\n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    return noteSequence[targetNoteIndex];\n  };\n\n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const calculatedNote = calculateNote(stringIndex, fret);\n            positions.push({\n              stringIndex,\n              fret,\n              note: calculatedNote,\n              isRoot: calculatedNote === chordKey && fret !== -1,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n\n  return {\n    instrument: \"balalaika\",\n    tuning: [\"E\", \"E\", \"A\"],\n    chords: convertedChords\n  };\n};\n\n// Convert banjo4 chord data\nconst convertBanjo4ChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (banjo4ChordsData as any).chords;\n  const strings = [\"C\", \"G\", \"B\", \"D\"];\n  const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  const calculateNote = (stringIndex: number, fret: number): string => {\n    if (fret === -1) return \"\";\n    if (fret === 0) return strings[stringIndex];\n    const openNote = strings[stringIndex];\n    const openNoteIndex = noteSequence.indexOf(openNote);\n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    return noteSequence[targetNoteIndex];\n  };\n\n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const calculatedNote = calculateNote(stringIndex, fret);\n            positions.push({\n              stringIndex,\n              fret,\n              note: calculatedNote,\n              isRoot: calculatedNote === chordKey && fret !== -1,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n\n  return {\n    instrument: \"banjo4\",\n    tuning: [\"C\", \"G\", \"B\", \"D\"],\n    chords: convertedChords\n  };\n};\n\n// Convert banjo5 chord data\nconst convertBanjo5ChordData = (): ReadonlyInstrumentChords => {\n  const convertedChords: { [key: string]: ReadonlyChordFingering[] } = {};\n  const chords = (banjo5ChordsData as any).chords;\n  const strings = [\"G\", \"D\", \"G\", \"B\", \"D\"];\n  const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  const calculateNote = (stringIndex: number, fret: number): string => {\n    if (fret === -1) return \"\";\n    if (fret === 0) return strings[stringIndex];\n    const openNote = strings[stringIndex];\n    const openNoteIndex = noteSequence.indexOf(openNote);\n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    return noteSequence[targetNoteIndex];\n  };\n\n  Object.keys(chords).forEach(chordKey => {\n    const chordVariations = chords[chordKey];\n    convertedChords[chordKey] = chordVariations.map((variation: any) => {\n      const positions: ReadonlyFingeringPosition[] = [];\n      if (variation.positions && variation.positions.length > 0) {\n        const position = variation.positions[0];\n        const frets = position.frets || [];\n        frets.forEach((fret: number, stringIndex: number) => {\n          if (fret !== undefined) {\n            const calculatedNote = calculateNote(stringIndex, fret);\n            positions.push({\n              stringIndex,\n              fret,\n              note: calculatedNote,\n              isRoot: calculatedNote === chordKey && fret !== -1,\n              interval: \"1\"\n            });\n          }\n        });\n      }\n      return {\n        chord: chordKey,\n        suffix: variation.suffix || \"\",\n        positions,\n        difficulty: (variation.difficulty || 2) as 1 | 2 | 3 | 4 | 5,\n        barreChord: variation.barres ? variation.barres.length > 0 : false\n      };\n    });\n  });\n\n  return {\n    instrument: \"banjo5\",\n    tuning: [\"G\", \"D\", \"G\", \"B\", \"D\"],\n    chords: convertedChords\n  };\n};\n\n// Create the comprehensive database\n// Force fresh conversion each time to ensure updated logic\nlet _database: ReadonlyInstrumentChords[] | null = null;\n\nexport const READONLY_CHORD_DATABASE: readonly ReadonlyInstrumentChords[] = (() => {\n  return Object.freeze([\n    convertGuitarChordData(),\n    convertGuitarDropDChordData(),\n    convertGuitarOpenGChordData(),\n    convertGuitarOpenDChordData(),\n    convertGuitarDADGADChordData(),\n    convertGuitarHalfStepDownChordData(),\n    convertGuitarWholeStepDownChordData(),\n    convertUkuleleChordData(),\n    convertBassChordsData(),\n    convertMandolinChordData(),\n    convertOctaveMandolinChordData(),\n    convertBouzoukiChordData(),\n    convertBalalaikaChordData(),\n    convertBanjo4ChordData(),\n    convertBanjo5ChordData()\n  ]);\n})();\n\n// Utility functions to access the readonly database\nexport const getReadonlyChordDatabase = (): typeof READONLY_CHORD_DATABASE => READONLY_CHORD_DATABASE;\n\nexport const getInstrumentChords = (instrument: string): ReadonlyInstrumentChords | undefined => {\n  return READONLY_CHORD_DATABASE.find(inst => inst.instrument === instrument);\n};\n\n// Map enharmonic equivalents (sharp to flat conversions for database lookup)\nconst ENHARMONIC_MAP: { [key: string]: string } = {\n  // For ukulele/bass (uses flats)\n  'C#': 'Db',\n  'C#m': 'Dbm', \n  'C#maj7': 'Dbmaj7',\n  'C#7': 'Db7',\n  'D#': 'Eb', \n  'D#m': 'Ebm',\n  'D#maj7': 'Ebmaj7',\n  'D#7': 'Eb7',\n  'F#': 'Gb',\n  'F#m': 'Gbm',\n  'F#maj7': 'Gbmaj7',\n  'F#7': 'Gb7',\n  'G#': 'Ab',\n  'G#m': 'Abm',\n  'G#maj7': 'Abmaj7',\n  'G#7': 'Ab7',\n  'A#': 'Bb',\n  'A#m': 'Bbm',\n  'A#maj7': 'Bbmaj7',\n  'A#7': 'Bb7'\n};\n\n// Guitar uses different naming (sharps instead of flats for some chords)\nconst GUITAR_ENHARMONIC_MAP: { [key: string]: string } = {\n  'C#': 'Csharp',\n  'C#m': 'Csharp', // Will be handled by suffix logic\n  'F#': 'Fsharp',\n  'F#m': 'Fsharp', // Will be handled by suffix logic\n  // Keep others as they are in guitar database\n  'D#': 'Eb',\n  'D#m': 'Ebm',\n  'G#': 'Ab', \n  'G#m': 'Abm',\n  'A#': 'Bb',\n  'A#m': 'Bbm'\n};\n\n// Debug function to investigate JSON structure\nconst debugUkuleleData = () => {\n  const chords = (ukuleleChordsData as any).chords;\n  if (chords && chords.D) {\n    // Debug: D chord data found\n  } else {\n    // Debug: No D chord data found\n  }\n};\n\n/**\n * Musical circle of fifths - standardized enharmonic equivalents\n * Following standard music theory conventions\n */\nconst MUSICAL_CIRCLE = {\n  // Each semitone with its enharmonic equivalent\n  0: ['C'],\n  1: ['C#', 'Db'], \n  2: ['D'],\n  3: ['D#', 'Eb'],\n  4: ['E'],\n  5: ['F'],\n  6: ['F#', 'Gb'],\n  7: ['G'],\n  8: ['G#', 'Ab'],\n  9: ['A'],\n  10: ['A#', 'Bb'],\n  11: ['B']\n};\n\n/**\n * Get semitone number for a note\n */\nfunction getNoteNumber(note: string): number {\n  const noteMap: { [key: string]: number } = {\n    'C': 0, 'C#': 1, 'Db': 1,\n    'D': 2, 'D#': 3, 'Eb': 3, \n    'E': 4,\n    'F': 5, 'F#': 6, 'Gb': 6,\n    'G': 7, 'G#': 8, 'Ab': 8,\n    'A': 9, 'A#': 10, 'Bb': 10,\n    'B': 11\n  };\n  return noteMap[note] ?? -1;\n}\n\n/**\n * Get all enharmonic equivalents for a note\n */\nfunction getEnharmonicEquivalents(note: string): string[] {\n  const noteNumber = getNoteNumber(note);\n  if (noteNumber === -1) return [note];\n  return MUSICAL_CIRCLE[noteNumber as keyof typeof MUSICAL_CIRCLE] || [note];\n}\n/**\n * Find a similar chord in the database using musical circle\n */\nfunction findSimilarChord(chords: any, targetChord: string): any {\n  // Extract root note (A, B, C, etc.)\n  const rootMatch = targetChord.match(/^([A-G][#b]?)/);\n  if (!rootMatch) return null;\n  \n  const rootNote = rootMatch[1];\n  const enharmonicEquivalents = getEnharmonicEquivalents(rootNote);\n  \n  // Try common chord variations in order of preference\n  const suffixes = ['', 'm', 'minor', '7', 'maj7', 'm7'];\n  \n  for (const equivalent of enharmonicEquivalents) {\n    for (const suffix of suffixes) {\n      const variation = equivalent + suffix;\n      if (chords[variation] && chords[variation].length > 0) {\n        return chords[variation];\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Get the name of the similar chord that was found\n */\nfunction getSimilarChordName(originalChord: string): string {\n  const rootMatch = originalChord.match(/^([A-G][#b]?)/);\n  if (!rootMatch) return originalChord;\n  \n  const rootNote = rootMatch[1];\n  const equivalents = getEnharmonicEquivalents(rootNote);\n  \n  // Return the first equivalent (standardized from musical circle)\n  return equivalents[0];\n}\n\nexport const getChordFingerings = (instrument: string, chord: string): readonly ReadonlyChordFingering[] => {\n  const instrumentChords = getInstrumentChords(instrument);\n  \n  \n  if (instrumentChords) {\n    // Use instrument-specific mapping for guitar\n    const enharmonicMap = instrument === 'guitar' ? GUITAR_ENHARMONIC_MAP : ENHARMONIC_MAP;\n    \n    // First try the chord as given\n    let chordData = instrumentChords.chords[chord];\n    \n    // If not found, try enharmonic equivalent\n    if (!chordData && enharmonicMap[chord]) {\n      const enharmonicChord = enharmonicMap[chord];\n      chordData = instrumentChords.chords[enharmonicChord];\n    }\n    \n    // If still not found, try converting suffix format\n    if (!chordData) {\n      let baseChord = '';\n      let targetSuffix = '';\n      \n      // Handle slash chords (C/B, Am/G, etc.)\n      if (chord.includes('/')) {\n        const slashMatch = chord.match(/^([A-G][#b]?(?:m|maj|dim|aug|sus[24]?|add[0-9]+|[0-9]+)*?)\\/([A-G][#b]?)$/);\n        if (slashMatch) {\n          baseChord = slashMatch[1];\n          targetSuffix = '/' + slashMatch[2];\n          \n        }\n      }\n      // Handle minor chords (Am, Am7, etc.) - improved regex\n      else if (chord.match(/^([A-G][#b]?)m(.*)$/)) {\n        const minorMatch = chord.match(/^([A-G][#b]?)m(.*)$/);\n        if (minorMatch) {\n          baseChord = minorMatch[1];\n          const suffix = minorMatch[2];\n          // Use 'minor' for plain minor chords, 'm' + suffix for other minor chords\n          targetSuffix = suffix ? 'm' + suffix : 'minor';\n          \n        }\n      }\n      // Handle suspended chords (Asus2, Asus4, etc.)\n      else if (chord.includes('sus')) {\n        const susMatch = chord.match(/^([A-G][#b]?)sus(.+)$/);\n        if (susMatch) {\n          baseChord = susMatch[1];\n          targetSuffix = 'sus' + susMatch[2];\n          \n        }\n      }\n      // Handle other common suffixes (A7, Amaj7, etc.)\n      else if (chord.match(/^([A-G][#b]?)(7|maj7|add9|6|9|11|13|dim|dim7|aug)(.*)$/)) {\n        const suffixMatch = chord.match(/^([A-G][#b]?)(.+)$/);\n        if (suffixMatch) {\n          baseChord = suffixMatch[1];\n          targetSuffix = suffixMatch[2];\n          \n        }\n      }\n      \n      if (baseChord && targetSuffix) {\n        // Trying suffix format lookup\n        for (const [chordKey, chordArray] of Object.entries(instrumentChords.chords)) {\n          if (Array.isArray(chordArray)) {\n            if (chordKey === baseChord) {\n              // Found base chord entries\n            }\n            \n            const matchingChord = chordArray.find(entry => \n              entry.chord === baseChord && entry.suffix === targetSuffix\n            );\n            if (matchingChord) {\n              chordData = [matchingChord];\n              break;\n            }\n          }\n        }\n        \n        if (!chordData && enharmonicMap[baseChord]) {\n          const enharmonicBase = enharmonicMap[baseChord];\n          \n          for (const [chordKey, chordArray] of Object.entries(instrumentChords.chords)) {\n            if (Array.isArray(chordArray)) {\n              const matchingChord = chordArray.find(entry => \n                entry.chord === enharmonicBase && entry.suffix === targetSuffix\n              );\n              \n              if (matchingChord) {\n                chordData = [matchingChord];\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // Chord data found check\n    let actualChordUsed = chord; // Track which chord was actually used\n    \n    // Smart fallback system - try multiple fallback strategies\n    if (!chordData || chordData.length === 0) {\n      // Strategy 1: For slash chords, try the base chord\n      if (chord.includes('/')) {\n        const baseChord = chord.split('/')[0];\n        chordData = instrumentChords.chords[baseChord];\n        if (chordData && chordData.length > 0) {\n          actualChordUsed = baseChord;\n        } else {\n          // Strategy 2: If base chord doesn't exist, try simplified version\n          chordData = findSimilarChord(instrumentChords.chords, baseChord);\n          if (chordData && chordData.length > 0) {\n            actualChordUsed = getSimilarChordName(baseChord);\n          }\n        }\n      } else {\n        // Strategy 3: For non-slash chords, try to find similar chord\n        chordData = findSimilarChord(instrumentChords.chords, chord);\n        if (chordData && chordData.length > 0) {\n          actualChordUsed = getSimilarChordName(chord);\n        }\n      }\n    }\n    \n    \n    // Return both the data and the actual chord name used\n    const result = chordData || [];\n    (result as any).__actualChord = actualChordUsed;\n    return result;\n  }\n  \n  return [];\n};\n\nexport const getAllChordsForInstrument = (instrument: string): readonly string[] => {\n  const instrumentChords = getInstrumentChords(instrument);\n  return instrumentChords ? Object.keys(instrumentChords.chords) : [];\n};\n\n// Validation function to ensure database integrity\nexport const validateChordDatabase = (): boolean => {\n  try {\n    // Try to modify - should throw error if properly frozen\n    (READONLY_CHORD_DATABASE as any).push({});\n    return false; // If we get here, freezing failed\n  } catch (error) {\n    return true; // Properly frozen and immutable\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/audio/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/instruments/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/use-toast.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token {","line":3,"column":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useAutoChordSelection.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { Chord } from '@/types/chord';\n\ninterface SongLine {\n  text: string;\n  chords: string[];\n  section?: string;\n}\n\ninterface UseAutoChordSelectionProps {\n  songLines: SongLine[];\n  availableChords: Chord[];\n  transposition: number;\n  onChordSelect: (chord: Chord) => void;\n  isEnabled: boolean;\n}\n\nexport const useAutoChordSelection = ({\n  songLines,\n  availableChords,\n  transposition,\n  onChordSelect,\n  isEnabled\n}: UseAutoChordSelectionProps) => {\n  const [currentLine, setCurrentLine] = useState(0);\n  const [currentChordIndex, setCurrentChordIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [autoPlayInterval, setAutoPlayInterval] = useState<NodeJS.Timeout | null>(null);\n\n  const getCurrentChord = useCallback(() => {\n    if (currentLine >= songLines.length) return null;\n    const line = songLines[currentLine];\n    if (currentChordIndex >= line.chords.length) return null;\n    \n    const chordName = line.chords[currentChordIndex];\n    return availableChords.find(chord => chord.name === chordName) || null;\n  }, [currentLine, currentChordIndex, songLines, availableChords]);\n\n  const nextChord = useCallback(() => {\n    if (currentLine >= songLines.length) return false;\n    \n    const line = songLines[currentLine];\n    if (currentChordIndex < line.chords.length - 1) {\n      setCurrentChordIndex(prev => prev + 1);\n      return true;\n    } else if (currentLine < songLines.length - 1) {\n      setCurrentLine(prev => prev + 1);\n      setCurrentChordIndex(0);\n      return true;\n    }\n    \n    return false; // End of song\n  }, [currentLine, currentChordIndex, songLines]);\n\n  const previousChord = useCallback(() => {\n    if (currentChordIndex > 0) {\n      setCurrentChordIndex(prev => prev - 1);\n      return true;\n    } else if (currentLine > 0) {\n      const prevLine = songLines[currentLine - 1];\n      setCurrentLine(prev => prev - 1);\n      setCurrentChordIndex(prevLine.chords.length - 1);\n      return true;\n    }\n    \n    return false; // Beginning of song\n  }, [currentLine, currentChordIndex, songLines]);\n\n  const resetToStart = useCallback(() => {\n    setCurrentLine(0);\n    setCurrentChordIndex(0);\n  }, []);\n\n  const startAutoPlay = useCallback((intervalMs: number = 2000) => {\n    if (!isEnabled) return;\n    \n    // Ensure minimum interval to prevent crashes\n    const safeInterval = Math.max(intervalMs, 1000); // Minimum 1 second\n    \n    setIsPlaying(true);\n    \n    // Use a recursive setTimeout instead of setInterval to avoid stale closures\n    const playNext = () => {\n      setCurrentLine(currentLineVal => {\n        setCurrentChordIndex(currentChordIndexVal => {\n          if (currentLineVal >= songLines.length) {\n            setIsPlaying(false);\n            setAutoPlayInterval(null);\n            return currentChordIndexVal;\n          }\n          \n          const line = songLines[currentLineVal];\n          if (!line) {\n            setIsPlaying(false);\n            setAutoPlayInterval(null);\n            return currentChordIndexVal;\n          }\n          \n          // Get and play current chord\n          const chordName = line.chords[currentChordIndexVal];\n          const chord = availableChords.find(c => c.name === chordName);\n          if (chord) {\n            onChordSelect(chord);\n          }\n          \n          // Calculate next position\n          if (currentChordIndexVal < line.chords.length - 1) {\n            // Move to next chord in current line\n            const nextChordIndex = currentChordIndexVal + 1;\n            const timeoutId = setTimeout(playNext, safeInterval);\n            setAutoPlayInterval(timeoutId);\n            return nextChordIndex;\n          } else if (currentLineVal < songLines.length - 1) {\n            // Move to next line\n            setCurrentLine(currentLineVal + 1);\n            const timeoutId = setTimeout(playNext, safeInterval);\n            setAutoPlayInterval(timeoutId);\n            return 0;\n          } else {\n            // End of song\n            setIsPlaying(false);\n            setAutoPlayInterval(null);\n            return currentChordIndexVal;\n          }\n        });\n        return currentLineVal;\n      });\n    };\n    \n    // Start playing immediately\n    playNext();\n  }, [isEnabled, songLines, availableChords, onChordSelect]);\n\n  const stopAutoPlay = useCallback(() => {\n    setIsPlaying(false);\n    if (autoPlayInterval) {\n      clearTimeout(autoPlayInterval); // Changed from clearInterval to clearTimeout\n      setAutoPlayInterval(null);\n    }\n  }, [autoPlayInterval]);\n\n  const toggleAutoPlay = useCallback((intervalMs?: number) => {\n    if (isPlaying) {\n      stopAutoPlay();\n    } else {\n      startAutoPlay(intervalMs);\n    }\n  }, [isPlaying, stopAutoPlay, startAutoPlay]);\n\n  // Select current chord when position changes\n  useEffect(() => {\n    if (isEnabled) {\n      const chord = getCurrentChord();\n      if (chord) {\n        onChordSelect(chord);\n      }\n    }\n  }, [currentLine, currentChordIndex, isEnabled, getCurrentChord, onChordSelect]);\n\n  // Clean up timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (autoPlayInterval) {\n        clearTimeout(autoPlayInterval); // Changed from clearInterval to clearTimeout\n      }\n    };\n  }, [autoPlayInterval]);\n\n  return {\n    currentLine,\n    currentChordIndex,\n    isPlaying,\n    getCurrentChord,\n    nextChord,\n    previousChord,\n    resetToStart,\n    toggleAutoPlay,\n    startAutoPlay,\n    stopAutoPlay,\n    progress: {\n      line: currentLine + 1,\n      chord: currentChordIndex + 1,\n      totalLines: songLines.length,\n      totalChordsInLine: songLines[currentLine]?.chords.length || 0\n    }\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useBassChords.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":11,"column":55}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from \"react\";\nimport { useChordFingerings } from \"./useChordFingerings\";\n\n/**\n * Specialized hook for bass chord functionality\n * Uses the centralized chord fingerings system\n */\nexport const useBassChords = () => {\n  const { getFingeringsForChord, getFingeringsAsArray } = useChordFingerings();\n\n  const getBassChordFingering = useCallback((chordName: string, transposition: number = 0) => {\n    return getFingeringsForChord('bass', chordName, transposition);\n  }, [getFingeringsForChord]);\n\n  const getBassChordArray = useCallback((chordName: string) => {\n    return getFingeringsAsArray('bass', chordName, 4); // Bass has 4 strings\n  }, [getFingeringsAsArray]);\n\n  return {\n    getBassChordFingering,\n    getBassChordArray\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useBassSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token as","line":9,"column":71}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from \"react\";\n\nexport const useBassSounds = () => {\n  const audioContextRef = useRef<AudioContext | null>(null);\n\n  const initializeBassSounds = useCallback(async () => {\n    try {\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n        // Created new Bass AudioContext\n      }\n      \n      if (audioContextRef.current.state === 'suspended') {\n        // Bass AudioContext suspended, resuming\n        await audioContextRef.current.resume();\n        // Bass AudioContext resumed\n      }\n      \n      // Test if audio context is working\n      // Bass AudioContext state check\n      \n      return Promise.resolve();\n    } catch (error) {\n      console.error(\"Failed to initialize bass sounds:\", error);\n      throw error;\n    }\n  }, []);\n\n  const createBassSound = (frequency: number, duration: number = 0.8) => {\n    // Playing improved bass sound\n    if (!audioContextRef.current || audioContextRef.current.state !== 'running') {\n      console.error(\"Bass AudioContext not ready, state:\", audioContextRef.current?.state);\n      return;\n    }\n\n    const ctx = audioContextRef.current;\n    const now = ctx.currentTime;\n\n    // Create oscillators for more realistic bass sound\n    const fundamentalOsc = ctx.createOscillator();\n    const subOsc = ctx.createOscillator();\n    const harmonicOsc = ctx.createOscillator();\n\n    // Create gain nodes\n    const fundamentalGain = ctx.createGain();\n    const subGain = ctx.createGain();\n    const harmonicGain = ctx.createGain();\n    const masterGain = ctx.createGain();\n\n    // Create filters for bass tone shaping\n    const lowFilter = ctx.createBiquadFilter();\n    lowFilter.type = 'lowpass';\n    lowFilter.frequency.value = 500;\n    lowFilter.Q.value = 3;\n\n    const highFilter = ctx.createBiquadFilter();\n    highFilter.type = 'highpass';\n    highFilter.frequency.value = 40;\n    highFilter.Q.value = 1;\n\n    // Bass-specific distortion for punch\n    const waveshaper = ctx.createWaveShaper();\n    const samples = 44100;\n    const curve = new Float32Array(samples);\n    for (let i = 0; i < samples; i++) {\n      const x = (i * 2) / samples - 1;\n      curve[i] = Math.tanh(x * 2) * 0.7; // Mild saturation\n    }\n    waveshaper.curve = curve;\n\n    // Set up oscillators with bass-appropriate waveforms\n    fundamentalOsc.type = 'square';\n    fundamentalOsc.frequency.value = frequency;\n    \n    subOsc.type = 'sine';\n    subOsc.frequency.value = frequency / 2; // Sub-bass\n    \n    harmonicOsc.type = 'sawtooth';\n    harmonicOsc.frequency.value = frequency * 2; // Second harmonic\n\n    // Bass guitar envelope - punchy attack, sustained body\n    const attackTime = 0.005;\n    const decayTime = 0.08;\n    const sustainLevel = 0.4;\n\n    fundamentalGain.gain.setValueAtTime(0, now);\n    fundamentalGain.gain.linearRampToValueAtTime(0.7, now + attackTime);\n    fundamentalGain.gain.exponentialRampToValueAtTime(sustainLevel, now + decayTime);\n    fundamentalGain.gain.exponentialRampToValueAtTime(0.001, now + duration);\n\n    subGain.gain.setValueAtTime(0, now);\n    subGain.gain.linearRampToValueAtTime(0.4, now + attackTime * 1.5);\n    subGain.gain.exponentialRampToValueAtTime(0.2, now + decayTime);\n    subGain.gain.exponentialRampToValueAtTime(0.001, now + duration);\n\n    harmonicGain.gain.setValueAtTime(0, now);\n    harmonicGain.gain.linearRampToValueAtTime(0.1, now + attackTime);\n    harmonicGain.gain.exponentialRampToValueAtTime(0.03, now + decayTime * 0.5);\n    harmonicGain.gain.exponentialRampToValueAtTime(0.001, now + duration * 0.6);\n\n    masterGain.gain.setValueAtTime(0.7, now);\n\n    // Connect the audio graph for realistic bass sound\n    fundamentalOsc.connect(fundamentalGain);\n    subOsc.connect(subGain);\n    harmonicOsc.connect(harmonicGain);\n    \n    fundamentalGain.connect(highFilter);\n    subGain.connect(highFilter);\n    harmonicGain.connect(highFilter);\n    \n    highFilter.connect(waveshaper);\n    waveshaper.connect(lowFilter);\n    lowFilter.connect(masterGain);\n    masterGain.connect(ctx.destination);\n\n    // Start and stop oscillators\n    const stopTime = now + duration;\n    fundamentalOsc.start(now);\n    subOsc.start(now);\n    harmonicOsc.start(now);\n    \n    fundamentalOsc.stop(stopTime);\n    subOsc.stop(stopTime);\n    harmonicOsc.stop(stopTime);\n  };\n\n  const playBassNote = useCallback(async (note: string) => {\n    await initializeBassSounds();\n    \n    const frequency = getBassFrequency(note);\n    createBassSound(frequency, 1.5);\n  }, [initializeBassSounds]);\n\n  return {\n    playBassNote,\n    initializeBassSounds\n  };\n};\n\n// Helper function for bass frequencies (proper bass octaves)\nconst getBassFrequency = (note: string): number => {\n  const frequencies: { [key: string]: number } = {\n    \"C\": 65.41,   // C2\n    \"C#\": 69.30,  // C#2\n    \"D\": 73.42,   // D2\n    \"D#\": 77.78,  // D#2\n    \"E\": 82.41,   // E2 - Standard bass E string\n    \"F\": 87.31,   // F2\n    \"F#\": 92.50,  // F#2\n    \"G\": 98.00,   // G2\n    \"G2\": 98.00,  // G2 explicit\n    \"G#\": 103.83, // G#2\n    \"A\": 110.0,   // A2 - Standard bass A string  \n    \"A#\": 116.54, // A#2\n    \"B\": 123.47,  // B2\n    // Higher octave for fretted notes\n    \"C3\": 130.81, // C3\n    \"D3\": 146.83, // D3 - Standard bass D string\n    \"E3\": 164.81, // E3 \n    \"F3\": 174.61, // F3\n    \"G3\": 196.0,  // G3 - Standard bass G string\n  };\n  \n  return frequencies[note] || 82.41;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useChordFingerings.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":4,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from \"react\";\nimport { getChordFingerings } from '@/data/readonly/chordDatabase';\n\nexport interface FingeringPosition {\n  stringIndex: number;\n  fret: number;\n  note?: string;\n  isRoot?: boolean;\n}\n\n/**\n * Centralized hook for getting chord fingerings from the database\n * This is the ONLY method that should be used for getting fingerings\n */\nexport const useChordFingerings = () => {\n  \n  const getFingeringsForChord = useCallback((\n    instrumentType: string, \n    chordName: string, \n    transposition: number = 0\n  ): FingeringPosition[] => {\n    if (!chordName) return [];\n    \n    // Chord lookup logic\n    \n    // Get fingerings from the chord database\n    const chordFingerings = getChordFingerings(instrumentType, chordName);\n    const fingerings = chordFingerings as unknown as { __actualChord?: string };\n    const actualChordUsed = fingerings.__actualChord || chordName;\n    \n    if (chordFingerings.length > 0) {\n      // Found fingerings in database\n      const primaryFingering = chordFingerings[0];\n      \n      // Convert to the expected format\n      const positions = primaryFingering.positions.map(pos => ({\n        stringIndex: pos.stringIndex,\n        fret: pos.fret,\n        note: pos.note,\n        isRoot: pos.isRoot\n      }));\n      \n      // Apply transposition if needed\n      if (transposition !== 0) {\n        // Note: Transposition logic could be added here if needed\n        // For now, we return the base fingering\n      }\n      \n      // Returning chord positions\n      return positions;\n    }\n    \n    // No fingerings found\n    return [];\n  }, []);\n\n  /**\n   * Get fingerings as a simple fret array for legacy compatibility\n   * Returns array of fret positions for each string (bottom to top)\n   */\n  const getFingeringsAsArray = useCallback((\n    instrumentType: string, \n    chordName: string, \n    stringCount: number = 6\n  ): number[] => {\n    const fingerings = getFingeringsForChord(instrumentType, chordName);\n    \n    // If no fingerings found, return array of -1 (muted strings) instead of 0 (open strings)\n    if (fingerings.length === 0) {\n      return Array(stringCount).fill(-1);\n    }\n    \n    // Initialize array with muted strings (-1) \n    const fretArray = Array(stringCount).fill(-1);\n    \n    // Fill in the fingerings\n    fingerings.forEach(pos => {\n      if (pos.stringIndex >= 0 && pos.stringIndex < stringCount) {\n        fretArray[pos.stringIndex] = pos.fret;\n      }\n    });\n    \n    return fretArray;\n  }, [getFingeringsForChord]);\n\n  return {\n    getFingeringsForChord,\n    getFingeringsAsArray\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useDrumSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from \"react\";\nimport * as Tone from \"tone\";\n\ninterface DrumSoundUrls {\n  [key: string]: string;\n}\n\nconst drumSoundUrls: DrumSoundUrls = {\n  \"kick\": \"/sounds/kick.mp3\",\n  \"snare\": \"/sounds/snare.mp3\",\n  \"hihat\": \"/sounds/hihat.mp3\",\n  \"crash\": \"/sounds/crash.mp3\"\n};\n\nexport const useDrumSounds = () => {\n  const playersRef = useRef<{ [key: string]: Tone.Player }>({});\n  const synthRef = useRef<Tone.MembraneSynth | null>(null);\n\n  const initializeDrumSounds = useCallback(async () => {\n    // Initialize Tone.js audio context\n    if (Tone.context.state !== 'running') {\n      await Tone.start();\n    }\n\n    // Create synth for fallback drum sounds\n    if (!synthRef.current) {\n      synthRef.current = new Tone.MembraneSynth({\n        oscillator: {\n          type: \"sine\"\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.2,\n          sustain: 0.01,\n          release: 0.3\n        }\n      }).toDestination();\n    }\n\n    // Load drum samples\n    Object.entries(drumSoundUrls).forEach(([drum, url]) => {\n      if (!playersRef.current[drum]) {\n        playersRef.current[drum] = new Tone.Player(url).toDestination();\n      }\n    });\n  }, []);\n\n  const playDrum = useCallback(async (drumName: string) => {\n    await initializeDrumSounds();\n    \n    const player = playersRef.current[drumName];\n    if (player && player.loaded) {\n      player.start();\n    } else {\n      // Fallback: play drum sound with synth\n      if (synthRef.current) {\n        const frequencies = {\n          \"kick\": \"C1\",\n          \"snare\": \"C2\", \n          \"hihat\": \"C4\",\n          \"crash\": \"C3\"\n        };\n        const freq = frequencies[drumName as keyof typeof frequencies] || \"C2\";\n        synthRef.current.triggerAttackRelease(freq, \"8n\");\n      }\n    }\n  }, [initializeDrumSounds]);\n\n  return {\n    playDrum,\n    initializeDrumSounds\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useGuitarChords.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":11,"column":57}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from \"react\";\nimport { useChordFingerings } from \"./useChordFingerings\";\n\n/**\n * Specialized hook for guitar chord functionality\n * Uses the centralized chord fingerings system\n */\nexport const useGuitarChords = () => {\n  const { getFingeringsForChord, getFingeringsAsArray } = useChordFingerings();\n\n  const getGuitarChordFingering = useCallback((chordName: string, transposition: number = 0) => {\n    return getFingeringsForChord('guitar', chordName, transposition);\n  }, [getFingeringsForChord]);\n\n  const getGuitarChordArray = useCallback((chordName: string) => {\n    return getFingeringsAsArray('guitar', chordName, 6); // Guitar has 6 strings\n  }, [getFingeringsAsArray]);\n\n  return {\n    getGuitarChordFingering,\n    getGuitarChordArray\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useGuitarSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token as","line":11,"column":71}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from \"react\";\nimport { useChordFingerings } from \"./useChordFingerings\";\n\nexport const useGuitarSounds = () => {\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const { getFingeringsAsArray } = useChordFingerings();\n\n  const initializeSounds = useCallback(async () => {\n    try {\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n        // Created new AudioContext\n      }\n      \n      if (audioContextRef.current.state === 'suspended') {\n        // AudioContext suspended, resuming\n        await audioContextRef.current.resume();\n        // AudioContext resumed\n      }\n      \n      // Test if audio context is working\n      // AudioContext ready\n      \n      return Promise.resolve();\n    } catch (error) {\n      console.error(\"Failed to initialize sounds:\", error);\n      throw error;\n    }\n  }, []);\n\n  const createGuitarSound = (frequency: number, duration: number = 2.5) => {\n    // Creating guitar sound\n    if (!audioContextRef.current || audioContextRef.current.state !== 'running') {\n      console.error(\"AudioContext not ready, state:\", audioContextRef.current?.state);\n      return;\n    }\n\n    try {\n      const ctx = audioContextRef.current;\n      const now = ctx.currentTime;\n\n      // Create a simple oscillator first to test\n      const osc = ctx.createOscillator();\n      const gainNode = ctx.createGain();\n\n      osc.type = 'sawtooth';\n      osc.frequency.setValueAtTime(frequency, now);\n\n      // Simple envelope\n      gainNode.gain.setValueAtTime(0, now);\n      gainNode.gain.linearRampToValueAtTime(0.3, now + 0.01);\n      gainNode.gain.exponentialRampToValueAtTime(0.1, now + 0.1);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, now + duration);\n\n      // Connect\n      osc.connect(gainNode);\n      gainNode.connect(ctx.destination);\n\n      // Start and stop\n      osc.start(now);\n      osc.stop(now + duration);\n      \n      // Guitar sound created successfully\n    } catch (error) {\n      console.error(\"Error creating guitar sound:\", error);\n    }\n  };\n\n  const playChord = useCallback(async (chordName: string, transposition: number = 0) => {\n    // Play chord logic\n    \n    try {\n      await initializeSounds();\n      // Sounds initialized\n      \n      // Get the chord fingering pattern from database\n      const chordFingers = getFingeringsAsArray('guitar', chordName, 6);\n      // Get chord fingering pattern\n      \n      // Calculate all frequencies first - Standard guitar tuning (E-A-D-G-B-E low to high)\n      const openStringFreqs = [82.41, 110.0, 146.83, 196.0, 246.94, 329.63];\n      const stringFrequencies: number[] = [];\n      \n      chordFingers.forEach((fret, stringIndex) => {\n        if (fret >= 0) { // -1 means don't play this string\n          let frequency = openStringFreqs[stringIndex];\n          \n          // Apply fret position\n          if (fret > 0) {\n            frequency = frequency * Math.pow(2, fret / 12);\n          }\n          \n          // Apply transposition\n          frequency = frequency * Math.pow(2, transposition / 12);\n          \n          stringFrequencies.push(frequency);\n          // Calculate frequency for string\n        }\n      });\n      \n      \n      // Play all strings with a slight delay between them\n      stringFrequencies.forEach((frequency, index) => {\n        setTimeout(() => {\n          createGuitarSound(frequency, 2.5);\n        }, index * 50);\n      });\n    } catch (error) {\n      console.error(\"Error in playChord:\", error);\n    }\n  }, [initializeSounds]);\n\n  const playString = useCallback(async (stringIndex: number, chordName?: string, transposition: number = 0) => {\n    await initializeSounds();\n    \n    // Guitar string frequencies (E-A-D-G-B-E from low to high) - Standard tuning\n    const openStringFreqs = [82.41, 110.0, 146.83, 196.0, 246.94, 329.63];\n    let frequency = openStringFreqs[stringIndex];\n    \n    // If a chord is selected, modify the frequency based on fret position\n    if (chordName) {\n      const chordFingers = getFingeringsAsArray('guitar', chordName, 6);\n      const fret = chordFingers[stringIndex];\n      if (fret >= 0 && fret > 0) { // Only modify if it's a valid fret (not muted and not open)\n        frequency = frequency * Math.pow(2, fret / 12); // Each fret is a semitone\n      } else if (fret === -1) {\n        // Don't play muted strings\n        return;\n      }\n    }\n    \n    // Apply transposition\n    frequency = frequency * Math.pow(2, transposition / 12);\n    \n    createGuitarSound(frequency, 2.5);\n  }, [initializeSounds]);\n\n  return {\n    playChord,\n    playString,\n    initializeSounds\n  };\n};\n\n// NOTE: All chord fingering logic has been moved to useChordFingerings hook\n// This ensures consistent fingering data across all instruments","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useLocalStorage.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":3,"column":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      // Error reading localStorage\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      // Error setting localStorage\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n\nexport default useLocalStorage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/usePianoSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":8,"column":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\n\nexport const usePianoSounds = () => {\n  const initializeSounds = useCallback(async () => {\n    // Piano sounds initialized\n  }, []);\n\n  const playNote = useCallback(async (note: string) => {\n    // Playing piano note\n    \n    // Create and play tone directly with Web Audio API\n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      const frequencies: { [key: string]: number } = {\n        'C': 261.63,\n        'C#': 277.18,\n        'D': 293.66,\n        'D#': 311.13,\n        'E': 329.63,\n        'F': 349.23,\n        'F#': 369.99,\n        'G': 392.00,\n        'G#': 415.30,\n        'A': 440.00,\n        'A#': 466.16,\n        'B': 493.88\n      };\n      \n      oscillator.frequency.setValueAtTime(frequencies[note] || 440, audioContext.currentTime);\n      oscillator.type = 'sine';\n      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n      // Längre ton - 1.2 sekunder istället för 0.5\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1.2);\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.start();\n      oscillator.stop(audioContext.currentTime + 1.2);\n    } catch (error) {\n      console.error(\"Error playing piano note:\", error);\n    }\n  }, []);\n\n  return {\n    initializeSounds,\n    playNote,\n    isLoaded: true\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useRealBassSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from \"react\";\n\nexport const useRealBassSounds = () => {\n  const audioRef = useRef<{ [key: string]: HTMLAudioElement }>({});\n  const isInitialized = useRef(false);\n\n  const initializeBassSounds = useCallback(async () => {\n    if (isInitialized.current) return;\n\n    try {\n      // Define the bass note audio files mapping - use existing files\n      const bassFiles = {\n        \"E\": \"/sounds/bass-e.mp3\",\n        \"A\": \"/sounds/bass-a.mp3\", \n        \"D\": \"/sounds/bass-d.mp3\",\n        \"G\": \"/sounds/bass-g.mp3\",\n        \"C\": \"/sounds/bass-a.mp3\", // Map C to A\n        \"F\": \"/sounds/bass-e.mp3\", // Map F to E  \n        \"B\": \"/sounds/bass-a.mp3\", // Map B to A\n        \"D3\": \"/sounds/bass-d.mp3\", // Bass D3 maps to D\n        \"G3\": \"/sounds/bass-g.mp3\", // Bass G3 maps to G\n        \"E2\": \"/sounds/bass-e.mp3\", // Bass E2 maps to E\n        \"A2\": \"/sounds/bass-a.mp3\", // Bass A2 maps to A\n        \"D2\": \"/sounds/bass-d.mp3\", // Bass D2 maps to D\n        \"G2\": \"/sounds/bass-g.mp3\"  // Bass G2 maps to G\n      };\n\n      // Preload all audio files\n      const audioPromises = Object.entries(bassFiles).map(([note, file]) => {\n        return new Promise<void>((resolve, reject) => {\n          const audio = new Audio();\n          audio.volume = 0.8;\n          audio.preload = 'auto';\n          \n          audio.addEventListener('canplaythrough', () => {\n            // Bass audio loaded\n            audioRef.current[note] = audio;\n            resolve();\n          });\n          \n          audio.addEventListener('error', (e) => {\n            console.warn(`Failed to load bass audio for note ${note}: ${file}`, e);\n            console.warn(`Audio error details:`, (e.target as HTMLAudioElement)?.error);\n            // Create a working fallback audio element\n            const fallbackAudio = new Audio();\n            fallbackAudio.volume = 0;\n            audioRef.current[note] = fallbackAudio;\n            resolve();\n          });\n          \n          audio.src = file;\n        });\n      });\n\n      await Promise.all(audioPromises);\n      isInitialized.current = true;\n      // Real bass sounds initialized\n    } catch (error) {\n      console.error(\"Failed to initialize real bass sounds:\", error);\n      isInitialized.current = true; // Still mark as initialized to avoid retry loops\n    }\n  }, []);\n\n  const playBassNote = useCallback(async (note: string) => {\n    await initializeBassSounds();\n    \n    const audio = audioRef.current[note];\n    \n    if (audio) {\n      if (audio.src && audio.src !== '' && audio.readyState >= 2) {\n        try {\n          audio.currentTime = 0;\n          const playPromise = audio.play();\n          if (playPromise) {\n            await playPromise;\n          }\n        } catch (error) {\n          console.warn(`Failed to play bass note ${note}:`, error);\n        }\n      } else {\n        console.warn(`Audio for bass note ${note} not ready. src: ${audio.src}, readyState: ${audio.readyState}`);\n      }\n    } else {\n      console.warn(`No audio object found for bass note: ${note}`);\n    }\n  }, [initializeBassSounds]);\n\n  return {\n    playBassNote,\n    initializeBassSounds\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useRealGuitarSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from \"react\";\n\nexport const useRealGuitarSounds = () => {\n  const audioRef = useRef<{ [key: string]: HTMLAudioElement }>({});\n  const isInitialized = useRef(false);\n\n  const initializeSounds = useCallback(async () => {\n    if (isInitialized.current) return;\n\n    try {\n      // Define the chord audio files mapping\n      const chordFiles = {\n        \"C\": \"/sounds/guitar-c.mp3\",\n        \"F\": \"/sounds/guitar-f.mp3\", \n        \"G\": \"/sounds/guitar-g.mp3\",\n        \"Am\": \"/sounds/guitar-am.mp3\",\n        \"Dm\": \"/sounds/chord-dm.mp3\",\n        \"Em\": \"/sounds/chord-em.mp3\",\n        \"D\": \"/sounds/chord-d.mp3\",\n        \"A\": \"/sounds/chord-a.mp3\",\n        \"B7\": \"/sounds/chord-c.mp3\", // Fallback to C\n        \"Cadd9\": \"/sounds/guitar-c.mp3\", // Fallback to C\n        \"Dsus4\": \"/sounds/chord-d.mp3\" // Fallback to D\n      };\n\n      // Preload all audio files\n      const audioPromises = Object.entries(chordFiles).map(([chord, file]) => {\n        return new Promise<void>((resolve, reject) => {\n          const audio = new Audio();\n          audio.volume = 0.7;\n          audio.preload = 'auto';\n          \n          audio.addEventListener('canplaythrough', () => {\n            audioRef.current[chord] = audio;\n            resolve();\n          });\n          \n          audio.addEventListener('error', () => {\n            console.warn(`Failed to load audio for chord ${chord}: ${file}`);\n            // Create a silent fallback\n            audioRef.current[chord] = new Audio();\n            resolve();\n          });\n          \n          audio.src = file;\n        });\n      });\n\n      await Promise.all(audioPromises);\n      isInitialized.current = true;\n      // Real guitar sounds initialized\n    } catch (error) {\n      console.error(\"Failed to initialize real guitar sounds:\", error);\n      isInitialized.current = true; // Still mark as initialized to avoid retry loops\n    }\n  }, []);\n\n  const playChord = useCallback(async (chordName: string) => {\n    await initializeSounds();\n    \n    const audio = audioRef.current[chordName];\n    if (audio && audio.src) {\n      try {\n        // Reset audio to beginning and play\n        audio.currentTime = 0;\n        await audio.play();\n      } catch (error) {\n        console.warn(`Failed to play chord ${chordName}:`, error);\n      }\n    } else {\n      console.warn(`No audio file found for chord: ${chordName}`);\n    }\n  }, [initializeSounds]);\n\n  const playString = useCallback(async (stringIndex: number, chordName?: string) => {\n    // For individual strings, don't play the whole chord!\n    // Instead, just play a simple string sound or silence\n    // Playing individual string\n    \n    // We could generate a simple tone here, or just do nothing\n    // For now, do nothing to avoid the chord sound\n    return;\n  }, []);\n\n  return {\n    playChord,\n    playString,\n    initializeSounds\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useRealSoundLibrary.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":5,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from \"react\";\n\n// Comprehensive sound library for real instrument sounds\nexport const useRealSoundLibrary = () => {\n  const audioRef = useRef<{ [key: string]: HTMLAudioElement }>({});\n  const isInitialized = useRef(false);\n\n  // Complete note to frequency mapping from E2 upward\n  const noteFrequencies: { [key: string]: number } = {\n    // Bass range (E2-E3)\n    \"E2\": 82.41,   // Standard bass E string\n    \"F2\": 87.31,\n    \"F#2\": 92.50,\n    \"G2\": 98.00,   // Bass G on E string 3rd fret\n    \"G#2\": 103.83,\n    \"A2\": 110.00,  // Standard bass A string\n    \"A#2\": 116.54,\n    \"B2\": 123.47,\n    \"C3\": 130.81,\n    \"C#3\": 138.59,\n    \"D3\": 146.83,  // Standard bass D string\n    \"D#3\": 155.56,\n    \"E3\": 164.81,\n    \"F3\": 174.61,\n    \"F#3\": 185.00,\n    \"G3\": 196.00,  // Standard bass G string\n    \n    // Guitar range (E3-E5)\n    \"G#3\": 207.65,\n    \"A3\": 220.00,\n    \"A#3\": 233.08,\n    \"B3\": 246.94,\n    \"C4\": 261.63,  // Middle C\n    \"C#4\": 277.18,\n    \"D4\": 293.66,\n    \"D#4\": 311.13,\n    \"E4\": 329.63,  // Standard guitar high E string\n    \"F4\": 349.23,\n    \"F#4\": 369.99,\n    \"G4\": 392.00,\n    \"G#4\": 415.30,\n    \"A4\": 440.00,  // Concert A\n    \"A#4\": 466.16,\n    \"B4\": 493.88,\n    \"C5\": 523.25,\n    \"C#5\": 554.37,\n    \"D5\": 587.33,\n    \"D#5\": 622.25,\n    \"E5\": 659.25\n  };\n\n  const initializeSoundLibrary = useCallback(async () => {\n    if (isInitialized.current) return;\n\n    try {\n      // For now, we'll use the existing chord sound as base\n      // In the future, real audio files can be added here\n      const testAudio = new Audio(\"/sounds/chord-c.mp3\");\n      \n      // Test if audio can be loaded\n      await new Promise<void>((resolve, reject) => {\n        testAudio.addEventListener('canplaythrough', () => resolve());\n        testAudio.addEventListener('error', () => reject(new Error('Failed to load test audio')));\n        testAudio.load();\n      });\n\n      isInitialized.current = true;\n      // Sound library initialized\n    } catch (error) {\n      console.error(\"Failed to initialize sound library:\", error);\n      isInitialized.current = true; // Still mark as initialized to avoid retry loops\n    }\n  }, []);\n\n  const createToneSound = useCallback((frequency: number, duration: number = 0.8, type: 'bass' | 'guitar' = 'bass') => {\n    // Create Web Audio API context\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    if (audioContext.state === 'suspended') {\n      audioContext.resume();\n    }\n\n    const now = audioContext.currentTime;\n    \n    // Create oscillators for richer sound\n    const fundamentalOsc = audioContext.createOscillator();\n    const harmonicOsc = audioContext.createOscillator();\n    \n    // Create gain nodes\n    const fundamentalGain = audioContext.createGain();\n    const harmonicGain = audioContext.createGain();\n    const masterGain = audioContext.createGain();\n    \n    // Create filters\n    const lowFilter = audioContext.createBiquadFilter();\n    lowFilter.type = 'lowpass';\n    lowFilter.frequency.value = type === 'bass' ? 800 : 3000;\n    lowFilter.Q.value = 2;\n    \n    const highFilter = audioContext.createBiquadFilter();\n    highFilter.type = 'highpass';\n    highFilter.frequency.value = type === 'bass' ? 40 : 80;\n    highFilter.Q.value = 1;\n    \n    // Set up oscillators based on instrument type\n    if (type === 'bass') {\n      fundamentalOsc.type = 'square';\n      fundamentalOsc.frequency.value = frequency;\n      \n      harmonicOsc.type = 'sawtooth';\n      harmonicOsc.frequency.value = frequency * 2;\n      \n      // Bass envelope - punchy attack, sustained body\n      const attackTime = 0.005;\n      const decayTime = 0.08;\n      const sustainLevel = 0.5;\n      \n      fundamentalGain.gain.setValueAtTime(0, now);\n      fundamentalGain.gain.linearRampToValueAtTime(0.8, now + attackTime);\n      fundamentalGain.gain.exponentialRampToValueAtTime(sustainLevel, now + decayTime);\n      fundamentalGain.gain.exponentialRampToValueAtTime(0.001, now + duration);\n      \n      harmonicGain.gain.setValueAtTime(0, now);\n      harmonicGain.gain.linearRampToValueAtTime(0.2, now + attackTime);\n      harmonicGain.gain.exponentialRampToValueAtTime(0.05, now + decayTime * 0.5);\n      harmonicGain.gain.exponentialRampToValueAtTime(0.001, now + duration * 0.6);\n      \n    } else {\n      // Guitar sound\n      fundamentalOsc.type = 'triangle';\n      fundamentalOsc.frequency.value = frequency;\n      \n      harmonicOsc.type = 'sine';\n      harmonicOsc.frequency.value = frequency * 3;\n      \n      // Guitar envelope - sharp attack, quick decay\n      const attackTime = 0.003;\n      const decayTime = 0.3;\n      const sustainLevel = 0.3;\n      \n      fundamentalGain.gain.setValueAtTime(0, now);\n      fundamentalGain.gain.linearRampToValueAtTime(1, now + attackTime);\n      fundamentalGain.gain.exponentialRampToValueAtTime(sustainLevel, now + decayTime);\n      fundamentalGain.gain.exponentialRampToValueAtTime(0.001, now + duration);\n      \n      harmonicGain.gain.setValueAtTime(0, now);\n      harmonicGain.gain.linearRampToValueAtTime(0.3, now + attackTime);\n      harmonicGain.gain.exponentialRampToValueAtTime(0.1, now + decayTime * 0.3);\n      harmonicGain.gain.exponentialRampToValueAtTime(0.001, now + duration * 0.4);\n    }\n    \n    masterGain.gain.setValueAtTime(0.6, now);\n    \n    // Connect the audio graph\n    fundamentalOsc.connect(fundamentalGain);\n    harmonicOsc.connect(harmonicGain);\n    \n    fundamentalGain.connect(highFilter);\n    harmonicGain.connect(highFilter);\n    \n    highFilter.connect(lowFilter);\n    lowFilter.connect(masterGain);\n    masterGain.connect(audioContext.destination);\n    \n    // Start and stop oscillators\n    const stopTime = now + duration;\n    fundamentalOsc.start(now);\n    harmonicOsc.start(now);\n    \n    fundamentalOsc.stop(stopTime);\n    harmonicOsc.stop(stopTime);\n    \n    return audioContext;\n  }, []);\n\n  const playNote = useCallback(async (note: string, instrumentType: 'bass' | 'guitar' = 'bass') => {\n    await initializeSoundLibrary();\n    \n    let frequency = noteFrequencies[note];\n    \n    // If note not found, try adding default octave\n    if (!frequency) {\n      let noteWithOctave: string;\n      \n      if (instrumentType === 'bass') {\n        // For bass, try different octaves in order of preference\n        const bassOctaves = ['2', '3'];\n        for (const octave of bassOctaves) {\n          noteWithOctave = note + octave;\n          if (noteFrequencies[noteWithOctave]) {\n            frequency = noteFrequencies[noteWithOctave];\n            break;\n          }\n        }\n      } else {\n        // For guitar, try different octaves in order of preference  \n        const guitarOctaves = ['3', '4', '2'];\n        for (const octave of guitarOctaves) {\n          noteWithOctave = note + octave;\n          if (noteFrequencies[noteWithOctave]) {\n            frequency = noteFrequencies[noteWithOctave];\n            break;\n          }\n        }\n      }\n    }\n    \n    if (!frequency) {\n      console.warn(`Unknown note: ${note}`);\n      return;\n    }\n    \n    try {\n      createToneSound(frequency, instrumentType === 'bass' ? 1.5 : 1.0, instrumentType);\n      // Playing note\n    } catch (error) {\n      console.warn(`Failed to play note ${note}:`, error);\n    }\n  }, [initializeSoundLibrary, createToneSound]);\n\n  const playBassNote = useCallback(async (note: string) => {\n    return playNote(note, 'bass');\n  }, [playNote]);\n\n  const playGuitarNote = useCallback(async (note: string) => {\n    return playNote(note, 'guitar');\n  }, [playNote]);\n\n  return {\n    playNote,\n    playBassNote,\n    playGuitarNote,\n    initializeSoundLibrary,\n    availableNotes: Object.keys(noteFrequencies)\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useSimpleBassSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from \"react\";\n\nexport const useSimpleBassSounds = () => {\n  const playBassNote = useCallback(async (note: string) => {\n    // Simple bass play\n    \n    // Map bass notes to available sound files (using guitar sounds since bass files don't exist)\n    const noteToFile: { [key: string]: string } = {\n      \"E\": \"/sounds/chord-em.mp3\",\n      \"A\": \"/sounds/chord-a.mp3\", \n      \"D\": \"/sounds/chord-d.mp3\",\n      \"G\": \"/sounds/chord-g.mp3\",\n      \"C\": \"/sounds/chord-c.mp3\",\n      \"F\": \"/sounds/chord-f.mp3\",\n      \"B\": \"/sounds/chord-a.mp3\", // Use A as fallback\n      \"D3\": \"/sounds/chord-d.mp3\",\n      \"G3\": \"/sounds/chord-g.mp3\",\n      \"E2\": \"/sounds/chord-em.mp3\",\n      \"A2\": \"/sounds/chord-a.mp3\", \n      \"D2\": \"/sounds/chord-d.mp3\",\n      \"G2\": \"/sounds/chord-g.mp3\"\n    };\n\n    const soundFile = noteToFile[note];\n    if (soundFile) {\n      try {\n        // Playing bass sound\n        const audio = new Audio(soundFile);\n        audio.volume = 0.8;\n        await audio.play();\n      } catch (error) {\n        console.warn(`Failed to play bass sound for note ${note}:`, error);\n      }\n    } else {\n      console.warn(`No sound file mapped for bass note: ${note}`);\n    }\n  }, []);\n\n  return {\n    playBassNote,\n    initializeBassSounds: () => Promise.resolve() // No-op for compatibility\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useSongChordExtraction.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\nimport { getInstrumentChords, getAllChordsForInstrument } from \"@/data/readonly/chordDatabase\";\n\ninterface SongLine {\n  text: string;\n  chords: string[];\n  section?: string;\n}\n\ninterface Song {\n  title: string;\n  lines: SongLine[];\n}\n\n/**\n * Hook for extracting and validating chords from songs using the chord database\n */\nexport const useSongChordExtraction = () => {\n  const [availableChords, setAvailableChords] = useState<{\n    guitar: string[];\n    ukulele: string[];\n    bass: string[];\n  }>({\n    guitar: [],\n    ukulele: [],\n    bass: []\n  });\n\n  // Initialize available chords from database\n  useEffect(() => {\n    const guitarChords = getAllChordsForInstrument(\"guitar\");\n    const ukuleleChords = getAllChordsForInstrument(\"ukulele\");\n    const bassChords = getAllChordsForInstrument(\"bass\");\n\n    setAvailableChords({\n      guitar: [...guitarChords],\n      ukulele: [...ukuleleChords],\n      bass: [...bassChords]\n    });\n  }, []);\n\n  /**\n   * Extract unique chords from a song\n   */\n  const extractChordsFromSong = useCallback((song: Song): string[] => {\n    const chordSet = new Set<string>();\n    \n    song.lines.forEach(line => {\n      line.chords.forEach(chord => {\n        if (chord && chord.trim()) {\n          chordSet.add(chord.trim());\n        }\n      });\n    });\n\n    return Array.from(chordSet);\n  }, []);\n\n  /**\n   * Check if chords are available for specific instruments\n   */\n  const validateChordsForInstruments = useCallback((chords: string[], instruments: string[]) => {\n    const results: { [instrument: string]: { available: string[]; missing: string[] } } = {};\n\n    instruments.forEach(instrument => {\n      const instrumentKey = instrument.toLowerCase() as keyof typeof availableChords;\n      const availableForInstrument = availableChords[instrumentKey] || [];\n      \n      const available = chords.filter(chord => availableForInstrument.includes(chord));\n      const missing = chords.filter(chord => !availableForInstrument.includes(chord));\n      \n      results[instrument] = { available, missing };\n    });\n\n    return results;\n  }, [availableChords]);\n\n  /**\n   * Get suggested alternative chords for missing ones\n   */\n  const getSuggestedAlternatives = useCallback((missingChord: string, instrument: string): string[] => {\n    const instrumentKey = instrument.toLowerCase() as keyof typeof availableChords;\n    const available = availableChords[instrumentKey] || [];\n    \n    // Simple matching: same root note\n    const rootNote = missingChord.charAt(0);\n    const alternatives = available.filter(chord => chord.charAt(0) === rootNote);\n    \n    return alternatives.slice(0, 3); // Return top 3 alternatives\n  }, [availableChords]);\n\n  return {\n    availableChords,\n    extractChordsFromSong,\n    validateChordsForInstruments,\n    getSuggestedAlternatives\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useStringInstrument.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token FingeringPosition","line":3,"column":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo, useCallback } from \"react\";\nimport { StringInstrumentSystem } from \"@/lib/stringInstrumentSystem\";\nimport { useChordFingerings, type FingeringPosition } from \"./useChordFingerings\";\nimport { Chord } from \"@/types/chord\";\n\nexport const useStringInstrument = (instrumentType: string) => {\n  const [playingString, setPlayingString] = useState<number | null>(null);\n  const { getFingeringsForChord } = useChordFingerings();\n\n  const instrumentSystem = useMemo(() => {\n    return new StringInstrumentSystem(instrumentType);\n  }, [instrumentType]);\n\n  const getChordFingering = useCallback((chordName?: string, transposition: number = 0): FingeringPosition[] => {\n    if (!chordName) return [];\n    \n    // Get fingering for chord on instrument\n    \n    // Use ONLY the centralized chord fingerings hook\n    return getFingeringsForChord(instrumentType, chordName, transposition);\n  }, [getFingeringsForChord, instrumentType]);\n\n  const calculateNote = useCallback((stringIndex: number, fret: number): string => {\n    return instrumentSystem.calculateNoteFromFret(stringIndex, fret);\n  }, [instrumentSystem]);\n\n  const playString = useCallback(async (\n    stringIndex: number, \n    playFunction: (note: string) => Promise<void>,\n    note?: string, \n    fret?: number\n  ) => {\n    setPlayingString(stringIndex);\n    \n    let noteToPlay: string;\n    \n    if (note && fret !== undefined && fret > 0) {\n      // For fretted notes, use the provided note exactly as specified in fingering patterns\n      noteToPlay = note;\n    } else if (fret !== undefined && fret > 0) {\n      // Calculate note based on fret position\n      noteToPlay = calculateNote(stringIndex, fret);\n    } else {\n      // Play open string\n      noteToPlay = instrumentSystem.getStringNote(stringIndex);\n    }\n    \n    await playFunction(noteToPlay);\n    setTimeout(() => setPlayingString(null), 600);\n  }, [instrumentSystem, calculateNote]);\n\n  return {\n    instrumentSystem,\n    playingString,\n    setPlayingString,\n    getChordFingering,\n    calculateNote,\n    playString\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useSyntheticBassSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from \"react\";\n\nexport const useSyntheticBassSounds = () => {\n  const playBassNote = useCallback(async (note: string) => {\n    // Synthetic bass play\n    \n    try {\n      // Create audio context\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Map notes to frequencies (updated for correct bass tuning E1-A1-D2-G2)\n      const noteFrequencies: { [key: string]: number } = {\n        // Open strings (standard 4-string bass tuning, low to high)\n        \"E1\": 41.20,   // Low E (4th string/index 0) - thickest, lowest  \n        \"A1\": 55.00,   // A (3rd string/index 1)\n        \"D2\": 73.42,   // D (2nd string/index 2) \n        \"G2\": 98.00,   // High G (1st string/index 3) - thinnest, highest\n        \n        // For compatibility with old notation (without octave numbers) - map to correct bass octaves\n        \"E\": 41.20,    // Maps to E1 (open E string)\n        \"A\": 55.00,    // Maps to A1 (open A string)  \n        \"D\": 73.42,    // Maps to D2 (open D string)\n        \"G\": 98.00,    // Maps to G2 (open G string)\n        \n        // Fretted notes in bass range\n        \"F\": 43.65,    // F1\n        \"F#\": 46.25,   // F#1\n        \"Gb\": 46.25,   // Gb1\n        \"G#\": 51.91,   // G#1\n        \"Ab\": 51.91,   // Ab1\n        \"A#\": 58.27,   // A#1/Bb1\n        \"Bb\": 58.27,   // Bb1\n        \"B\": 61.74,    // B1\n        \"C\": 65.41,    // C2\n        \"C#\": 69.30,   // C#2\n        \"Db\": 69.30,   // Db2\n        \"D#\": 77.78,   // D#2\n        \"Eb\": 77.78,   // Eb2\n        \"E2\": 82.41,   // E2 (one octave up from E1)\n        \"F2\": 87.31,   // F2\n        \"F#2\": 92.50,  // F#2\n        \"Gb2\": 92.50,  // Gb2\n        \"G#2\": 103.83, // G#2\n        \"Ab2\": 103.83, // Ab2\n        \"A2\": 110.00,  // A2 (one octave up from A1)\n        \"A#2\": 116.54, // A#2\n        \"Bb2\": 116.54, // Bb2\n        \"B2\": 123.47,  // B2\n        \"C3\": 130.81,  // C3\n        \"D3\": 146.83,  // D3 (very high for bass, but possible)\n        \"G3\": 196.00   // G3 (very high for bass)\n      };\n\n      const frequency = noteFrequencies[note];\n      if (!frequency) {\n        console.warn(`No frequency found for bass note: ${note}`);\n        return;\n      }\n      \n      // Frequency debug checks removed\n\n      // Create oscillator for bass sound\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      // Connect audio nodes\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      // Set bass sound characteristics\n      oscillator.type = 'sawtooth'; // Rich harmonic content for bass\n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      \n      // Create envelope for realistic bass attack/decay\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.01); // Quick attack\n      gainNode.gain.exponentialRampToValueAtTime(0.1, audioContext.currentTime + 0.3); // Sustain\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 1.5); // Long decay\n      \n      // Play the note\n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 1.5);\n      \n      // Synthetic bass note played\n      \n    } catch (error) {\n      console.warn(`Failed to play synthetic bass note ${note}:`, error);\n    }\n  }, []);\n\n  return {\n    playBassNote,\n    initializeBassSounds: () => Promise.resolve() // No-op for compatibility\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useTransposition.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":15,"column":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from \"react\";\nimport { \n  transposeChord, \n  transposeChordArray, \n  transposeChordName,\n  formatTransposition\n} from \"@/lib/chordSystem\";\nimport { Chord } from \"@/types/chord\";\nimport { CHORD_LIBRARY } from \"@/data/chordLibrary\";\nimport useLocalStorage from \"./useLocalStorage\";\n\nexport const useTransposition = () => {\n  const [transposition, setTransposition] = useLocalStorage('transposition', 0);\n\n  const transposeNote = useCallback((note: string, semitones: number): string => {\n    return transposeChordName(note, semitones);\n  }, []);\n\n  const transposeChordWithLibrary = useCallback((chord: Chord, semitones: number): Chord => {\n    return transposeChord(chord, semitones, CHORD_LIBRARY);\n  }, []);\n\n  const transposeChordArrayWithLibrary = useCallback((chords: Chord[], semitones: number): Chord[] => {\n    return transposeChordArray(chords, semitones, CHORD_LIBRARY);\n  }, []);\n\n  const transposeUp = useCallback(() => {\n    setTransposition(prev => (prev + 1) % 12);\n  }, []);\n\n  const transposeDown = useCallback(() => {\n    setTransposition(prev => (prev - 1 + 12) % 12);\n  }, []);\n\n  const reset = useCallback(() => {\n    setTransposition(0);\n  }, []);\n\n  const getTranspositionText = useCallback(() => {\n    return formatTransposition(transposition);\n  }, [transposition]);\n\n  return {\n    transposition,\n    transposeNote,\n    transposeChord: transposeChordWithLibrary,\n    transposeChordArray: transposeChordArrayWithLibrary,\n    transposeUp,\n    transposeDown,\n    reset,\n    getTranspositionText\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useUkuleleChords.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":11,"column":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from \"react\";\nimport { useChordFingerings } from \"./useChordFingerings\";\n\n/**\n * Specialized hook for ukulele chord functionality\n * Uses the centralized chord fingerings system\n */\nexport const useUkuleleChords = () => {\n  const { getFingeringsForChord, getFingeringsAsArray } = useChordFingerings();\n\n  const getUkuleleChordFingering = useCallback((chordName: string, transposition: number = 0) => {\n    return getFingeringsForChord('ukulele', chordName, transposition);\n  }, [getFingeringsForChord]);\n\n  const getUkuleleChordArray = useCallback((chordName: string) => {\n    return getFingeringsAsArray('ukulele', chordName, 4); // Ukulele has 4 strings\n  }, [getFingeringsAsArray]);\n\n  return {\n    getUkuleleChordFingering,\n    getUkuleleChordArray\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/hooks/useUkuleleSounds.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token as","line":11,"column":71}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from \"react\";\nimport { useChordFingerings } from \"./useChordFingerings\";\n\nexport const useUkuleleSounds = () => {\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const { getFingeringsAsArray } = useChordFingerings();\n\n  const initializeSounds = useCallback(async () => {\n    try {\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n        console.log(\"Created new AudioContext for ukulele\");\n      }\n      \n      if (audioContextRef.current.state === 'suspended') {\n        console.log(\"AudioContext suspended, resuming...\");\n        await audioContextRef.current.resume();\n        console.log(\"AudioContext resumed, state:\", audioContextRef.current.state);\n      }\n      \n      console.log(\"Ukulele AudioContext state:\", audioContextRef.current.state);\n      console.log(\"Ukulele AudioContext sample rate:\", audioContextRef.current.sampleRate);\n      \n      return Promise.resolve();\n    } catch (error) {\n      console.error(\"Failed to initialize ukulele sounds:\", error);\n      throw error;\n    }\n  }, []);\n\n  const createUkuleleSound = (frequency: number, duration: number = 2.5) => {\n    console.log(\"=== CREATE UKULELE SOUND START ===\");\n    console.log(\"Attempting to create ukulele sound at frequency:\", frequency);\n    \n    if (!audioContextRef.current || audioContextRef.current.state !== 'running') {\n      console.error(\"AudioContext not ready, state:\", audioContextRef.current?.state);\n      return;\n    }\n\n    try {\n      const ctx = audioContextRef.current;\n      const now = ctx.currentTime;\n      console.log(\"AudioContext current time:\", now);\n\n      // Create a softer, more mellow sound for ukulele\n      const osc = ctx.createOscillator();\n      const gainNode = ctx.createGain();\n      console.log(\"Created oscillator and gain node\");\n\n      osc.type = 'triangle'; // Softer than sawtooth\n      osc.frequency.setValueAtTime(frequency, now);\n      console.log(\"Set oscillator frequency to:\", frequency);\n\n      // Gentle envelope for ukulele sound\n      gainNode.gain.setValueAtTime(0, now);\n      gainNode.gain.linearRampToValueAtTime(0.3, now + 0.01); // Increased volume\n      gainNode.gain.exponentialRampToValueAtTime(0.1, now + 0.1);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, now + duration);\n      console.log(\"Set gain envelope\");\n\n      // Connect\n      osc.connect(gainNode);\n      gainNode.connect(ctx.destination);\n      console.log(\"Connected audio nodes\");\n\n      // Start and stop\n      osc.start(now);\n      osc.stop(now + duration);\n      console.log(\"Started and scheduled stop for oscillator\");\n      \n      console.log(\"=== CREATE UKULELE SOUND END ===\");\n      console.log(\"Ukulele sound created successfully at\", frequency, \"Hz\");\n    } catch (error) {\n      console.error(\"Error creating ukulele sound:\", error);\n    }\n  };\n\n  const playChord = useCallback(async (chordName: string, transposition: number = 0) => {\n    console.log(\"=== PLAY UKULELE CHORD START ===\");\n    console.log(\"Playing ukulele chord:\", chordName, \"with transposition:\", transposition);\n    \n    try {\n      await initializeSounds();\n      console.log(\"Ukulele sounds initialized successfully\");\n      \n      // Get the chord fingering pattern from database\n      const chordFingers = getFingeringsAsArray('ukulele', chordName, 4);\n      console.log(\"Ukulele chord fingers for\", chordName, \":\", chordFingers);\n      \n      // Ukulele tuning (G-C-E-A from bottom to top, string 0-3)\n      const openStringFreqs = [196.0, 261.63, 329.63, 440.0]; // G4-C4-E4-A4\n      const stringFrequencies: number[] = [];\n      \n      chordFingers.forEach((fret, stringIndex) => {\n        if (fret >= 0) { // -1 means don't play this string\n          let frequency = openStringFreqs[stringIndex];\n          \n          // Apply fret position\n          if (fret > 0) {\n            frequency = frequency * Math.pow(2, fret / 12);\n          }\n          \n          // Apply transposition\n          frequency = frequency * Math.pow(2, transposition / 12);\n          \n          stringFrequencies.push(frequency);\n          console.log(`Ukulele String ${stringIndex + 1}: fret ${fret} -> frequency ${frequency.toFixed(2)}Hz`);\n        } else {\n          console.log(`Ukulele String ${stringIndex + 1}: muted (fret ${fret})`);\n        }\n      });\n      \n      console.log(\"Total calculated ukulele frequencies:\", stringFrequencies.length);\n      \n      // Play all strings with a slight delay between them\n      stringFrequencies.forEach((frequency, index) => {\n        setTimeout(() => {\n          createUkuleleSound(frequency, 2.0); // Shorter duration for ukulele\n        }, index * 40); // Slightly faster strumming\n      });\n      \n      console.log(\"=== PLAY UKULELE CHORD END ===\");\n    } catch (error) {\n      console.error(\"Error in ukulele playChord:\", error);\n    }\n  }, [initializeSounds]);\n\n  const playString = useCallback(async (stringIndex: number, chordName?: string, transposition: number = 0) => {\n    console.log(\"=== UKULELE PLAY STRING START ===\");\n    console.log(\"String index:\", stringIndex, \"Chord:\", chordName, \"Transposition:\", transposition);\n    \n    await initializeSounds();\n    console.log(\"Ukulele sounds initialized for string play\");\n    \n    // Ukulele string frequencies (G-C-E-A from bottom to top) - Standard tuning\n    const openStringFreqs = [196.0, 261.63, 329.63, 440.0]; // G4-C4-E4-A4\n    let frequency = openStringFreqs[stringIndex];\n    console.log(\"Base frequency for string\", stringIndex, \":\", frequency);\n    \n    // If a chord is selected, modify the frequency based on fret position\n    if (chordName) {\n      const chordFingers = getFingeringsAsArray('ukulele', chordName, 4);\n      console.log(\"Chord fingers for\", chordName, \":\", chordFingers);\n      const fret = chordFingers[stringIndex];\n      console.log(\"Fret for string\", stringIndex, \":\", fret);\n      \n      if (fret >= 0 && fret > 0) { // Only modify if it's a valid fret (not muted and not open)\n        frequency = frequency * Math.pow(2, fret / 12); // Each fret is a semitone\n        console.log(\"Modified frequency after fret calculation:\", frequency);\n      } else if (fret === -1) {\n        // Don't play muted strings\n        console.log(`Ukulele string ${stringIndex} is muted for chord ${chordName} - NOT PLAYING`);\n        return;\n      }\n    }\n    \n    // Apply transposition\n    frequency = frequency * Math.pow(2, transposition / 12);\n    console.log(\"Final frequency after transposition:\", frequency);\n    \n    console.log(`Playing ukulele string ${stringIndex} (${stringIndex === 0 ? 'G' : stringIndex === 1 ? 'C' : stringIndex === 2 ? 'E' : 'A'}) at frequency ${frequency.toFixed(2)}Hz for chord ${chordName || 'none'}`);\n    createUkuleleSound(frequency, 2.0);\n    console.log(\"=== UKULELE PLAY STRING END ===\");\n  }, [initializeSounds]);\n\n  return {\n    playChord,\n    playString,\n    initializeSounds\n  };\n};\n\n// NOTE: All chord fingering logic has been moved to useChordFingerings hook\n// This ensures consistent fingering data across all instruments","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/lib/chordSystem.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":10,"column":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Robust Chord and Transposition System\n// Completely rewritten for reliability and accuracy\n\nimport { Chord, ChordLibrary } from \"@/types/chord\";\n\n// Chromatic scale with preferred notation\nconst CHROMATIC_NOTES = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"Bb\", \"B\"];\n\n// Map enharmonic equivalents to our standard notation (consistent with musical circle)\nconst ENHARMONIC_MAP: { [key: string]: string } = {\n  'Db': 'C#',\n  'Eb': 'D#', \n  'Gb': 'F#',\n  'Ab': 'G#',\n  'A#': 'Bb',  // Prefer Bb over A# (standard in music theory)\n  'Cb': 'B',\n  'B#': 'C',\n  'E#': 'F',\n  'Fb': 'E'\n};\n\n/**\n * Normalize a note to our preferred enharmonic spelling\n */\nexport const normalizeNote = (note: string): string => {\n  return ENHARMONIC_MAP[note] || note;\n};\n\n/**\n * Get the chromatic index (0-11) of a note\n */\nexport const getNoteIndex = (note: string): number => {\n  const normalized = normalizeNote(note);\n  const index = CHROMATIC_NOTES.indexOf(normalized);\n  if (index === -1) {\n    console.warn(`Unknown note: ${note}`);\n    return 0; // Default to C\n  }\n  return index;\n};\n\n/**\n * Get note at a specific chromatic index\n */\nexport const getNoteFromIndex = (index: number): string => {\n  const normalizedIndex = ((index % 12) + 12) % 12;\n  return CHROMATIC_NOTES[normalizedIndex];\n};\n\n/**\n * Transpose a single note by semitones\n */\nexport const transposeNote = (note: string, semitones: number): string => {\n  // Extract just the note part (root note)\n  const match = note.match(/^([A-G][b#]?)/);\n  if (!match) {\n    console.warn(`Invalid note format: ${note}`);\n    return note;\n  }\n  \n  const rootNote = match[1];\n  const currentIndex = getNoteIndex(rootNote);\n  const newIndex = currentIndex + semitones;\n  const transposedNote = getNoteFromIndex(newIndex);\n  \n  // Replace the root note in the original string\n  return note.replace(rootNote, transposedNote);\n};\n\n/**\n * Transpose a chord name by semitones\n */\nexport const transposeChordName = (chordName: string, semitones: number): string => {\n  if (semitones === 0) return chordName;\n  \n  // Match root note and chord quality/extensions\n  const match = chordName.match(/^([A-G][b#]?)(.*)$/);\n  if (!match) {\n    console.warn(`Invalid chord format: ${chordName}`);\n    return chordName;\n  }\n  \n  const [, rootNote, quality] = match;\n  const transposedRoot = transposeNote(rootNote, semitones);\n  \n  return transposedRoot + quality;\n};\n\n/**\n * Transpose a chord object by semitones\n * Uses chord library if available, falls back to fret transposition\n */\nexport const transposeChord = (chord: Chord, semitones: number, chordLibrary?: ChordLibrary): Chord => {\n  if (semitones === 0) return chord;\n  \n  const transposedName = transposeChordName(chord.name, semitones);\n  \n  // Try to get the proper fingering from library\n  if (chordLibrary && chordLibrary[transposedName]) {\n    return {\n      ...chordLibrary[transposedName],\n      isCustom: chord.isCustom\n    };\n  }\n  \n  // Fallback: transpose fret positions (for custom chords)\n  const transposedFingers = chord.fingers.map(fret => {\n    if (fret === 0 || fret === -1) return fret; // Open strings and muted strings stay the same\n    const newFret = fret + semitones;\n    return newFret > 0 ? newFret : 0; // Ensure frets don't go below 0\n  });\n  \n  return {\n    ...chord,\n    name: transposedName,\n    fingers: transposedFingers\n  };\n};\n\n/**\n * Transpose an array of chords by semitones\n */\nexport const transposeChordArray = (\n  chords: Chord[], \n  semitones: number, \n  chordLibrary?: ChordLibrary\n): Chord[] => {\n  return chords.map(chord => transposeChord(chord, semitones, chordLibrary));\n};\n\n/**\n * Validate that a note is in the chromatic scale\n */\nexport const isValidNote = (note: string): boolean => {\n  const normalized = normalizeNote(note);\n  return CHROMATIC_NOTES.includes(normalized);\n};\n\n/**\n * Get the interval between two notes in semitones\n */\nexport const getInterval = (fromNote: string, toNote: string): number => {\n  const fromIndex = getNoteIndex(fromNote);\n  const toIndex = getNoteIndex(toNote);\n  return ((toIndex - fromIndex) + 12) % 12;\n};\n\n/**\n * Format transposition for display\n */\nexport const formatTransposition = (semitones: number): string => {\n  if (semitones === 0) return \"\";\n  return semitones > 0 ? `+${semitones}` : `${semitones}`;\n};\n\n// Re-export common chord types for convenience\nexport const CHORD_QUALITIES = {\n  major: \"\",\n  minor: \"m\",\n  dominant7: \"7\",\n  major7: \"maj7\",\n  minor7: \"m7\",\n  sus2: \"sus2\",\n  sus4: \"sus4\",\n  add9: \"add9\",\n  diminished: \"dim\",\n  augmented: \"aug\",\n  power: \"5\"\n} as const;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/lib/databaseValidator.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":11,"column":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database integrity validator\n * \n * This file contains functions to validate that the chord database\n * remains immutable and hasn't been tampered with.\n */\n\nimport { validateChordDatabase, getReadonlyChordDatabase } from \"@/data/readonly/chordDatabase\";\n\nexport class DatabaseIntegrityError extends Error {\n  constructor(message: string) {\n    super(`Database Integrity Error: ${message}`);\n    this.name = 'DatabaseIntegrityError';\n  }\n}\n\n/**\n * Validates the integrity of the chord database on startup\n * Throws an error if the database has been compromised\n */\nexport const validateDatabaseIntegrity = (): void => {\n  console.log(\"🔒 Validating chord database integrity...\");\n  \n  if (!validateChordDatabase()) {\n    throw new DatabaseIntegrityError(\"Chord database is not properly frozen and could be modified\");\n  }\n  \n  const database = getReadonlyChordDatabase();\n  \n  // Check that basic structure exists\n  if (!database || database.length === 0) {\n    throw new DatabaseIntegrityError(\"Chord database is empty or corrupted\");\n  }\n  \n  // Validate each instrument has required properties\n  for (const instrument of database) {\n    if (!instrument.instrument || !instrument.tuning || !instrument.chords) {\n      throw new DatabaseIntegrityError(`Invalid instrument data structure for ${instrument.instrument}`);\n    }\n    \n    if (instrument.tuning.length === 0) {\n      throw new DatabaseIntegrityError(`No tuning data for instrument ${instrument.instrument}`);\n    }\n    \n    // Check that chords exist\n    const chordCount = Object.keys(instrument.chords).length;\n    if (chordCount === 0) {\n      throw new DatabaseIntegrityError(`No chords found for instrument ${instrument.instrument}`);\n    }\n  }\n  \n  console.log(`✅ Database integrity validated. ${database.length} instruments loaded with readonly protection.`);\n};\n\n/**\n * Runtime check to ensure database hasn't been modified\n * Can be called periodically during application runtime\n */\nexport const performRuntimeIntegrityCheck = (): boolean => {\n  try {\n    validateDatabaseIntegrity();\n    return true;\n  } catch (error) {\n    console.error(\"Runtime integrity check failed:\", error);\n    return false;\n  }\n};\n\n/**\n * Get database statistics for monitoring\n */\nexport const getDatabaseStats = () => {\n  const database = getReadonlyChordDatabase();\n  \n  const stats = {\n    instrumentCount: database.length,\n    instruments: database.map(inst => ({\n      name: inst.instrument,\n      stringCount: inst.tuning.length,\n      chordCount: Object.keys(inst.chords).length,\n      totalFingerings: Object.values(inst.chords).reduce((sum, chord) => sum + chord.length, 0)\n    })),\n    totalChords: database.reduce((sum, inst) => sum + Object.keys(inst.chords).length, 0),\n    totalFingerings: database.reduce((sum, inst) => \n      sum + Object.values(inst.chords).reduce((chordSum, chord) => chordSum + chord.length, 0), 0\n    )\n  };\n  \n  return stats;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/lib/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/lib/stringInstrumentSystem.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":3,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { transposeNote } from \"./chordSystem\";\n\nexport interface StringInstrument {\n  name: string;\n  strings: string[]; // Open string notes (E, A, D, G for bass; E, A, D, G, B, e for guitar)\n  fretCount: number;\n  thickness: number[]; // Visual thickness for each string\n  colors?: string[]; // Optional colors for each string\n}\n\nexport interface FingeringPosition {\n  stringIndex: number;\n  fret: number; // -1 for muted, 0 for open, >0 for fretted\n  note: string;\n  isRoot: boolean;\n}\n\nexport interface ChordFingering {\n  chord: string;\n  positions: FingeringPosition[];\n}\n\n// Instrument definitions\nexport const INSTRUMENTS: { [key: string]: StringInstrument } = {\n  guitar: {\n    name: \"Guitar\",\n    strings: [\"E2\", \"A2\", \"D3\", \"G3\", \"B3\", \"E4\"], // Standard guitar tuning (low to high)\n    fretCount: 12,\n    thickness: [6, 5, 4, 3, 2, 1], // Thickest to thinnest\n    colors: [\"bg-amber-600\", \"bg-amber-500\", \"bg-amber-400\", \"bg-amber-300\", \"bg-amber-200\", \"bg-amber-100\"]\n  },\n  \"guitar-dropd\": {\n    name: \"Guitar (Drop D)\",\n    strings: [\"D2\", \"A2\", \"D3\", \"G3\", \"B3\", \"E4\"], // Drop D tuning\n    fretCount: 12,\n    thickness: [6, 5, 4, 3, 2, 1],\n    colors: [\"bg-red-600\", \"bg-amber-500\", \"bg-amber-400\", \"bg-amber-300\", \"bg-amber-200\", \"bg-amber-100\"]\n  },\n  \"guitar-openg\": {\n    name: \"Guitar (Open G)\",\n    strings: [\"D2\", \"G2\", \"D3\", \"G3\", \"B3\", \"D4\"], // Open G tuning\n    fretCount: 12,\n    thickness: [6, 5, 4, 3, 2, 1],\n    colors: [\"bg-green-600\", \"bg-green-500\", \"bg-amber-400\", \"bg-green-300\", \"bg-amber-200\", \"bg-green-100\"]\n  },\n  \"guitar-opend\": {\n    name: \"Guitar (Open D)\",\n    strings: [\"D2\", \"A2\", \"D3\", \"F#3\", \"A3\", \"D4\"], // Open D tuning\n    fretCount: 12,\n    thickness: [6, 5, 4, 3, 2, 1],\n    colors: [\"bg-blue-600\", \"bg-amber-500\", \"bg-blue-400\", \"bg-blue-300\", \"bg-amber-200\", \"bg-blue-100\"]\n  },\n  \"guitar-dadgad\": {\n    name: \"Guitar (DADGAD)\",\n    strings: [\"D2\", \"A2\", \"D3\", \"G3\", \"A3\", \"D4\"], // DADGAD tuning\n    fretCount: 12,\n    thickness: [6, 5, 4, 3, 2, 1],\n    colors: [\"bg-purple-600\", \"bg-amber-500\", \"bg-purple-400\", \"bg-amber-300\", \"bg-amber-200\", \"bg-purple-100\"]\n  },\n  \"guitar-halfstepdown\": {\n    name: \"Guitar (Half-step Down)\",\n    strings: [\"D#2\", \"G#2\", \"C#3\", \"F#3\", \"A#3\", \"D#4\"], // Half-step down tuning\n    fretCount: 12,\n    thickness: [6, 5, 4, 3, 2, 1],\n    colors: [\"bg-orange-600\", \"bg-orange-500\", \"bg-orange-400\", \"bg-orange-300\", \"bg-orange-200\", \"bg-orange-100\"]\n  },\n  \"guitar-wholestepdown\": {\n    name: \"Guitar (Whole-step Down)\",\n    strings: [\"D2\", \"G2\", \"C3\", \"F3\", \"A3\", \"D4\"], // Whole-step down tuning\n    fretCount: 12,\n    thickness: [6, 5, 4, 3, 2, 1],\n    colors: [\"bg-teal-600\", \"bg-teal-500\", \"bg-teal-400\", \"bg-teal-300\", \"bg-teal-200\", \"bg-teal-100\"]\n  },\n  bass: {\n    name: \"Bass\",\n    strings: [\"E1\", \"A1\", \"D2\", \"G2\"], // Standard 4-string bass tuning (low to high)\n    fretCount: 12,\n    thickness: [6, 5, 4, 3], // Thickest to thinnest\n    colors: [\"bg-amber-600\", \"bg-amber-500\", \"bg-amber-400\", \"bg-amber-300\"]\n  },\n  ukulele: {\n    name: \"Ukulele\",\n    strings: [\"G4\", \"C4\", \"E4\", \"A4\"], // Standard ukulele tuning (reentrant - G is higher octave)\n    fretCount: 12,\n    thickness: [2, 2.5, 1.5, 2], // More realistic ukulele string thickness - A thickest, E thinnest\n    colors: [\"bg-yellow-400\", \"bg-yellow-300\", \"bg-yellow-200\", \"bg-yellow-100\"]\n  },\n  mandolin: {\n    name: \"Mandolin\",\n    strings: [\"G3\", \"D4\", \"A4\", \"E5\"], // Standard mandolin tuning with octaves\n    fretCount: 12,\n    thickness: [3, 2.5, 2, 1.5],\n    colors: [\"bg-orange-400\", \"bg-orange-300\", \"bg-orange-200\", \"bg-orange-100\"]\n  },\n  octavemandolin: {\n    name: \"Octave Mandolin\",\n    strings: [\"G2\", \"D3\", \"A3\", \"E4\"], // One octave lower than mandolin\n    fretCount: 12,\n    thickness: [4, 3.5, 3, 2.5],\n    colors: [\"bg-orange-500\", \"bg-orange-400\", \"bg-orange-300\", \"bg-orange-200\"]\n  },\n  bouzouki: {\n    name: \"Bouzouki\",\n    strings: [\"C3\", \"F3\", \"A3\", \"D4\"], // Greek bouzouki tuning\n    fretCount: 12,\n    thickness: [4, 3.5, 3, 2.5],\n    colors: [\"bg-blue-400\", \"bg-blue-300\", \"bg-blue-200\", \"bg-blue-100\"]\n  },\n  balalaika: {\n    name: \"Balalaika\",\n    strings: [\"E4\", \"E4\", \"A4\"], // Traditional balalaika tuning (two E strings)\n    fretCount: 12,\n    thickness: [2, 2, 2.5],\n    colors: [\"bg-red-400\", \"bg-red-300\", \"bg-red-200\"]\n  },\n  banjo4: {\n    name: \"4-String Banjo\",\n    strings: [\"C3\", \"G3\", \"B3\", \"D4\"], // Tenor banjo tuning\n    fretCount: 12,\n    thickness: [4, 3, 2.5, 2],\n    colors: [\"bg-amber-500\", \"bg-amber-400\", \"bg-amber-300\", \"bg-amber-200\"]\n  },\n  banjo5: {\n    name: \"5-String Banjo\",\n    strings: [\"G4\", \"D3\", \"G3\", \"B3\", \"D4\"], // 5-string banjo with high G drone\n    fretCount: 12,\n    thickness: [2, 4, 3, 2.5, 2],\n    colors: [\"bg-amber-600\", \"bg-amber-500\", \"bg-amber-400\", \"bg-amber-300\", \"bg-amber-200\"]\n  }\n};\n\n// Bass-specific chord patterns (legacy fallback only) - updated for correct tuning\nexport const BASS_CHORD_PATTERNS: { [chord: string]: FingeringPosition[] } = {\n  \"G7\": [\n    { stringIndex: 0, fret: 3, note: \"G1\", isRoot: true },\n    { stringIndex: 1, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 2, fret: 0, note: \"D2\", isRoot: false },\n    { stringIndex: 3, fret: 1, note: \"G#2\", isRoot: false }\n  ],\n  \"G\": [\n    { stringIndex: 0, fret: 3, note: \"G1\", isRoot: true },\n    { stringIndex: 1, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 2, fret: 0, note: \"D2\", isRoot: false },\n    { stringIndex: 3, fret: -1, note: \"\", isRoot: false }\n  ],\n  \"A\": [\n    { stringIndex: 0, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 1, fret: 0, note: \"A1\", isRoot: true },\n    { stringIndex: 2, fret: 2, note: \"E2\", isRoot: false },\n    { stringIndex: 3, fret: -1, note: \"\", isRoot: false }\n  ],\n  \"D\": [\n    { stringIndex: 0, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 1, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 2, fret: 0, note: \"D2\", isRoot: true },\n    { stringIndex: 3, fret: -1, note: \"\", isRoot: false }\n  ],\n  \"C\": [\n    { stringIndex: 0, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 1, fret: 3, note: \"C2\", isRoot: true },\n    { stringIndex: 2, fret: 2, note: \"E2\", isRoot: false },\n    { stringIndex: 3, fret: 0, note: \"G2\", isRoot: false }\n  ],\n  \"E\": [\n    { stringIndex: 0, fret: 0, note: \"E1\", isRoot: true },\n    { stringIndex: 1, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 2, fret: 2, note: \"E2\", isRoot: false },\n    { stringIndex: 3, fret: -1, note: \"\", isRoot: false }\n  ],\n  \"F\": [\n    { stringIndex: 0, fret: 1, note: \"F1\", isRoot: true },\n    { stringIndex: 1, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 2, fret: 3, note: \"F2\", isRoot: false },\n    { stringIndex: 3, fret: -1, note: \"\", isRoot: false }\n  ],\n  \"B\": [\n    { stringIndex: 0, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 1, fret: 2, note: \"B1\", isRoot: true },\n    { stringIndex: 2, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 3, fret: -1, note: \"\", isRoot: false }\n  ],\n  \"Am\": [\n    { stringIndex: 0, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 1, fret: 0, note: \"A1\", isRoot: true },\n    { stringIndex: 2, fret: 2, note: \"E2\", isRoot: false },\n    { stringIndex: 3, fret: -1, note: \"\", isRoot: false }\n  ],\n  \"Em\": [\n    { stringIndex: 0, fret: 0, note: \"E1\", isRoot: true },\n    { stringIndex: 1, fret: 2, note: \"B1\", isRoot: false },\n    { stringIndex: 2, fret: 2, note: \"E2\", isRoot: false },\n    { stringIndex: 3, fret: 0, note: \"G2\", isRoot: false }\n  ],\n  \"Dm\": [\n    { stringIndex: 0, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 1, fret: -1, note: \"\", isRoot: false },\n    { stringIndex: 2, fret: 0, note: \"D2\", isRoot: true },\n    { stringIndex: 3, fret: 1, note: \"G#2\", isRoot: false }\n  ]\n};\n\nexport class StringInstrumentSystem {\n  private instrument: StringInstrument;\n\n  constructor(instrumentType: string) {\n    this.instrument = INSTRUMENTS[instrumentType];\n    if (!this.instrument) {\n      throw new Error(`Unknown instrument type: ${instrumentType}`);\n    }\n  }\n\n  getInstrument(): StringInstrument {\n    return this.instrument;\n  }\n\n  getChordFingering(chordName: string, transposeSemitones: number = 0): FingeringPosition[] {\n    console.log(`⚠️ DEPRECATED: Using old StringInstrumentSystem.getChordFingering for ${chordName}`);\n    console.log(`Please use useChordFingerings hook instead for consistent chord data`);\n    \n    const instrumentKey = this.instrument.name.toLowerCase();\n    \n    // Fallback for bass-specific patterns only\n    if (instrumentKey === \"bass\" && BASS_CHORD_PATTERNS[chordName]) {\n      console.log(`Found bass pattern for ${chordName}`);\n      return BASS_CHORD_PATTERNS[chordName];\n    }\n    \n    console.log(`No fingering found for ${chordName}, returning empty array`);\n    return [];\n  }\n\n  calculateNoteFromFret(stringIndex: number, fret: number): string {\n    if (fret === -1) return \"\"; // Muted string\n    \n    const noteSequence = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    const openStringNote = this.instrument.strings[stringIndex];\n    \n    // Extract note and octave properly\n    const match = openStringNote.match(/^([A-G][#b]?)(\\d?)$/);\n    if (!match) return openStringNote; // Return as-is if can't parse\n    \n    const baseNote = match[1];\n    const baseOctave = parseInt(match[2]) || 3; // Default to octave 3 if no octave specified\n    \n    const openNoteIndex = noteSequence.indexOf(baseNote);\n    if (openNoteIndex === -1) return openStringNote; // Return as-is if can't find note\n    \n    const targetNoteIndex = (openNoteIndex + fret) % 12;\n    const octaveShift = Math.floor((openNoteIndex + fret) / 12);\n    const finalOctave = baseOctave + octaveShift;\n    \n    return noteSequence[targetNoteIndex] + finalOctave;\n  }\n\n  getStringNote(stringIndex: number): string {\n    return this.instrument.strings[stringIndex];\n  }\n\n  getStringThickness(stringIndex: number): number {\n    return this.instrument.thickness[stringIndex];\n  }\n\n  getStringColor(stringIndex: number): string {\n    return this.instrument.colors?.[stringIndex] || \"bg-amber-500\";\n  }\n\n  getStringCount(): number {\n    return this.instrument.strings.length;\n  }\n\n  getFretCount(): number {\n    return this.instrument.fretCount;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/lib/utils.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ClassValue","line":1,"column":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/main.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token !","line":17,"column":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\nimport { LanguageProvider } from \"./contexts/LanguageContext.tsx\";\nimport { validateDatabaseIntegrity, getDatabaseStats } from \"./lib/databaseValidator\";\n\n// Validate database integrity on startup\ntry {\n  validateDatabaseIntegrity();\n  const stats = getDatabaseStats();\n  console.log(\"📊 Chord Database Stats:\", stats);\n} catch (error) {\n  console.error(\"❌ Failed to validate chord database:\", error);\n  // Continue loading but log the error\n}\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <LanguageProvider>\n    <App />\n  </LanguageProvider>\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/pages/Index.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":4,"column":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SmartGuitar } from \"@/components\";\n\nconst Index = () => {\n  return <SmartGuitar />;\n};\n\nexport default Index;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/pages/NotFound.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":5,"column":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Navigate } from \"react-router-dom\";\n\nconst NotFound = () => {\n  // Silent redirect to home page\n  return <Navigate to=\"/\" replace />;\n};\n\nexport default NotFound;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/components/button.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":7,"column":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest'\nimport { render } from '@testing-library/react'\nimport { Button } from '@/components/ui/button'\n\ndescribe('UI Components', () => {\n  it('should render Button component', () => {\n    const { container } = render(<Button>Test Button</Button>)\n    expect(container.firstChild).toBeDefined()\n  })\n\n  it('should render Button with variant', () => {\n    const { container } = render(<Button variant=\"outline\">Outline Button</Button>)\n    expect(container.firstChild).toBeDefined()\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/hooks/useLocalStorage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/integration/imports.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/minimal.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/setup.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token as","line":27,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom'\nimport { expect, afterEach, vi, beforeAll } from 'vitest'\nimport { cleanup } from '@testing-library/react'\n\n// Cleanup after each test case\nafterEach(() => {\n  cleanup()\n})\n\n// Set up DOM globals before all tests\nbeforeAll(() => {\n  // Mock Web Audio API\n  global.AudioContext = vi.fn(() => ({\n    createGain: vi.fn(() => ({\n      connect: vi.fn(),\n      disconnect: vi.fn(),\n      gain: { value: 1 }\n    })),\n    createOscillator: vi.fn(() => ({\n      connect: vi.fn(),\n      start: vi.fn(),\n      stop: vi.fn(),\n      frequency: { value: 440 }\n    })),\n    destination: {},\n    currentTime: 0\n  })) as any\n\n  // Mock localStorage\n  const localStorageMock = {\n    getItem: vi.fn(),\n    setItem: vi.fn(),\n    removeItem: vi.fn(),\n    clear: vi.fn(),\n  }\n  \n  Object.defineProperty(window, 'localStorage', {\n    value: localStorageMock,\n    writable: true,\n  })\n\n  // Mock matchMedia\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: vi.fn().mockImplementation(query => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: vi.fn(),\n      removeListener: vi.fn(),\n      addEventListener: vi.fn(),\n      removeEventListener: vi.fn(),\n      dispatchEvent: vi.fn(),\n    })),\n  })\n})\n\n// Mock Howler for audio tests\nvi.mock('howler', () => ({\n  Howl: vi.fn().mockImplementation(() => ({\n    load: vi.fn(),\n    play: vi.fn(),\n    stop: vi.fn(),\n    volume: vi.fn(),\n    on: vi.fn(),\n    off: vi.fn()\n  }))\n}))\n\n// Mock tone.js\nvi.mock('tone', () => ({\n  start: vi.fn(),\n  context: { state: 'running' },\n  MembraneSynth: vi.fn(() => ({\n    toDestination: vi.fn(() => ({ triggerAttackRelease: vi.fn() }))\n  })),\n  Player: vi.fn(() => ({\n    toDestination: vi.fn(() => ({ start: vi.fn(), loaded: true }))\n  }))\n}))","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/utils/chordSystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/utils/chordSystemAdvanced.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/test/utils/types.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":5,"column":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest'\n\ndescribe('Type Safety', () => {\n  it('should verify basic types are working', () => {\n    const testString: string = 'test'\n    const testNumber: number = 42\n    const testBoolean: boolean = true\n    \n    expect(typeof testString).toBe('string')\n    expect(typeof testNumber).toBe('number')\n    expect(typeof testBoolean).toBe('boolean')\n  })\n\n  it('should handle array types correctly', () => {\n    const stringArray: string[] = ['a', 'b', 'c']\n    const numberArray: number[] = [1, 2, 3]\n    \n    expect(Array.isArray(stringArray)).toBe(true)\n    expect(Array.isArray(numberArray)).toBe(true)\n    expect(stringArray.length).toBe(3)\n    expect(numberArray.length).toBe(3)\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/types/audio.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":1,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface AudioState {\n  isReady: boolean;\n  isLoading: boolean;\n  error?: string;\n}\n\nexport interface DrumSounds {\n  kick: () => Promise<void>;\n  snare: () => Promise<void>;\n  hihat: () => Promise<void>;\n  crash: () => Promise<void>;\n}\n\nexport interface StringSounds {\n  playNote: (note: string) => Promise<void>;\n  isReady: boolean;\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/types/chord.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":1,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Chord {\n  name: string;\n  fingers: number[];\n  isCustom?: boolean;\n}\n\nexport interface ChordLibrary {\n  [key: string]: Chord;\n}\n\nexport interface ChordSelectorProps {\n  chords: Chord[];\n  selectedChord: Chord | null;\n  onChordSelect: (chord: Chord) => void;\n  title?: string;\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/types/instrument.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token type","line":3,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Chord } from './chord';\n\nexport type InstrumentType = 'guitar' | 'bass' | 'ukulele';\n\nexport interface FingeringPosition {\n  string: number;\n  fret: number;\n  note?: string;\n  isRoot?: boolean;\n}\n\nexport interface StringInstrumentProps {\n  selectedChord: Chord | null;\n  availableChords?: Chord[];\n  transposition?: number;\n  onStringPlay: (stringIndex: number, fromDrag?: boolean) => void;\n  playingString: number | null;\n  stringAnimation: { [key: number]: boolean };\n  onDragStart: () => void;\n  onDragEnd: () => void;\n  onStringEnter: (stringIndex: number) => void;\n  isDragging: boolean;\n  isGlobalMuted?: boolean;\n}\n\nexport interface FretBoardProps extends StringInstrumentProps {\n  instrumentType: InstrumentType;\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/chord-buddy-duo/chord-buddy-duo/src/vite-env.d.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token global","line":4,"column":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vite/client\" />\n/// <reference types=\"vitest/globals\" />\n\ndeclare global {\n  interface Window {\n    AudioContext: typeof AudioContext;\n    webkitAudioContext: typeof AudioContext;\n    matchMedia: (query: string) => MediaQueryList;\n  }\n}\n","usedDeprecatedRules":[]}]